<LesHouchesEvents version="3.0">
<header>
<!--
#*********************************************************************
#                                                                    *
#                        MadGraph5_aMC@NLO                           *
#                                                                    *
#                           Going Beyond                             *
#                                                                    *
#                   http://madgraph.hep.uiuc.edu                     *
#                   http://madgraph.phys.ucl.ac.be                   *
#                   http://amcatnlo.cern.ch                          *
#                                                                    *
#                     The MadGraph5_aMC@NLO team                     *
#                                                                    *
#....................................................................*
#                                                                    *
# This file contains all the information necessary to reproduce      *
# the events generated:                                              *
#                                                                    *
# 1. software version                                                *
# 2. proc_card          : code generation info including model       *
# 3. param_card         : model primary parameters in the LH format  *
# 4. run_card           : running parameters (collider and cuts)     *
# 5. pythia_card        : present only if pythia has been run        *
# 6. pgs_card           : present only if pgs has been run           *
# 7. delphes_cards      : present only if delphes has been run       *
#                                                                    *
#                                                                    *
#*********************************************************************
-->
<MGVersion>
#3.4.1
</MGVersion>
<MG5ProcCard>
<![CDATA[
#************************************************************
#*                     MadGraph5_aMC@NLO                    *
#*                                                          *
#*                *                       *                 *
#*                  *        * *        *                   *
#*                    * * * * 5 * * * *                     *
#*                  *        * *        *                   *
#*                *                       *                 *
#*                                                          *
#*                                                          *
#*         VERSION 3.4.1                 2022-09-01         *
#*                                                          *
#*    The MadGraph5_aMC@NLO Development Team - Find us at   *
#*    https://server06.fynu.ucl.ac.be/projects/madgraph     *
#*                                                          *
#************************************************************
#*                                                          *
#*               Command File for MadGraph5_aMC@NLO         *
#*                                                          *
#*     run as ./bin/mg5_aMC  filename                       *
#*                                                          *
#************************************************************
set group_subprocesses Auto
set ignore_six_quark_processes False
set low_mem_multicore_nlo_generation False
set complex_mass_scheme False
set include_lepton_initiated_processes False
set gauge unitary
set loop_optimized_output True
set loop_color_flows False
set max_npoint_for_channel 0
set default_unset_couplings 99
set max_t_for_channel 99
set zerowidth_tchannel True
set nlo_mixed_expansion True
import model sm
define p = g u c d s u~ c~ d~ s~
define j = g u c d s u~ c~ d~ s~
define l+ = e+ mu+
define l- = e- mu-
define vl = ve vm vt
define vl~ = ve~ vm~ vt~
import model MSSM_SLHA2-full --modelname
define EW = x1- x1+ n1
generate  p p > su1 ew
add process p p > su1 ew j
add process p p > su1 ew j j
add process p p > su1~ ew
add process p p > su1~ ew j
add process p p > su1~ ew j j
output EW_sq/ew_sq
]]>
</MG5ProcCard>
<MGProcCard>
#*********************************************************************
#                        MadGraph/MadEvent                           *
#                   http://madgraph.hep.uiuc.edu                     *
#                                                                    *
#                          proc_card.dat                             *
#*********************************************************************
#                                                                    *
#            This Files is generated by MADGRAPH 5                   *
#                                                                    *
# WARNING: This Files is generated for MADEVENT (compatibility issue)*
#          This files is NOT a valid MG4 proc_card.dat               *
#          Running this in MG4 will NEVER reproduce the result of MG5*
#                                                                    *
#*********************************************************************
#*********************************************************************
# Process(es) requested : mg2 input                                  *
#*********************************************************************
# Begin PROCESS # This is TAG. Do not modify this line
p p > su1 ew           #Process
# Be carefull the coupling are here in MG5 convention
          
end_coup           # End the couplings input

done               # this tells MG there are no more procs
# End PROCESS  # This is TAG. Do not modify this line
#*********************************************************************
# Model information                                                  *
#*********************************************************************
# Begin MODEL  # This is TAG. Do not modify this line
MSSM_SLHA2-full
# End   MODEL  # This is TAG. Do not modify this line
#*********************************************************************
# Start multiparticle definitions                                    *
#*********************************************************************
# Begin MULTIPARTICLES # This is TAG. Do not modify this line

# End  MULTIPARTICLES # This is TAG. Do not modify this line
</MGProcCard>
<MGRunCard>
<![CDATA[
#*********************************************************************
#                       MadGraph5_aMC@NLO                            *
#                                                                    *
#                     run_card.dat MadEvent                          *
#                                                                    *
#  This file is used to set the parameters of the run.               *
#                                                                    *
#  Some notation/conventions:                                        *
#                                                                    *
#   Lines starting with a '# ' are info or comments                  *
#                                                                    *
#   mind the format:   value    = variable     ! comment             *
#                                                                    *
#   To display more options, you can type the command:               *
#      update full_run_card                                          *
#*********************************************************************
#                                                                    
#*********************************************************************
# Tag name for the run (one word)                                    *
#*********************************************************************
  tag_1	= run_tag ! name of the run 
#*********************************************************************
# Number of events and rnd seed                                      *
# Warning: Do not generate more than 1M events in a single run       *
#*********************************************************************
  10000	= nevents ! Number of unweighted events requested 
 39 = iseed ! rnd seed (0=assigned automatically=default))
#*********************************************************************
# Collider type and energy                                           *
# lpp: 0=No PDF, 1=proton, -1=antiproton, 2=photon from proton,      *
#                3=photon from electron, 4=photon from muon          *
#*********************************************************************
  1	= lpp1 ! beam 1 type 
  1	= lpp2 ! beam 2 type
  6500.0	= ebeam1 ! beam 1 total energy in GeV
  6500.0	= ebeam2 ! beam 2 total energy in GeV
# To see polarised beam options: type "update beam_pol"

#*********************************************************************
# PDF CHOICE: this automatically fixes also alpha_s and its evol.    *
#*********************************************************************
  nn23lo1	= pdlabel ! PDF set                                     
  230000	= lhaid ! if pdlabel=lhapdf, this is the lhapdf number
# To see heavy ion options: type "update ion_pdf"
#*********************************************************************
# Renormalization and factorization scales                           *
#*********************************************************************
  False	= fixed_ren_scale ! if .true. use fixed ren scale
  False	= fixed_fac_scale ! if .true. use fixed fac scale
  91.188	= scale ! fixed ren scale
  91.188	= dsqrt_q2fact1 ! fixed fact scale for pdf1
  91.188	= dsqrt_q2fact2 ! fixed fact scale for pdf2
  -1	= dynamical_scale_choice ! Choose one of the preselected dynamical choices
  1.0	= scalefact ! scale factor for event-by-event scales
#*********************************************************************
# Type and output format
#*********************************************************************
  False	= gridpack !True = setting up the grid pack
  -1.0	= time_of_flight ! threshold (in mm) below which the invariant livetime is not written (-1 means not written)
  average	= event_norm ! average/sum. Normalization of the weight in the LHEF
# To see MLM/CKKW  merging options: type "update MLM" or "update CKKW"

#*********************************************************************
#
#*********************************************************************
# Phase-Space Optimization strategy (basic options)
#*********************************************************************
  0	= nhel ! using helicities importance sampling or not.
                             ! 0: sum over helicity, 1: importance sampling
  2	= sde_strategy ! default integration strategy (hep-ph/2021.xxxxx)
                             ! 1 is old strategy (using amp square)
			     ! 2 is new strategy (using only the denominator)
# To see advanced option for Phase-Space optimization: type "update psoptim"			     
#*********************************************************************
# Generation bias, check the wiki page below for more information:   *
#  'cp3.irmp.ucl.ac.be/projects/madgraph/wiki/LOEventGenerationBias' *
#*********************************************************************
  None	= bias_module ! Bias type of bias, [None, ptj_bias, -custom_folder-]
  {}	= bias_parameters ! Specifies the parameters of the module.
#
#*******************************                                                 
# Parton level cuts definition *
#*******************************                                     
#                                                                    
#
#*********************************************************************
# BW cutoff (M+/-bwcutoff*Gamma) ! Define on/off-shell for "$" and decay  
#*********************************************************************
  15.0	= bwcutoff ! (M+/-bwcutoff*Gamma)
#*********************************************************************
# Standard Cuts                                                      *
#*********************************************************************
# Minimum and maximum pt's (for max, -1 means no cut)                *
#*********************************************************************
  {}	= pt_min_pdg ! pt cut for other particles (use pdg code). Applied on particle and anti-particle
  {}	= pt_max_pdg ! pt cut for other particles (syntax e.g. {6: 100, 25: 50}) 
#
# For display option for energy cut in the partonic center of mass frame type 'update ecut'
#
#*********************************************************************
# Maximum and minimum absolute rapidity (for max, -1 means no cut)   *
#*********************************************************************
  {}	= eta_min_pdg ! rap cut for other particles (use pdg code). Applied on particle and anti-particle
  {}	= eta_max_pdg ! rap cut for other particles (syntax e.g. {6: 2.5, 23: 5})
#*********************************************************************
# Minimum and maximum DeltaR distance                                *
#*********************************************************************
#*********************************************************************
# Minimum and maximum invariant mass for pairs                       *
#*********************************************************************
  {}	= mxx_min_pdg ! min invariant mass of a pair of particles X/X~ (e.g. {6:250})
  {'default': False}	= mxx_only_part_antipart ! if True the invariant mass is applied only 
                       ! to pairs of particle/antiparticle and not to pairs of the same pdg codes.  
#*********************************************************************
# Inclusive cuts                                                     *
#*********************************************************************
  0.0	= ptheavy ! minimum pt for at least one heavy final state
#*********************************************************************
# maximal pdg code for quark to be considered as a light jet         *
# (otherwise b cuts are applied)                                     *
#*********************************************************************
  4	= maxjetflavor ! Maximum jet pdg code
#*********************************************************************
#
#*********************************************************************
# Store info for systematics studies                                 *
# WARNING: Do not use for interference type of computation           *
#*********************************************************************
  False	= use_syst ! Enable systematics studies
#
  systematics	= systematics_program ! none, systematics [python], SysCalc [depreceted, C++]
  ['--mur=0.5,1,2', '--muf=0.5,1,2', '--pdf=errorset']	= systematics_arguments ! see: https://cp3.irmp.ucl.ac.be/projects/madgraph/wiki/Systematics#Systematicspythonmodule
# Syscalc is deprecated but to see the associate options type'update syscalc'
]]>
</MGRunCard>
<slha>
######################################################################
## PARAM_CARD AUTOMATICALY GENERATED BY MG5                       ####
######################################################################
###################################
## INFORMATION FOR SPINFO
###################################
BLOCK SPINFO #   program information
      1 sphenosarah # spectrum calculator
      2 v4.0.4 # version number of spheno
      9 4.14.3 # version number of sarah
###################################
## INFORMATION FOR MODSEL
###################################
BLOCK MODSEL #   input parameters
      1 0 # susy scale input
      2 1 # boundary conditions
      6 1 # switching on flavour violation
###################################
## INFORMATION FOR MINPAR
###################################
BLOCK MINPAR #   input parameters
      1 0.000000e+00 # m0
      2 0.000000e+00 # m12
      3 1.000000e+01 # tanbeta
      4 0.000000e+00 # signummu
      5 0.000000e+00 # azero
###################################
## INFORMATION FOR FRALPHA
###################################
BLOCK FRALPHA # 
      1 -1.138252e-01 # alp
###################################
## INFORMATION FOR UPMNS
###################################
BLOCK UPMNS # 
      1 1 1.000000e+00 # rmns1x1
      2 2 1.000000e+00 # rmns2x2
      3 3 1.000000e+00 # rmns3x3 i
###################################
## INFORMATION FOR EXTPAR
###################################
BLOCK EXTPAR #   input parameters
      1 2.000000e+03 # m1input
      2 1.500000e+02 # m2input
      3 3.000000e+03 # m3input
      23 2.000000e+03 # muinput
      24 1.664391e+05 # ma2input
      25 1.000000e+01 # tanbeta
###################################
## INFORMATION FOR GAUGEGUT
###################################
BLOCK GAUGEGUT Q= 1.000000e+03 #   (gut scale)
      1 4.653089e-01 # g1(q)
      2 6.380119e-01 # g2(q)
      3 1.017866e+00 # g3(q)
###################################
## INFORMATION FOR SMINPUTS
###################################
BLOCK SMINPUTS #   sm parameters
      1 1.279320e+02 # alpha_em^-1(mz)^msbar
      2 1.166370e-05 # g_mu [gev^-2]
      3 1.300000e-01 # alpha_s(mz)^msbar
      4 9.118870e+01 # m_z(pole)
      5 4.180000e+00 # m_b(m_b), msbar
      6 1.735000e+02 # m_t(pole)
      7 1.776690e+00 # m_tau(pole)
###################################
## INFORMATION FOR VCKMIN
###################################
BLOCK VCKMIN #   ckm matrix, wolfenstein parameterization
      1 2.253500e-01 # lambda
      2 8.110000e-01 # a
      3 1.310000e-01 # rho bar
      4 3.450000e-01 # eta bar
###################################
## INFORMATION FOR VCKM
###################################
BLOCK VCKM Q= 1.000000e+03 #   re(ckm) at the susy scale
      1 1 9.738553e-01 # re(v_11)
      1 2 2.271424e-01 # re(v_12)
      1 3 3.487095e-03 # re(v_13)
      2 1 -2.270905e-01 # re(v_21)
      2 2 9.729994e-01 # re(v_22)
      2 3 4.125653e-02 # re(v_23)
      3 1 5.978167e-03 # re(v_31)
      3 2 -4.096978e-02 # re(v_32)
      3 3 9.991425e-01 # re(v_33)
###################################
## INFORMATION FOR GAUGE
###################################
BLOCK GAUGE Q= 1.000000e+03 #   (susy scale)
      1 3.604268e-01 # g1
      2 6.380119e-01 # g2
      3 1.017866e+00 # g3
###################################
## INFORMATION FOR HMIX
###################################
BLOCK HMIX Q= 1.000000e+03 #   (susy scale)
      1 2.000000e+03 # mu
      2 1.000000e+01 # tb
      4 4.499689e+05 # ma2
      101 1.647912e+04 # bmu
      102 2.438031e+01 # vd
      103 2.438031e+02 # vu
      3 2.450191e+02 # v
      10 1.471139e+00 # betah
      11 -1.053509e-01 # alphah
###################################
## INFORMATION FOR IMHMIX
###################################
BLOCK IMHMIX Q= 1.000000e+03 #   (susy scale)
      1 0.000000e+00 # mu
      101 0.000000e+00 # bmu
###################################
## INFORMATION FOR MSOFT
###################################
BLOCK MSOFT Q= 1.000000e+03 #   (susy scale)
      21 -4.170857e+06 # mhd2
      22 -1.296284e+07 # mhu2
      1 2.000000e+03 # m1
      2 1.500000e+02 # m2
      3 3.000000e+03 # m3
###################################
## INFORMATION FOR IMMSOFT
###################################
BLOCK IMMSOFT Q= 1.000000e+03 #   (susy scale)
      1 0.000000e+00 # m1
      2 0.000000e+00 # m2
      3 0.000000e+00 # m3
###################################
## INFORMATION FOR PHASES
###################################
BLOCK PHASES Q= 1.000000e+03 #   (susy scale)
      1 1.000000e+00 # pg
###################################
## INFORMATION FOR IMPHASES
###################################
BLOCK IMPHASES Q= 1.000000e+03 #   (susy scale)
      1 0.000000e+00 # pg
###################################
## INFORMATION FOR TREEMSOFT
###################################
BLOCK TREEMSOFT Q= 1.000000e+03 #   (susy scale)
      21 -3.831259e+06 # mhd2
      22 -4.002302e+06 # mhu2
###################################
## INFORMATION FOR LOOPMSOFT
###################################
BLOCK LOOPMSOFT Q= 1.000000e+03 #   (susy scale)
      21 -4.381441e+06 # mhd2
      22 -1.303954e+07 # mhu2
###################################
## INFORMATION FOR YD
###################################
BLOCK YD Q= 1.000000e+03 #   (susy scale)
      1 1 1.347689e-04 # real(yd(1,1),dp)
      1 2 -1.381717e-20 # real(yd(1,2),dp)
      1 3 2.481542e-24 # real(yd(1,3),dp)
      2 1 1.716891e-19 # real(yd(2,1),dp)
      2 2 2.572645e-03 # real(yd(2,2),dp)
      2 3 -2.117582e-22 # real(yd(2,3),dp)
      3 1 0.000000e+00 # real(yd(3,1),dp)
      3 2 0.000000e+00 # real(yd(3,2),dp)
      3 3 1.329158e-01 # real(yd(3,3),dp)
###################################
## INFORMATION FOR IMYD
###################################
BLOCK IMYD Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(yd(1,1))
      1 2 0.000000e+00 # aimag(yd(1,2))
      1 3 0.000000e+00 # aimag(yd(1,3))
      2 1 0.000000e+00 # aimag(yd(2,1))
      2 2 0.000000e+00 # aimag(yd(2,2))
      2 3 0.000000e+00 # aimag(yd(2,3))
      3 1 0.000000e+00 # aimag(yd(3,1))
      3 2 0.000000e+00 # aimag(yd(3,2))
      3 3 0.000000e+00 # aimag(yd(3,3))
###################################
## INFORMATION FOR YE
###################################
BLOCK YE Q= 1.000000e+03 #   (susy scale)
      1 1 2.931183e-05 # real(ye(1,1),dp)
      1 2 0.000000e+00 # real(ye(1,2),dp)
      1 3 0.000000e+00 # real(ye(1,3),dp)
      2 1 0.000000e+00 # real(ye(2,1),dp)
      2 2 6.060757e-03 # real(ye(2,2),dp)
      2 3 0.000000e+00 # real(ye(2,3),dp)
      3 1 0.000000e+00 # real(ye(3,1),dp)
      3 2 0.000000e+00 # real(ye(3,2),dp)
      3 3 1.019186e-01 # real(ye(3,3),dp)
###################################
## INFORMATION FOR IMYE
###################################
BLOCK IMYE Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(ye(1,1))
      1 2 0.000000e+00 # aimag(ye(1,2))
      1 3 0.000000e+00 # aimag(ye(1,3))
      2 1 0.000000e+00 # aimag(ye(2,1))
      2 2 0.000000e+00 # aimag(ye(2,2))
      2 3 0.000000e+00 # aimag(ye(2,3))
      3 1 0.000000e+00 # aimag(ye(3,1))
      3 2 0.000000e+00 # aimag(ye(3,2))
      3 3 0.000000e+00 # aimag(ye(3,3))
###################################
## INFORMATION FOR YU
###################################
BLOCK YU Q= 1.000000e+03 #   (susy scale)
      1 1 6.825271e-06 # real(yu(1,1),dp)
      1 2 -4.832741e-20 # real(yu(1,2),dp)
      1 3 1.985233e-23 # real(yu(1,3),dp)
      2 1 2.721962e-17 # real(yu(2,1),dp)
      2 2 3.395401e-03 # real(yu(2,2),dp)
      2 3 -2.878557e-17 # real(yu(2,3),dp)
      3 1 1.734723e-18 # real(yu(3,1),dp)
      3 2 6.938894e-18 # real(yu(3,2),dp)
      3 3 8.192460e-01 # real(yu(3,3),dp)
###################################
## INFORMATION FOR IMYU
###################################
BLOCK IMYU Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(yu(1,1))
      1 2 0.000000e+00 # aimag(yu(1,2))
      1 3 0.000000e+00 # aimag(yu(1,3))
      2 1 0.000000e+00 # aimag(yu(2,1))
      2 2 0.000000e+00 # aimag(yu(2,2))
      2 3 0.000000e+00 # aimag(yu(2,3))
      3 1 0.000000e+00 # aimag(yu(3,1))
      3 2 0.000000e+00 # aimag(yu(3,2))
      3 3 0.000000e+00 # aimag(yu(3,3))
###################################
## INFORMATION FOR TD
###################################
BLOCK TD Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # real(td(1,1),dp)
      1 2 0.000000e+00 # real(td(1,2),dp)
      1 3 0.000000e+00 # real(td(1,3),dp)
      2 1 0.000000e+00 # real(td(2,1),dp)
      2 2 0.000000e+00 # real(td(2,2),dp)
      2 3 0.000000e+00 # real(td(2,3),dp)
      3 1 0.000000e+00 # real(td(3,1),dp)
      3 2 0.000000e+00 # real(td(3,2),dp)
      3 3 0.000000e+00 # real(td(3,3),dp)
###################################
## INFORMATION FOR IMTD
###################################
BLOCK IMTD Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(td(1,1))
      1 2 0.000000e+00 # aimag(td(1,2))
      1 3 0.000000e+00 # aimag(td(1,3))
      2 1 0.000000e+00 # aimag(td(2,1))
      2 2 0.000000e+00 # aimag(td(2,2))
      2 3 0.000000e+00 # aimag(td(2,3))
      3 1 0.000000e+00 # aimag(td(3,1))
      3 2 0.000000e+00 # aimag(td(3,2))
      3 3 0.000000e+00 # aimag(td(3,3))
###################################
## INFORMATION FOR TDIN
###################################
BLOCK TDIN Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # real(td(1,1),dp)
      1 2 0.000000e+00 # real(td(1,2),dp)
      1 3 0.000000e+00 # real(td(1,3),dp)
      2 1 0.000000e+00 # real(td(2,1),dp)
      2 2 0.000000e+00 # real(td(2,2),dp)
      2 3 0.000000e+00 # real(td(2,3),dp)
      3 1 0.000000e+00 # real(td(3,1),dp)
      3 2 0.000000e+00 # real(td(3,2),dp)
      3 3 0.000000e+00 # real(td(3,3),dp)
###################################
## INFORMATION FOR TE
###################################
BLOCK TE Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # real(te(1,1),dp)
      1 2 0.000000e+00 # real(te(1,2),dp)
      1 3 0.000000e+00 # real(te(1,3),dp)
      2 1 0.000000e+00 # real(te(2,1),dp)
      2 2 0.000000e+00 # real(te(2,2),dp)
      2 3 0.000000e+00 # real(te(2,3),dp)
      3 1 0.000000e+00 # real(te(3,1),dp)
      3 2 0.000000e+00 # real(te(3,2),dp)
      3 3 0.000000e+00 # real(te(3,3),dp)
###################################
## INFORMATION FOR IMTE
###################################
BLOCK IMTE Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(te(1,1))
      1 2 0.000000e+00 # aimag(te(1,2))
      1 3 0.000000e+00 # aimag(te(1,3))
      2 1 0.000000e+00 # aimag(te(2,1))
      2 2 0.000000e+00 # aimag(te(2,2))
      2 3 0.000000e+00 # aimag(te(2,3))
      3 1 0.000000e+00 # aimag(te(3,1))
      3 2 0.000000e+00 # aimag(te(3,2))
      3 3 0.000000e+00 # aimag(te(3,3))
###################################
## INFORMATION FOR TU
###################################
BLOCK TU Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # real(tu(1,1),dp)
      1 2 0.000000e+00 # real(tu(1,2),dp)
      1 3 0.000000e+00 # real(tu(1,3),dp)
      2 1 0.000000e+00 # real(tu(2,1),dp)
      2 2 0.000000e+00 # real(tu(2,2),dp)
      2 3 0.000000e+00 # real(tu(2,3),dp)
      3 1 0.000000e+00 # real(tu(3,1),dp)
      3 2 0.000000e+00 # real(tu(3,2),dp)
      3 3 0.000000e+00 # real(tu(3,3),dp)
###################################
## INFORMATION FOR IMTU
###################################
BLOCK IMTU Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(tu(1,1))
      1 2 0.000000e+00 # aimag(tu(1,2))
      1 3 0.000000e+00 # aimag(tu(1,3))
      2 1 0.000000e+00 # aimag(tu(2,1))
      2 2 0.000000e+00 # aimag(tu(2,2))
      2 3 0.000000e+00 # aimag(tu(2,3))
      3 1 0.000000e+00 # aimag(tu(3,1))
      3 2 0.000000e+00 # aimag(tu(3,2))
      3 3 0.000000e+00 # aimag(tu(3,3))
###################################
## INFORMATION FOR TUIN
###################################
BLOCK TUIN Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # real(tu(1,1),dp)
      1 2 0.000000e+00 # real(tu(1,2),dp)
      1 3 0.000000e+00 # real(tu(1,3),dp)
      2 1 0.000000e+00 # real(tu(2,1),dp)
      2 2 0.000000e+00 # real(tu(2,2),dp)
      2 3 0.000000e+00 # real(tu(2,3),dp)
      3 1 0.000000e+00 # real(tu(3,1),dp)
      3 2 0.000000e+00 # real(tu(3,2),dp)
      3 3 0.000000e+00 # real(tu(3,3),dp)
###################################
## INFORMATION FOR MSQ2
###################################
BLOCK MSQ2 Q= 1.000000e+03 #   (susy scale)
      1 1 1.365000e+06 # real(mq2(1,1),dp)
      1 2 1.487492e+02 # real(mq2(1,2),dp)
      1 3 -3.541374e+03 # real(mq2(1,3),dp)
      2 1 1.487492e+02 # real(mq2(2,1),dp)
      2 2 1.000000e+08 # real(mq2(2,2),dp)
      2 3 5.340666e-03 # real(mq2(2,3),dp)
      3 1 -3.541374e+03 # real(mq2(3,1),dp)
      3 2 5.340666e-03 # real(mq2(3,2),dp)
      3 3 1.000000e+08 # real(mq2(3,3),dp)
###################################
## INFORMATION FOR MSQ2IN
###################################
BLOCK MSQ2IN Q= 1.000000e+03 #   (susy scale)
      1 1 1.365000e+06 # real(mq2(1,1),dp)
      1 2 1.487492e+02 # real(mq2(1,2),dp)
      1 3 -3.541374e+03 # real(mq2(1,3),dp)
      2 1 1.487492e+02 # real(mq2(2,1),dp)
      2 2 1.000000e+08 # real(mq2(2,2),dp)
      2 3 5.340666e-03 # real(mq2(2,3),dp)
      3 1 -3.541374e+03 # real(mq2(3,1),dp)
      3 2 5.340666e-03 # real(mq2(3,2),dp)
      3 3 1.000000e+08 # real(mq2(3,3),dp)
###################################
## INFORMATION FOR IMMSQ2
###################################
BLOCK IMMSQ2 Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(mq2(1,1))
      1 2 0.000000e+00 # aimag(mq2(1,2))
      1 3 0.000000e+00 # aimag(mq2(1,3))
      2 1 0.000000e+00 # aimag(mq2(2,1))
      2 2 0.000000e+00 # aimag(mq2(2,2))
      2 3 0.000000e+00 # aimag(mq2(2,3))
      3 1 0.000000e+00 # aimag(mq2(3,1))
      3 2 0.000000e+00 # aimag(mq2(3,2))
      3 3 0.000000e+00 # aimag(mq2(3,3))
###################################
## INFORMATION FOR MSL2
###################################
BLOCK MSL2 Q= 1.000000e+03 #   (susy scale)
      1 1 4.000000e+06 # real(ml2(1,1),dp)
      1 2 0.000000e+00 # real(ml2(1,2),dp)
      1 3 0.000000e+00 # real(ml2(1,3),dp)
      2 1 0.000000e+00 # real(ml2(2,1),dp)
      2 2 4.000000e+06 # real(ml2(2,2),dp)
      2 3 0.000000e+00 # real(ml2(2,3),dp)
      3 1 0.000000e+00 # real(ml2(3,1),dp)
      3 2 0.000000e+00 # real(ml2(3,2),dp)
      3 3 4.000000e+06 # real(ml2(3,3),dp)
###################################
## INFORMATION FOR IMMSL2
###################################
BLOCK IMMSL2 Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(ml2(1,1))
      1 2 0.000000e+00 # aimag(ml2(1,2))
      1 3 0.000000e+00 # aimag(ml2(1,3))
      2 1 0.000000e+00 # aimag(ml2(2,1))
      2 2 0.000000e+00 # aimag(ml2(2,2))
      2 3 0.000000e+00 # aimag(ml2(2,3))
      3 1 0.000000e+00 # aimag(ml2(3,1))
      3 2 0.000000e+00 # aimag(ml2(3,2))
      3 3 0.000000e+00 # aimag(ml2(3,3))
###################################
## INFORMATION FOR MSD2
###################################
BLOCK MSD2 Q= 1.000000e+03 #   (susy scale)
      1 1 1.000000e+08 # real(md2(1,1),dp)
      1 2 -9.394707e-11 # real(md2(1,2),dp)
      1 3 1.776357e-15 # real(md2(1,3),dp)
      2 1 -9.394707e-11 # real(md2(2,1),dp)
      2 2 1.000000e+08 # real(md2(2,2),dp)
      2 3 2.273737e-13 # real(md2(2,3),dp)
      3 1 1.776357e-15 # real(md2(3,1),dp)
      3 2 3.410605e-13 # real(md2(3,2),dp)
      3 3 1.000000e+08 # real(md2(3,3),dp)
###################################
## INFORMATION FOR MSD2IN
###################################
BLOCK MSD2IN Q= 1.000000e+03 #   (susy scale)
      1 1 1.000000e+08 # real(md2(1,1),dp)
      1 2 -9.394707e-11 # real(md2(1,2),dp)
      1 3 1.776357e-15 # real(md2(1,3),dp)
      2 1 -9.394707e-11 # real(md2(2,1),dp)
      2 2 1.000000e+08 # real(md2(2,2),dp)
      2 3 2.273737e-13 # real(md2(2,3),dp)
      3 1 1.776357e-15 # real(md2(3,1),dp)
      3 2 3.410605e-13 # real(md2(3,2),dp)
      3 3 1.000000e+08 # real(md2(3,3),dp)
###################################
## INFORMATION FOR IMMSD2
###################################
BLOCK IMMSD2 Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(md2(1,1))
      1 2 0.000000e+00 # aimag(md2(1,2))
      1 3 0.000000e+00 # aimag(md2(1,3))
      2 1 0.000000e+00 # aimag(md2(2,1))
      2 2 0.000000e+00 # aimag(md2(2,2))
      2 3 0.000000e+00 # aimag(md2(2,3))
      3 1 0.000000e+00 # aimag(md2(3,1))
      3 2 0.000000e+00 # aimag(md2(3,2))
      3 3 0.000000e+00 # aimag(md2(3,3))
###################################
## INFORMATION FOR MSU2
###################################
BLOCK MSU2 Q= 1.000000e+03 #   (susy scale)
      1 1 1.000000e+08 # real(mu2(1,1),dp)
      1 2 1.433083e-10 # real(mu2(1,2),dp)
      1 3 -2.775558e-17 # real(mu2(1,3),dp)
      2 1 1.433083e-10 # real(mu2(2,1),dp)
      2 2 1.000000e+08 # real(mu2(2,2),dp)
      2 3 -3.552714e-15 # real(mu2(2,3),dp)
      3 1 -2.775558e-17 # real(mu2(3,1),dp)
      3 2 -1.776357e-15 # real(mu2(3,2),dp)
      3 3 1.000000e+08 # real(mu2(3,3),dp)
###################################
## INFORMATION FOR MSU2IN
###################################
BLOCK MSU2IN Q= 1.000000e+03 #   (susy scale)
      1 1 1.000000e+08 # real(mu2(1,1),dp)
      1 2 1.433083e-10 # real(mu2(1,2),dp)
      1 3 -2.775558e-17 # real(mu2(1,3),dp)
      2 1 1.433083e-10 # real(mu2(2,1),dp)
      2 2 1.000000e+08 # real(mu2(2,2),dp)
      2 3 -3.552714e-15 # real(mu2(2,3),dp)
      3 1 -2.775558e-17 # real(mu2(3,1),dp)
      3 2 -1.776357e-15 # real(mu2(3,2),dp)
      3 3 1.000000e+08 # real(mu2(3,3),dp)
###################################
## INFORMATION FOR IMMSU2
###################################
BLOCK IMMSU2 Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(mu2(1,1))
      1 2 0.000000e+00 # aimag(mu2(1,2))
      1 3 0.000000e+00 # aimag(mu2(1,3))
      2 1 0.000000e+00 # aimag(mu2(2,1))
      2 2 0.000000e+00 # aimag(mu2(2,2))
      2 3 0.000000e+00 # aimag(mu2(2,3))
      3 1 0.000000e+00 # aimag(mu2(3,1))
      3 2 0.000000e+00 # aimag(mu2(3,2))
      3 3 0.000000e+00 # aimag(mu2(3,3))
###################################
## INFORMATION FOR MSE2
###################################
BLOCK MSE2 Q= 1.000000e+03 #   (susy scale)
      1 1 4.000000e+06 # real(me2(1,1),dp)
      1 2 0.000000e+00 # real(me2(1,2),dp)
      1 3 0.000000e+00 # real(me2(1,3),dp)
      2 1 0.000000e+00 # real(me2(2,1),dp)
      2 2 4.000000e+06 # real(me2(2,2),dp)
      2 3 0.000000e+00 # real(me2(2,3),dp)
      3 1 0.000000e+00 # real(me2(3,1),dp)
      3 2 0.000000e+00 # real(me2(3,2),dp)
      3 3 4.000000e+06 # real(me2(3,3),dp)
###################################
## INFORMATION FOR IMMSE2
###################################
BLOCK IMMSE2 Q= 1.000000e+03 #   (susy scale)
      1 1 0.000000e+00 # aimag(me2(1,1))
      1 2 0.000000e+00 # aimag(me2(1,2))
      1 3 0.000000e+00 # aimag(me2(1,3))
      2 1 0.000000e+00 # aimag(me2(2,1))
      2 2 0.000000e+00 # aimag(me2(2,2))
      2 3 0.000000e+00 # aimag(me2(2,3))
      3 1 0.000000e+00 # aimag(me2(3,1))
      3 2 0.000000e+00 # aimag(me2(3,2))
      3 3 0.000000e+00 # aimag(me2(3,3))
###################################
## INFORMATION FOR MASS
###################################
BLOCK MASS #   mass spectrum
      1000001 1.000000e+04 # sd_1
      1000003 1.000000e+04 # sd_2
      1000005 1.000000e+04 # sd_3
      2000001 1.000000e+04 # sd_4
      2000003 1.000000e+04 # sd_5
      2000005 1.000000e+04 # sd_6
      1000002 7.000000e+02 # su_1
      1000004 1.000000e+04 # su_2
      1000006 1.000000e+04 # su_3
      2000002 1.000000e+04 # su_4
      2000004 1.000000e+04 # su_5
      2000006 1.000000e+04 # su_6
      1000011 1.000000e+04 # se_1
      1000013 1.000000e+04 # se_2
      1000015 1.000000e+04 # se_3
      2000011 1.000000e+04 # se_4
      2000013 1.000000e+04 # se_5
      2000015 1.000000e+04 # se_6
      1000012 1.000000e+04 # sv_1
      1000014 1.000000e+04 # sv_2
      1000016 1.000000e+04 # sv_3
      25 1.266877e+02 # hh_1
      35 1.000000e+04 # hh_2
      36 1.000000e+04 # ah_2
      37 1.000000e+04 # hpm_2
      22 0.000000e+00 # vp
      23 9.118870e+01 # vz
      21 0.000000e+00 # vg
      24 7.933547e+01 # vwm
      1 0.000000e+00 # fd_1
      3 0.000000e+00 # fd_2
      5 4.180000e+00 # fd_3
      2 0.000000e+00 # fu_1
      4 0.000000e+00 # fu_2
      6 1.735000e+02 # fu_3
      11 0.000000e+00 # fe_1
      13 0.000000e+00 # fe_2
      15 1.776690e+00 # fe_3
      12 0.000000e+00 # fv_1
      14 0.000000e+00 # fv_2
      16 0.000000e+00 # fv_3
      1000021 1.000000e+04 # glu
      1000022 1.500000e+02 # chi_1
      1000023 1.000000e+04 # chi_2
      1000025 1.000000e+04 # chi_3
      1000035 1.000000e+04 # chi_4
      1000024 1.510000e+02 # cha_1
      1000037 1.000000e+04 # cha_2
###################################
## INFORMATION FOR LSP
###################################
BLOCK LSP #   lsp and nlsp
      1 1.000022e+06 # lsp
      2 1.000024e+06 # nlsp
###################################
## INFORMATION FOR DSQMIX
###################################
BLOCK DSQMIX Q= 1.000000e+03 #   ()
      1 1 1.000000e+00 # real(zd(1,1),dp)
      1 2 3.984024e-06 # real(zd(1,2),dp)
      1 3 -9.506968e-05 # real(zd(1,3),dp)
      1 4 4.376723e-07 # real(zd(1,4),dp)
      1 5 8.402877e-11 # real(zd(1,5),dp)
      1 6 -1.029483e-07 # real(zd(1,6),dp)
      2 1 4.376722e-07 # real(zd(2,1),dp)
      2 2 4.013615e-10 # real(zd(2,2),dp)
      2 3 -1.145184e-09 # real(zd(2,3),dp)
      2 4 -1.000000e+00 # real(zd(2,4),dp)
      2 5 -7.258426e-08 # real(zd(2,5),dp)
      2 6 3.850748e-08 # real(zd(2,6),dp)
      3 1 -4.677061e-09 # real(zd(3,1),dp)
      3 2 2.470422e-02 # real(zd(3,2),dp)
      3 3 9.864014e-04 # real(zd(3,3),dp)
      3 4 -7.253374e-08 # real(zd(3,4),dp)
      3 5 9.996942e-01 # real(zd(3,5),dp)
      3 6 5.074079e-04 # real(zd(3,6),dp)
      4 1 -7.610446e-08 # real(zd(4,1),dp)
      4 2 9.982660e-01 # real(zd(4,2),dp)
      4 3 4.099607e-02 # real(zd(4,3),dp)
      4 4 3.467270e-09 # real(zd(4,4),dp)
      4 5 -2.472676e-02 # real(zd(4,5),dp)
      4 6 3.424820e-02 # real(zd(4,6),dp)
      5 1 -2.575124e-06 # real(zd(5,1),dp)
      5 2 3.527482e-02 # real(zd(5,2),dp)
      5 3 -2.452659e-02 # real(zd(5,3),dp)
      5 4 -3.840609e-08 # real(zd(5,4),dp)
      5 5 -3.404086e-04 # real(zd(5,5),dp)
      5 6 -9.990766e-01 # real(zd(5,6),dp)
      6 1 9.511829e-05 # real(zd(6,1),dp)
      6 2 -4.013002e-02 # real(zd(6,2),dp)
      6 3 9.988577e-01 # real(zd(6,3),dp)
      6 4 -2.118562e-09 # real(zd(6,4),dp)
      6 5 1.927309e-05 # real(zd(6,5),dp)
      6 6 -2.593811e-02 # real(zd(6,6),dp)
###################################
## INFORMATION FOR IMDSQMIX
###################################
BLOCK IMDSQMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zd(1,1))
      1 2 0.000000e+00 # aimag(zd(1,2))
      1 3 0.000000e+00 # aimag(zd(1,3))
      1 4 0.000000e+00 # aimag(zd(1,4))
      1 5 0.000000e+00 # aimag(zd(1,5))
      1 6 0.000000e+00 # aimag(zd(1,6))
      2 1 0.000000e+00 # aimag(zd(2,1))
      2 2 0.000000e+00 # aimag(zd(2,2))
      2 3 0.000000e+00 # aimag(zd(2,3))
      2 4 0.000000e+00 # aimag(zd(2,4))
      2 5 0.000000e+00 # aimag(zd(2,5))
      2 6 0.000000e+00 # aimag(zd(2,6))
      3 1 0.000000e+00 # aimag(zd(3,1))
      3 2 0.000000e+00 # aimag(zd(3,2))
      3 3 0.000000e+00 # aimag(zd(3,3))
      3 4 0.000000e+00 # aimag(zd(3,4))
      3 5 0.000000e+00 # aimag(zd(3,5))
      3 6 0.000000e+00 # aimag(zd(3,6))
      4 1 0.000000e+00 # aimag(zd(4,1))
      4 2 0.000000e+00 # aimag(zd(4,2))
      4 3 0.000000e+00 # aimag(zd(4,3))
      4 4 0.000000e+00 # aimag(zd(4,4))
      4 5 0.000000e+00 # aimag(zd(4,5))
      4 6 0.000000e+00 # aimag(zd(4,6))
      5 1 0.000000e+00 # aimag(zd(5,1))
      5 2 0.000000e+00 # aimag(zd(5,2))
      5 3 0.000000e+00 # aimag(zd(5,3))
      5 4 0.000000e+00 # aimag(zd(5,4))
      5 5 0.000000e+00 # aimag(zd(5,5))
      5 6 0.000000e+00 # aimag(zd(5,6))
      6 1 0.000000e+00 # aimag(zd(6,1))
      6 2 0.000000e+00 # aimag(zd(6,2))
      6 3 0.000000e+00 # aimag(zd(6,3))
      6 4 0.000000e+00 # aimag(zd(6,4))
      6 5 0.000000e+00 # aimag(zd(6,5))
      6 6 0.000000e+00 # aimag(zd(6,6))
###################################
## INFORMATION FOR SNUMIX
###################################
BLOCK SNUMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # real(zv(1,1),dp)
      1 2 0.000000e+00 # real(zv(1,2),dp)
      1 3 1.000000e+00 # real(zv(1,3),dp)
      2 1 0.000000e+00 # real(zv(2,1),dp)
      2 2 1.000000e+00 # real(zv(2,2),dp)
      2 3 0.000000e+00 # real(zv(2,3),dp)
      3 1 1.000000e+00 # real(zv(3,1),dp)
      3 2 0.000000e+00 # real(zv(3,2),dp)
      3 3 0.000000e+00 # real(zv(3,3),dp)
###################################
## INFORMATION FOR IMSNUMIX
###################################
BLOCK IMSNUMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zv(1,1))
      1 2 0.000000e+00 # aimag(zv(1,2))
      1 3 0.000000e+00 # aimag(zv(1,3))
      2 1 0.000000e+00 # aimag(zv(2,1))
      2 2 0.000000e+00 # aimag(zv(2,2))
      2 3 0.000000e+00 # aimag(zv(2,3))
      3 1 0.000000e+00 # aimag(zv(3,1))
      3 2 0.000000e+00 # aimag(zv(3,2))
      3 3 0.000000e+00 # aimag(zv(3,3))
###################################
## INFORMATION FOR USQMIX
###################################
BLOCK USQMIX Q= 1.000000e+03 #   ()
      1 1 -1.000000e+00 # real(zu(1,1),dp)
      1 2 -4.032456e-06 # real(zu(1,2),dp)
      1 3 9.622544e-05 # real(zu(1,3),dp)
      1 4 -8.879980e-10 # real(zu(1,4),dp)
      1 5 1.029458e-07 # real(zu(1,5),dp)
      1 6 -6.140672e-07 # real(zu(1,6),dp)
      2 1 1.625550e-07 # real(zu(2,1),dp)
      2 2 -9.991923e-01 # real(zu(2,2),dp)
      2 3 -4.018299e-02 # real(zu(2,3),dp)
      2 4 -7.453902e-08 # real(zu(2,4),dp)
      2 5 -1.609152e-04 # real(zu(2,5),dp)
      2 6 3.345581e-06 # real(zu(2,6),dp)
      3 1 -9.362408e-10 # real(zu(3,1),dp)
      3 2 8.198214e-10 # real(zu(3,2),dp)
      3 3 3.069030e-11 # real(zu(3,3),dp)
      3 4 9.999999e-01 # real(zu(3,4),dp)
      3 5 -4.683163e-04 # real(zu(3,5),dp)
      3 6 5.100937e-08 # real(zu(3,6),dp)
      4 1 -1.029778e-07 # real(zu(4,1),dp)
      4 2 1.607865e-04 # real(zu(4,2),dp)
      4 3 6.436410e-06 # real(zu(4,3),dp)
      4 4 -4.683163e-04 # real(zu(4,4),dp)
      4 5 -9.999999e-01 # real(zu(4,5),dp)
      4 6 5.598264e-06 # real(zu(4,6),dp)
      5 1 -9.630468e-05 # real(zu(5,1),dp)
      5 2 4.018232e-02 # real(zu(5,2),dp)
      5 3 -9.991761e-01 # real(zu(5,3),dp)
      5 4 2.876335e-10 # real(zu(5,4),dp)
      5 5 -2.267353e-09 # real(zu(5,5),dp)
      5 6 -5.706065e-03 # real(zu(5,6),dp)
      6 1 1.163607e-06 # real(zu(6,1),dp)
      6 2 -2.326287e-04 # real(zu(6,2),dp)
      6 3 5.701322e-03 # real(zu(6,3),dp)
      6 4 4.838651e-08 # real(zu(6,4),dp)
      6 5 -5.598904e-06 # real(zu(6,5),dp)
      6 6 -9.999837e-01 # real(zu(6,6),dp)
###################################
## INFORMATION FOR IMUSQMIX
###################################
BLOCK IMUSQMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zu(1,1))
      1 2 0.000000e+00 # aimag(zu(1,2))
      1 3 0.000000e+00 # aimag(zu(1,3))
      1 4 0.000000e+00 # aimag(zu(1,4))
      1 5 0.000000e+00 # aimag(zu(1,5))
      1 6 0.000000e+00 # aimag(zu(1,6))
      2 1 0.000000e+00 # aimag(zu(2,1))
      2 2 0.000000e+00 # aimag(zu(2,2))
      2 3 0.000000e+00 # aimag(zu(2,3))
      2 4 0.000000e+00 # aimag(zu(2,4))
      2 5 0.000000e+00 # aimag(zu(2,5))
      2 6 0.000000e+00 # aimag(zu(2,6))
      3 1 0.000000e+00 # aimag(zu(3,1))
      3 2 0.000000e+00 # aimag(zu(3,2))
      3 3 0.000000e+00 # aimag(zu(3,3))
      3 4 0.000000e+00 # aimag(zu(3,4))
      3 5 0.000000e+00 # aimag(zu(3,5))
      3 6 0.000000e+00 # aimag(zu(3,6))
      4 1 0.000000e+00 # aimag(zu(4,1))
      4 2 0.000000e+00 # aimag(zu(4,2))
      4 3 0.000000e+00 # aimag(zu(4,3))
      4 4 0.000000e+00 # aimag(zu(4,4))
      4 5 0.000000e+00 # aimag(zu(4,5))
      4 6 0.000000e+00 # aimag(zu(4,6))
      5 1 0.000000e+00 # aimag(zu(5,1))
      5 2 0.000000e+00 # aimag(zu(5,2))
      5 3 0.000000e+00 # aimag(zu(5,3))
      5 4 0.000000e+00 # aimag(zu(5,4))
      5 5 0.000000e+00 # aimag(zu(5,5))
      5 6 0.000000e+00 # aimag(zu(5,6))
      6 1 0.000000e+00 # aimag(zu(6,1))
      6 2 0.000000e+00 # aimag(zu(6,2))
      6 3 0.000000e+00 # aimag(zu(6,3))
      6 4 0.000000e+00 # aimag(zu(6,4))
      6 5 0.000000e+00 # aimag(zu(6,5))
      6 6 0.000000e+00 # aimag(zu(6,6))
###################################
## INFORMATION FOR SELMIX
###################################
BLOCK SELMIX Q= 1.000000e+03 #   ()
      1 1 -0.000000e+00 # real(ze(1,1),dp)
      1 2 -0.000000e+00 # real(ze(1,2),dp)
      1 3 -7.736145e-02 # real(ze(1,3),dp)
      1 4 -0.000000e+00 # real(ze(1,4),dp)
      1 5 -0.000000e+00 # real(ze(1,5),dp)
      1 6 -9.970031e-01 # real(ze(1,6),dp)
      2 1 -0.000000e+00 # real(ze(2,1),dp)
      2 2 4.643293e-03 # real(ze(2,2),dp)
      2 3 -0.000000e+00 # real(ze(2,3),dp)
      2 4 -0.000000e+00 # real(ze(2,4),dp)
      2 5 9.999892e-01 # real(ze(2,5),dp)
      2 6 -0.000000e+00 # real(ze(2,6),dp)
      3 1 -2.245725e-05 # real(ze(3,1),dp)
      3 2 -0.000000e+00 # real(ze(3,2),dp)
      3 3 -0.000000e+00 # real(ze(3,3),dp)
      3 4 -1.000000e+00 # real(ze(3,4),dp)
      3 5 -0.000000e+00 # real(ze(3,5),dp)
      3 6 -0.000000e+00 # real(ze(3,6),dp)
      4 1 -1.000000e+00 # real(ze(4,1),dp)
      4 2 0.000000e+00 # real(ze(4,2),dp)
      4 3 0.000000e+00 # real(ze(4,3),dp)
      4 4 2.245725e-05 # real(ze(4,4),dp)
      4 5 0.000000e+00 # real(ze(4,5),dp)
      4 6 0.000000e+00 # real(ze(4,6),dp)
      5 1 0.000000e+00 # real(ze(5,1),dp)
      5 2 9.999892e-01 # real(ze(5,2),dp)
      5 3 0.000000e+00 # real(ze(5,3),dp)
      5 4 0.000000e+00 # real(ze(5,4),dp)
      5 5 -4.643293e-03 # real(ze(5,5),dp)
      5 6 0.000000e+00 # real(ze(5,6),dp)
      6 1 0.000000e+00 # real(ze(6,1),dp)
      6 2 0.000000e+00 # real(ze(6,2),dp)
      6 3 -9.970031e-01 # real(ze(6,3),dp)
      6 4 0.000000e+00 # real(ze(6,4),dp)
      6 5 0.000000e+00 # real(ze(6,5),dp)
      6 6 7.736145e-02 # real(ze(6,6),dp)
###################################
## INFORMATION FOR IMSELMIX
###################################
BLOCK IMSELMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(ze(1,1))
      1 2 0.000000e+00 # aimag(ze(1,2))
      1 3 0.000000e+00 # aimag(ze(1,3))
      1 4 0.000000e+00 # aimag(ze(1,4))
      1 5 0.000000e+00 # aimag(ze(1,5))
      1 6 0.000000e+00 # aimag(ze(1,6))
      2 1 0.000000e+00 # aimag(ze(2,1))
      2 2 0.000000e+00 # aimag(ze(2,2))
      2 3 0.000000e+00 # aimag(ze(2,3))
      2 4 0.000000e+00 # aimag(ze(2,4))
      2 5 0.000000e+00 # aimag(ze(2,5))
      2 6 0.000000e+00 # aimag(ze(2,6))
      3 1 0.000000e+00 # aimag(ze(3,1))
      3 2 0.000000e+00 # aimag(ze(3,2))
      3 3 0.000000e+00 # aimag(ze(3,3))
      3 4 0.000000e+00 # aimag(ze(3,4))
      3 5 0.000000e+00 # aimag(ze(3,5))
      3 6 0.000000e+00 # aimag(ze(3,6))
      4 1 0.000000e+00 # aimag(ze(4,1))
      4 2 0.000000e+00 # aimag(ze(4,2))
      4 3 0.000000e+00 # aimag(ze(4,3))
      4 4 0.000000e+00 # aimag(ze(4,4))
      4 5 0.000000e+00 # aimag(ze(4,5))
      4 6 0.000000e+00 # aimag(ze(4,6))
      5 1 0.000000e+00 # aimag(ze(5,1))
      5 2 0.000000e+00 # aimag(ze(5,2))
      5 3 0.000000e+00 # aimag(ze(5,3))
      5 4 0.000000e+00 # aimag(ze(5,4))
      5 5 0.000000e+00 # aimag(ze(5,5))
      5 6 0.000000e+00 # aimag(ze(5,6))
      6 1 0.000000e+00 # aimag(ze(6,1))
      6 2 0.000000e+00 # aimag(ze(6,2))
      6 3 0.000000e+00 # aimag(ze(6,3))
      6 4 0.000000e+00 # aimag(ze(6,4))
      6 5 0.000000e+00 # aimag(ze(6,5))
      6 6 0.000000e+00 # aimag(ze(6,6))
###################################
## INFORMATION FOR SCALARMIX
###################################
BLOCK SCALARMIX Q= 1.000000e+03 #   ()
      1 1 -1.051561e-01 # zh(1,1)
      1 2 -9.944557e-01 # zh(1,2)
      2 1 -9.944557e-01 # zh(2,1)
      2 2 1.051561e-01 # zh(2,2)
###################################
## INFORMATION FOR PSEUDOSCALARMIX
###################################
BLOCK PSEUDOSCALARMIX Q= 1.000000e+03 #   ()
      1 1 9.949138e-02 # za(1,1)
      1 2 -9.950384e-01 # za(1,2)
      2 1 -9.950384e-01 # za(2,1)
      2 2 -9.949138e-02 # za(2,2)
###################################
## INFORMATION FOR CHARGEMIX
###################################
BLOCK CHARGEMIX Q= 1.000000e+03 #   ()
      1 1 9.949251e-02 # zp(1,1)
      1 2 -9.950383e-01 # zp(1,2)
      2 1 -9.950383e-01 # zp(2,1)
      2 2 -9.949251e-02 # zp(2,2)
###################################
## INFORMATION FOR NMIX
###################################
BLOCK NMIX Q= 1.000000e+03 #   ()
      1 1 -2.480395e-04 # real(zn(1,1),dp)
      1 2 9.992526e-01 # real(zn(1,2),dp)
      1 3 -3.805199e-02 # real(zn(1,3),dp)
      1 4 6.802912e-03 # real(zn(1,4),dp)
      2 1 -6.632218e-01 # real(zn(2,1),dp)
      2 2 -2.400118e-02 # real(zn(2,2),dp)
      2 3 -5.319244e-01 # real(zn(2,3),dp)
      2 4 5.259441e-01 # real(zn(2,4),dp)
      3 1 -0.000000e+00 # real(zn(3,1),dp)
      3 2 0.000000e+00 # real(zn(3,2),dp)
      3 3 0.000000e+00 # real(zn(3,3),dp)
      3 4 0.000000e+00 # real(zn(3,4),dp)
      4 1 7.483924e-01 # real(zn(4,1),dp)
      4 2 -2.073933e-02 # real(zn(4,2),dp)
      4 3 -4.650297e-01 # real(zn(4,3),dp)
      4 4 4.724681e-01 # real(zn(4,4),dp)
###################################
## INFORMATION FOR IMNMIX
###################################
BLOCK IMNMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zn(1,1))
      1 2 0.000000e+00 # aimag(zn(1,2))
      1 3 0.000000e+00 # aimag(zn(1,3))
      1 4 0.000000e+00 # aimag(zn(1,4))
      2 1 0.000000e+00 # aimag(zn(2,1))
      2 2 0.000000e+00 # aimag(zn(2,2))
      2 3 0.000000e+00 # aimag(zn(2,3))
      2 4 0.000000e+00 # aimag(zn(2,4))
      3 1 -6.748212e-03 # aimag(zn(3,1))
      3 2 2.209341e-02 # aimag(zn(3,2))
      3 3 7.066512e-01 # aimag(zn(3,3))
      3 4 7.071849e-01 # aimag(zn(3,4))
      4 1 0.000000e+00 # aimag(zn(4,1))
      4 2 0.000000e+00 # aimag(zn(4,2))
      4 3 0.000000e+00 # aimag(zn(4,3))
      4 4 0.000000e+00 # aimag(zn(4,4))
###################################
## INFORMATION FOR UMIX
###################################
BLOCK UMIX Q= 1.000000e+03 #   ()
      1 1 9.985530e-01 # real(um(1,1),dp)
      1 2 -5.377640e-02 # real(um(1,2),dp)
      2 1 5.377640e-02 # real(um(2,1),dp)
      2 2 9.985530e-01 # real(um(2,2),dp)
###################################
## INFORMATION FOR IMUMIX
###################################
BLOCK IMUMIX Q= 1.000000e+03 #   ()
      1 1 -0.000000e+00 # aimag(um(1,1))
      1 2 -0.000000e+00 # aimag(um(1,2))
      2 1 -0.000000e+00 # aimag(um(2,1))
      2 2 -0.000000e+00 # aimag(um(2,2))
###################################
## INFORMATION FOR VMIX
###################################
BLOCK VMIX Q= 1.000000e+03 #   ()
      1 1 9.999537e-01 # real(up(1,1),dp)
      1 2 -9.619083e-03 # real(up(1,2),dp)
      2 1 9.619083e-03 # real(up(2,1),dp)
      2 2 9.999537e-01 # real(up(2,2),dp)
###################################
## INFORMATION FOR IMVMIX
###################################
BLOCK IMVMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(up(1,1))
      1 2 0.000000e+00 # aimag(up(1,2))
      2 1 0.000000e+00 # aimag(up(2,1))
      2 2 0.000000e+00 # aimag(up(2,2))
###################################
## INFORMATION FOR UELMIX
###################################
BLOCK UELMIX Q= 1.000000e+03 #   ()
      1 1 1.000000e+00 # real(zel(1,1),dp)
      1 2 0.000000e+00 # real(zel(1,2),dp)
      1 3 0.000000e+00 # real(zel(1,3),dp)
      2 1 0.000000e+00 # real(zel(2,1),dp)
      2 2 1.000000e+00 # real(zel(2,2),dp)
      2 3 0.000000e+00 # real(zel(2,3),dp)
      3 1 0.000000e+00 # real(zel(3,1),dp)
      3 2 0.000000e+00 # real(zel(3,2),dp)
      3 3 1.000000e+00 # real(zel(3,3),dp)
###################################
## INFORMATION FOR IMUELMIX
###################################
BLOCK IMUELMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zel(1,1))
      1 2 0.000000e+00 # aimag(zel(1,2))
      1 3 0.000000e+00 # aimag(zel(1,3))
      2 1 0.000000e+00 # aimag(zel(2,1))
      2 2 0.000000e+00 # aimag(zel(2,2))
      2 3 0.000000e+00 # aimag(zel(2,3))
      3 1 0.000000e+00 # aimag(zel(3,1))
      3 2 0.000000e+00 # aimag(zel(3,2))
      3 3 0.000000e+00 # aimag(zel(3,3))
###################################
## INFORMATION FOR UERMIX
###################################
BLOCK UERMIX Q= 1.000000e+03 #   ()
      1 1 1.000000e+00 # real(zer(1,1),dp)
      1 2 0.000000e+00 # real(zer(1,2),dp)
      1 3 0.000000e+00 # real(zer(1,3),dp)
      2 1 0.000000e+00 # real(zer(2,1),dp)
      2 2 1.000000e+00 # real(zer(2,2),dp)
      2 3 0.000000e+00 # real(zer(2,3),dp)
      3 1 0.000000e+00 # real(zer(3,1),dp)
      3 2 0.000000e+00 # real(zer(3,2),dp)
      3 3 1.000000e+00 # real(zer(3,3),dp)
###################################
## INFORMATION FOR IMUERMIX
###################################
BLOCK IMUERMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zer(1,1))
      1 2 0.000000e+00 # aimag(zer(1,2))
      1 3 0.000000e+00 # aimag(zer(1,3))
      2 1 0.000000e+00 # aimag(zer(2,1))
      2 2 0.000000e+00 # aimag(zer(2,2))
      2 3 0.000000e+00 # aimag(zer(2,3))
      3 1 0.000000e+00 # aimag(zer(3,1))
      3 2 0.000000e+00 # aimag(zer(3,2))
      3 3 0.000000e+00 # aimag(zer(3,3))
###################################
## INFORMATION FOR UDLMIX
###################################
BLOCK UDLMIX Q= 1.000000e+03 #   ()
      1 1 1.000000e+00 # real(zdl(1,1),dp)
      1 2 1.516960e-06 # real(zdl(1,2),dp)
      1 3 -3.590345e-05 # real(zdl(1,3),dp)
      2 1 -1.508077e-06 # real(zdl(2,1),dp)
      2 2 1.000000e+00 # real(zdl(2,2),dp)
      2 3 2.474108e-04 # real(zdl(2,3),dp)
      3 1 3.590383e-05 # real(zdl(3,1),dp)
      3 2 -2.474108e-04 # real(zdl(3,2),dp)
      3 3 1.000000e+00 # real(zdl(3,3),dp)
###################################
## INFORMATION FOR IMUDLMIX
###################################
BLOCK IMUDLMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zdl(1,1))
      1 2 0.000000e+00 # aimag(zdl(1,2))
      1 3 -0.000000e+00 # aimag(zdl(1,3))
      2 1 0.000000e+00 # aimag(zdl(2,1))
      2 2 0.000000e+00 # aimag(zdl(2,2))
      2 3 0.000000e+00 # aimag(zdl(2,3))
      3 1 0.000000e+00 # aimag(zdl(3,1))
      3 2 -0.000000e+00 # aimag(zdl(3,2))
      3 3 0.000000e+00 # aimag(zdl(3,3))
###################################
## INFORMATION FOR UDRMIX
###################################
BLOCK UDRMIX Q= 1.000000e+03 #   ()
      1 1 1.000000e+00 # real(zdr(1,1),dp)
      1 2 1.625873e-07 # real(zdr(1,2),dp)
      1 3 -7.513376e-08 # real(zdr(1,3),dp)
      2 1 -1.625865e-07 # real(zdr(2,1),dp)
      2 2 1.000000e+00 # real(zdr(2,2),dp)
      2 3 9.599945e-06 # real(zdr(2,3),dp)
      3 1 7.513532e-08 # real(zdr(3,1),dp)
      3 2 -9.599945e-06 # real(zdr(3,2),dp)
      3 3 1.000000e+00 # real(zdr(3,3),dp)
###################################
## INFORMATION FOR IMUDRMIX
###################################
BLOCK IMUDRMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zdr(1,1))
      1 2 0.000000e+00 # aimag(zdr(1,2))
      1 3 0.000000e+00 # aimag(zdr(1,3))
      2 1 -0.000000e+00 # aimag(zdr(2,1))
      2 2 0.000000e+00 # aimag(zdr(2,2))
      2 3 0.000000e+00 # aimag(zdr(2,3))
      3 1 0.000000e+00 # aimag(zdr(3,1))
      3 2 0.000000e+00 # aimag(zdr(3,2))
      3 3 0.000000e+00 # aimag(zdr(3,3))
###################################
## INFORMATION FOR UULMIX
###################################
BLOCK UULMIX Q= 1.000000e+03 #   ()
      1 1 9.738551e-01 # real(zul(1,1),dp)
      1 2 2.271430e-01 # real(zul(1,2),dp)
      1 3 3.508327e-03 # real(zul(1,3),dp)
      2 1 -2.270905e-01 # real(zul(2,1),dp)
      2 2 9.729888e-01 # real(zul(2,2),dp)
      2 3 4.150542e-02 # real(zul(2,3),dp)
      3 1 6.014101e-03 # real(zul(3,1),dp)
      3 2 -4.121697e-02 # real(zul(3,2),dp)
      3 3 9.991321e-01 # real(zul(3,3),dp)
###################################
## INFORMATION FOR IMUULMIX
###################################
BLOCK IMUULMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zul(1,1))
      1 2 0.000000e+00 # aimag(zul(1,2))
      1 3 0.000000e+00 # aimag(zul(1,3))
      2 1 0.000000e+00 # aimag(zul(2,1))
      2 2 0.000000e+00 # aimag(zul(2,2))
      2 3 0.000000e+00 # aimag(zul(2,3))
      3 1 0.000000e+00 # aimag(zul(3,1))
      3 2 -0.000000e+00 # aimag(zul(3,2))
      3 3 0.000000e+00 # aimag(zul(3,3))
###################################
## INFORMATION FOR UURMIX
###################################
BLOCK UURMIX Q= 1.000000e+03 #   ()
      1 1 1.000000e+00 # real(zur(1,1),dp)
      1 2 5.522939e-06 # real(zur(1,2),dp)
      1 3 -9.287840e-10 # real(zur(1,3),dp)
      2 1 -5.522939e-06 # real(zur(2,1),dp)
      2 2 1.000000e+00 # real(zur(2,2),dp)
      2 3 1.188866e-07 # real(zur(2,3),dp)
      3 1 9.294406e-10 # real(zur(3,1),dp)
      3 2 -1.188866e-07 # real(zur(3,2),dp)
      3 3 1.000000e+00 # real(zur(3,3),dp)
###################################
## INFORMATION FOR IMUURMIX
###################################
BLOCK IMUURMIX Q= 1.000000e+03 #   ()
      1 1 0.000000e+00 # aimag(zur(1,1))
      1 2 0.000000e+00 # aimag(zur(1,2))
      1 3 0.000000e+00 # aimag(zur(1,3))
      2 1 -0.000000e+00 # aimag(zur(2,1))
      2 2 0.000000e+00 # aimag(zur(2,2))
      2 3 0.000000e+00 # aimag(zur(2,3))
      3 1 0.000000e+00 # aimag(zur(3,1))
      3 2 0.000000e+00 # aimag(zur(3,2))
      3 3 0.000000e+00 # aimag(zur(3,3))
###################################
## INFORMATION FOR SPHENO
###################################
BLOCK SPHENO #   spheno internal parameters
      1 -1.000000e+00 # errorlevel
      2 0.000000e+00 # spa_conventions
      11 1.000000e+00 # branching ratios
      13 1.000000e+00 # 3 body decays
      31 1.000000e+03 # gut scale
      33 1.000000e+03 # renormalization scale
      34 1.000000e-04 # precision
      35 4.000000e+01 # iterations
      38 2.000000e+00 # rge level
      40 7.297353e-03 # alpha
      41 2.495200e+00 # gamma_z
      42 2.060000e+00 # gamma_w
      50 1.000000e+00 # rotate negative fermion masses
      51 1.000000e+00 # switch to sckm matrix
      52 0.000000e+00 # ignore negative masses
      53 0.000000e+00 # ignore negative masses at mz
      55 1.000000e+00 # calculate one loop masses
      56 1.000000e+00 # calculate two-loop higgs masses
      57 1.000000e+00 # calculate low energy
      60 1.000000e+00 # include kinetic mixing
      65 1.000000e+00 # solution of tadpole equation
      8 3.000000e+00 # two-loop method: diagrammatic
      9 1.000000e+00 # gauge-less limit
      400 1.000000e-01 # step-size for purely-numerical methode for 2-loop calculation
      401 1.000000e-03 # step-size for semi-analytical methode for 2-loop calculation
      410 0.000000e+00 # indicative error in numerical derivation
###################################
## INFORMATION FOR HIGGSLHC7
###################################
BLOCK HIGGSLHC7 #   higgs production cross section at lhc7 [pb] (rescaled sm values from hxswg)
      1 25 1.488193e+01 # gluon fusion
      2 25 1.190042e+00 # vector boson fusion
      3 25 5.141595e-01 # w-h production
      4 25 3.030595e-01 # z-h production
      5 25 8.259911e-02 # t-t-h production
      1 35 1.710050e-02 # gluon fusion
      2 35 2.723927e-04 # vector boson fusion
      1 36 2.224326e-02 # gluon fusion
###################################
## INFORMATION FOR HIGGSLHC8
###################################
BLOCK HIGGSLHC8 #   higgs production cross section at lhc8 [pb] (rescaled sm values from hxswg)
      1 25 1.896122e+01 # gluon fusion
      2 25 1.535547e+00 # vector boson fusion
      3 25 6.628892e-01 # w-h production
      4 25 3.787092e-01 # z-h production
      5 25 1.251357e-01 # t-t-h production
      1 35 2.664293e-02 # gluon fusion
      2 35 4.961285e-04 # vector boson fusion
      1 36 3.465227e-02 # gluon fusion
###################################
## INFORMATION FOR HIGGSLHC13
###################################
BLOCK HIGGSLHC13 #   higgs production cross section at lhc13 [pb] (rescaled sm values from sushi 1.5.0)
      1 25 4.438833e+01 # gluon fusion
      1 35 1.056807e-01 # gluon fusion
      1 36 1.374352e-01 # gluon fusion
###################################
## INFORMATION FOR HIGGSLHC14
###################################
BLOCK HIGGSLHC14 #   higgs production cross section at lhc14 [pb] (rescaled sm values from sushi 1.5.0)
      1 25 5.000290e+01 # gluon fusion
      1 35 1.261818e-01 # gluon fusion
      1 36 1.640990e-01 # gluon fusion
###################################
## INFORMATION FOR HIGGSFCC100
###################################
BLOCK HIGGSFCC100 #   higgs production cross section at fcc-pp [pb] (rescaled sm values from sushi 1.5.0)
      1 25 7.414904e+02 # gluon fusion
      1 35 6.773849e+00 # gluon fusion
      1 36 8.804431e+00 # gluon fusion
###################################
## INFORMATION FOR EFFHIGGSCOUPLINGS
###################################
BLOCK EFFHIGGSCOUPLINGS #   values of loop-induced couplings
      25 22 22 3.555904e-05 # h-photon-photon
      25 21 21 6.440651e-05 # h-gluon-gluon
      25 22 23 0.000000e+00 # h-photon-z (not yet calculated by spheno)
      35 22 22 1.235172e-06 # h-photon-photon
      35 21 21 6.336090e-06 # h-gluon-gluon
      35 22 23 0.000000e+00 # h-photon-z (not yet calculated by spheno)
      36 22 22 1.637004e-06 # a-photon-photon
      36 21 21 8.311041e-06 # a-gluon-gluon
      36 22 23 0.000000e+00 # a-photon-z (not yet calculated by spheno)
###################################
## INFORMATION FOR SPHENOLOWENERGY
###################################
BLOCK SPHENOLOWENERGY #   low energy observables
      1 -1.676037e-03 # t-parameter (1-loop bsm)
      2 -1.138614e-03 # s-parameter (1-loop bsm)
      3 -8.719217e-03 # u-parameter (1-loop bsm)
      20 8.935498e-16 # (g-2)_e
      21 3.820593e-11 # (g-2)_mu
      22 1.111679e-08 # (g-2)_tau
      23 0.000000e+00 # edm(e)
      24 0.000000e+00 # edm(mu)
      25 0.000000e+00 # edm(tau)
      39 -2.420099e-04 # delta(rho)
###################################
## INFORMATION FOR FLAVORKITQFV
###################################
BLOCK FLAVORKITQFV #   quark flavor violating observables
      200 3.783946e-04 # br(b->x_s gamma)
      201 1.201253e+00 # br(b->x_s gamma)/br(b->x_s gamma)_sm
      300 6.452263e-04 # br(d->mu nu)
      301 9.989262e-01 # br(d->mu nu)/br(d->mu nu)_sm
      400 6.105234e-03 # br(ds->mu nu)
      401 9.986343e-01 # br(ds->mu nu)/br(ds->mu nu)_sm
      402 5.966691e-02 # br(ds->tau nu)
      403 9.986343e-01 # br(ds->tau nu)/br(ds->tau nu)_sm
      500 5.502097e-07 # br(b->mu nu)
      501 9.726369e-01 # br(b->mu nu)/br(b->mu nu)_sm
      502 1.224288e-04 # br(b->tau nu)
      503 9.726369e-01 # br(b->tau nu)/br(b->tau nu)_sm
      600 6.928083e-01 # br(k->mu nu)
      601 9.997632e-01 # br(k->mu nu)/br(k->mu nu)_sm
      602 2.476477e-05 # r_k = br(k->e nu)/(k->mu nu)
      603 2.475305e-05 # r_k^sm = br(k->e nu)_sm/(k->mu nu)_sm
      1900 1.791568e+01 # delta(m_bs)
      1901 1.001189e+00 # delta(m_bs)/delta(m_bs)_sm
      1902 4.008978e-01 # delta(m_bd)
      1903 1.002332e+00 # delta(m_bd)/delta(m_bd)_sm
      4000 2.407427e-15 # br(b^0_d->e e)
      4001 9.896316e-01 # br(b^0_d->e e)/br(b^0_d->e e)_sm
      4002 7.473332e-14 # br(b^0_s->e e)
      4003 9.893897e-01 # br(b^0_s->e e)/br(b^0_s->e e)_sm
      4004 1.028426e-10 # br(b^0_d->mu mu)
      4005 9.896314e-01 # br(b^0_d->mu mu)/br(b^0_d->mu mu)_sm
      4006 3.192605e-09 # br(b^0_s->mu mu)
      4007 9.893896e-01 # br(b^0_s->mu mu)/br(b^0_s->mu mu)_sm
      4008 2.152525e-08 # br(b^0_d->tau tau)
      4009 9.895886e-01 # br(b^0_d->tau tau)/br(b^0_d->tau tau)_sm
      4010 6.770632e-07 # br(b^0_s->tau tau)
      4011 9.893480e-01 # br(b^0_s->tau tau)/br(b^0_s->tau tau)_sm
      5000 1.636917e-06 # br(b-> s e e)
      5001 9.889005e-01 # br(b-> s e e)/br(b-> s e e)_sm
      5002 1.589818e-06 # br(b-> s mu mu)
      5003 9.906702e-01 # br(b-> s mu mu)/br(b-> s mu mu)_sm
      6000 1.096061e-07 # br(b -> k mu mu)
      6001 9.874421e-01 # br(b -> k mu mu)/br(b -> k mu mu)_sm
      6002 1.096061e-07 # br(b -> k mu mu)
      6003 9.874421e-01 # br(b -> k mu mu)/br(b -> k mu mu)_sm
      7000 3.824488e-05 # br(b->s nu nu)
      7001 1.001004e+00 # br(b->s nu nu)/br(b->s nu nu)_sm
      7002 1.770838e-06 # br(b->d nu nu)
      7003 1.001002e+00 # br(b->d nu nu)/br(b->d nu nu)_sm
      8000 1.239607e-10 # br(k^+ -> pi^+ nu nu)
      8001 1.000567e+00 # br(k^+ -> pi^+ nu nu)/br(k^+ -> pi^+ nu nu)_sm
      8002 2.828876e-11 # br(k_l -> pi^0 nu nu)
      8003 1.001003e+00 # br(k_l -> pi^0 nu nu)/br(k_l -> pi^0 nu nu)_sm
      8004 0.000000e+00 # br(k^0_l -> e mu)
      8005 0.000000e+00 # br(k^0_l -> e mu)/br(k^0_l -> e mu)_sm
      9100 2.047832e-15 # delta(m_k)
      9102 1.000024e+00 # delta(m_k)/delta(m_k)_sm
      9103 1.935153e-03 # epsilon_k
      9104 1.002610e+00 # epsilon_k/epsilon_k^sm
###################################
## INFORMATION FOR FLAVORKITLFV
###################################
BLOCK FLAVORKITLFV #   lepton flavor violating observables
      701 0.000000e+00 # br(mu->e gamma)
      702 0.000000e+00 # br(tau->e gamma)
      703 0.000000e+00 # br(tau->mu gamma)
      800 0.000000e+00 # cr(mu-e, al)
      801 0.000000e+00 # cr(mu-e, ti)
      802 0.000000e+00 # cr(mu-e, sr)
      803 0.000000e+00 # cr(mu-e, sb)
      804 0.000000e+00 # cr(mu-e, au)
      805 0.000000e+00 # cr(mu-e, pb)
      901 0.000000e+00 # br(mu->3e)
      902 0.000000e+00 # br(tau->3e)
      903 0.000000e+00 # br(tau->3mu)
      904 0.000000e+00 # br(tau- -> e- mu+ mu-)
      905 0.000000e+00 # br(tau- -> mu- e+ e-)
      906 0.000000e+00 # br(tau- -> e+ mu- mu-)
      907 0.000000e+00 # br(tau- -> mu+ e- e-)
      1001 0.000000e+00 # br(z->e mu)
      1002 0.000000e+00 # br(z->e tau)
      1003 0.000000e+00 # br(z->mu tau)
      1101 0.000000e+00 # br(h->e mu)
      1102 0.000000e+00 # br(h->e tau)
      1103 0.000000e+00 # br(h->mu tau)
      2001 0.000000e+00 # br(tau->e pi)
      2002 0.000000e+00 # br(tau->e eta)
      2003 0.000000e+00 # br(tau->e eta')
      2004 0.000000e+00 # br(tau->mu pi)
      2005 0.000000e+00 # br(tau->mu eta)
      2006 0.000000e+00 # br(tau->mu eta')
###################################
## INFORMATION FOR FWCOEF
###################################
BLOCK FWCOEF Q= 1.600000e+02 #   wilson coefficients at scale q
      305 4422 0 0 -1.707580e-09 # coeffc7sm
      305 4422 0 2 -2.264395e-09 # coeffc7
      305 4322 0 2 -4.354580e-11 # coeffc7p
      305 4422 0 1 -5.568158e-10 # coeffc7np
      305 4322 0 1 -4.354580e-11 # coeffc7pnp
      305 6421 0 0 -8.553468e-10 # coeffc8sm
      305 6421 0 2 -1.454295e-09 # coeffc8
      305 6321 0 2 -2.795696e-11 # coeffc8p
      305 6421 0 1 -5.989480e-10 # coeffc8np
      305 6321 0 1 -2.795696e-11 # coeffc8pnp
      3051111 4133 0 0 1.025875e-09 # coeffc9eesm
      3051111 4133 0 2 1.026167e-09 # coeffc9ee
      3051111 4233 0 2 -1.911796e-14 # coeffc9pee
      3051111 4133 0 1 2.916134e-13 # coeffc9eenp
      3051111 4233 0 1 -1.911796e-14 # coeffc9peenp
      3051111 4137 0 0 -3.904948e-09 # coeffc10eesm
      3051111 4137 0 2 -3.907935e-09 # coeffc10ee
      3051111 4237 0 2 -1.928102e-13 # coeffc10pee
      3051111 4137 0 1 -2.987319e-12 # coeffc10eenp
      3051111 4237 0 1 1.928102e-13 # coeffc10peenp
      3051313 4133 0 0 1.025874e-09 # coeffc9mumusm
      3051313 4133 0 2 1.026166e-09 # coeffc9mumu
      3051313 4233 0 2 -1.911754e-14 # coeffc9pmumu
      3051313 4133 0 1 2.917465e-13 # coeffc9mumunp
      3051313 4233 0 1 -1.911754e-14 # coeffc9pmumunp
      3051313 4137 0 0 -3.904948e-09 # coeffc10mumusm
      3051313 4137 0 2 -3.907936e-09 # coeffc10mumu
      3051313 4237 0 2 -1.928106e-13 # coeffc10pmumu
      3051313 4137 0 1 -2.987186e-12 # coeffc10mumunp
      3051313 4237 0 1 -1.928106e-13 # coeffc10pmumunp
      3051212 4141 0 0 -1.206378e-08 # coeffclnu1nu1sm
      3051212 4141 0 2 -1.206977e-08 # coeffclnu1nu1
      3051212 4241 0 2 3.856203e-13 # coeffclpnu1nu1
      3051212 4141 0 1 -5.986306e-12 # coeffclnu1nu1np
      3051212 4241 0 1 3.856203e-13 # coeffclpnu1nu1np
      3051414 4141 0 0 -1.206367e-08 # coeffclnu2nu2sm
      3051414 4141 0 2 -1.206965e-08 # coeffclnu2nu2
      3051414 4241 0 2 3.856195e-13 # coeffclpnu2nu2
      3051414 4141 0 1 -5.986821e-12 # coeffclnu2nu2np
      3051414 4241 0 1 3.856195e-13 # coeffclpnu2nu2np
      3051616 4141 0 0 -1.203912e-08 # coeffclnu3nu3sm
      3051616 4141 0 2 -1.204525e-08 # coeffclnu3nu3
      3051616 4241 0 2 3.853831e-13 # coeffclpnu3nu3
      3051616 4141 0 1 -6.131720e-12 # coeffclnu3nu3np
      3051616 4241 0 1 3.853831e-13 # coeffclpnu3nu3np
      3051212 4142 0 0 0.000000e+00 # coeffcrnu1nu1sm
      3051212 4142 0 2 0.000000e+00 # coeffcrnu1nu1
      3051212 4242 0 2 0.000000e+00 # coeffcrpnu1nu1
      3051212 4142 0 1 0.000000e+00 # coeffcrnu1nu1np
      3051212 4242 0 1 0.000000e+00 # coeffcrpnu1nu1np
      3051414 4142 0 0 0.000000e+00 # coeffcrnu2nu2sm
      3051414 4142 0 2 0.000000e+00 # coeffcrnu2nu2
      3051414 4242 0 2 0.000000e+00 # coeffcrpnu2nu2
      3051414 4142 0 1 0.000000e+00 # coeffcrnu2nu2np
      3051414 4242 0 1 0.000000e+00 # coeffcrpnu2nu2np
      3051616 4142 0 0 0.000000e+00 # coeffcrnu3nu3sm
      3051616 4142 0 2 0.000000e+00 # coeffcrnu3nu3
      3051616 4242 0 2 0.000000e+00 # coeffcrpnu3nu3
      3051616 4142 0 1 0.000000e+00 # coeffcrnu3nu3np
      3051616 4242 0 1 0.000000e+00 # coeffcrpnu3nu3np
      1030103 3131 0 2 -1.540506e-24 # coeffkk_sll
      1030103 3232 0 2 -5.561125e-22 # coeffkk_srr
      1030103 3132 0 2 -2.778327e-20 # coeffkk_slr
      1030103 4141 0 2 9.543331e-14 # coeffkk_vll
      1030103 4242 0 2 1.225392e-28 # coeffkk_vrr
      1030103 4142 0 2 -2.924187e-23 # coeffkk_vlr
      1030103 4343 0 2 -7.101333e-32 # coeffkk_tll
      1030103 4444 0 2 -2.064159e-30 # coeffkk_trr
      1050105 3131 0 2 -7.974353e-22 # coeffbb_sll
      1050105 3232 0 2 -7.774447e-16 # coeffbb_srr
      1050105 3132 0 2 -5.884789e-17 # coeffbb_slr
      1050105 4141 0 2 3.321257e-12 # coeffbb_vll
      1050105 4242 0 2 9.821184e-24 # coeffbb_vrr
      1050105 4142 0 2 -7.865511e-19 # coeffbb_vlr
      1050105 4343 0 2 -4.275801e-29 # coeffbb_tll
      1050105 4444 0 2 -3.188834e-24 # coeffbb_trr
      3050305 3131 0 2 -8.409624e-18 # coeffbsbs_sll
      3050305 3232 0 2 -2.271178e-14 # coeffbsbs_srr
      3050305 3132 0 2 -3.266673e-14 # coeffbsbs_slr
      3050305 4141 0 2 9.703784e-11 # coeffbsbs_vll
      3050305 4242 0 2 1.035807e-19 # coeffbsbs_vrr
      3050305 4142 0 2 -4.369541e-16 # coeffbsbs_vlr
      3050305 4343 0 2 -1.967971e-27 # coeffbsbs_tll
      3050305 4444 0 2 -5.315563e-24 # coeffbsbs_trr
      1030103 3131 0 1 2.876820e-25 # coeffkk_sllnp
      1030103 3232 0 1 1.038512e-22 # coeffkk_srrnp
      1030103 3132 0 1 -1.940046e-20 # coeffkk_slrnp
      1030103 4141 0 1 1.115767e-17 # coeffkk_vllnp
      1030103 4242 0 1 1.108493e-28 # coeffkk_vrrnp
      1030103 4142 0 1 5.493377e-24 # coeffkk_vlrnp
      1030103 4343 0 1 -7.101333e-32 # coeffkk_tllnp
      1030103 4444 0 1 -2.064159e-30 # coeffkk_trrnp
      1050105 3131 0 1 1.640501e-22 # coeffbb_sllnp
      1050105 3232 0 1 1.599374e-16 # coeffbb_srrnp
      1050105 3132 0 1 -5.125983e-17 # coeffbb_slrnp
      1050105 4141 0 1 6.645726e-15 # coeffbb_vllnp
      1050105 4242 0 1 9.541846e-24 # coeffbb_vrrnp
      1050105 4142 0 1 1.628061e-19 # coeffbb_vlrnp
      1050105 4343 0 1 -4.275801e-29 # coeffbb_tllnp
      1050105 4444 0 1 -3.188834e-24 # coeffbb_trrnp
      3050305 3131 0 1 1.729984e-18 # coeffbsbs_sllnp
      3050305 3232 0 1 4.672150e-15 # coeffbsbs_srrnp
      3050305 3132 0 1 -2.845372e-14 # coeffbsbs_slrnp
      3050305 4141 0 1 1.941252e-13 # coeffbsbs_vllnp
      3050305 4242 0 1 1.006330e-19 # coeffbsbs_vrrnp
      3050305 4142 0 1 8.998269e-17 # coeffbsbs_vlrnp
      3050305 4343 0 1 -1.967971e-27 # coeffbsbs_tllnp
      3050305 4444 0 1 -5.315563e-24 # coeffbsbs_trrnp
      1030103 3131 0 0 -1.828188e-24 # coeffkk_sllsm
      1030103 3232 0 0 -6.599637e-22 # coeffkk_srrsm
      1030103 3132 0 0 -8.382813e-21 # coeffkk_slrsm
      1030103 4141 0 0 9.542215e-14 # coeffkk_vllsm
      1030103 4242 0 0 1.168994e-29 # coeffkk_vrrsm
      1030103 4142 0 0 -3.473525e-23 # coeffkk_vlrsm
      1030103 4343 0 0 -3.838888e-47 # coeffkk_tllsm
      1030103 4444 0 0 -1.233738e-44 # coeffkk_trrsm
      1050105 3131 0 0 -9.614854e-22 # coeffbb_sllsm
      1050105 3232 0 0 -9.373820e-16 # coeffbb_srrsm
      1050105 3132 0 0 -7.588062e-18 # coeffbb_slrsm
      1050105 4141 0 0 3.314611e-12 # coeffbb_vllsm
      1050105 4242 0 0 2.793380e-25 # coeffbb_vrrsm
      1050105 4142 0 0 -9.493572e-19 # coeffbb_vlrsm
      1050105 4343 0 0 -3.074574e-55 # coeffbb_tllsm
      1050105 4444 0 0 -6.447928e-50 # coeffbb_trrsm
      3050305 3131 0 0 -1.013961e-17 # coeffbsbs_sllsm
      3050305 3232 0 0 -2.738393e-14 # coeffbsbs_srrsm
      3050305 3132 0 0 -4.213012e-15 # coeffbsbs_slrsm
      3050305 4141 0 0 9.684371e-11 # coeffbsbs_vllsm
      3050305 4242 0 0 2.947641e-21 # coeffbsbs_vrrsm
      3050305 4142 0 0 -5.269368e-16 # coeffbsbs_vlrsm
      3050305 4343 0 0 -1.208676e-50 # coeffbsbs_tllsm
      3050305 4444 0 0 -1.375558e-48 # coeffbsbs_trrsm
###################################
## INFORMATION FOR IMFWCOEF
###################################
BLOCK IMFWCOEF Q= 1.600000e+02 #   im(wilson coefficients) at scale q
      305 4422 0 0 -3.047621e-11 # coeffc7sm
      305 4422 0 2 -4.041469e-11 # coeffc7
      305 4322 0 2 -7.772021e-13 # coeffc7p
      305 4422 0 1 -9.938488e-12 # coeffc7np
      305 4322 0 1 -7.772021e-13 # coeffc7pnp
      305 6421 0 0 -1.526714e-11 # coeffc8sm
      305 6421 0 2 -2.595663e-11 # coeffc8
      305 6321 0 2 -4.989831e-13 # coeffc8p
      305 6421 0 1 -1.068949e-11 # coeffc8np
      305 6321 0 1 -4.989831e-13 # coeffc8pnp
      3051111 4133 0 0 -1.831759e-11 # coeffc9eesm
      3051111 4133 0 2 -1.832289e-11 # coeffc9ee
      3051111 4233 0 2 3.412172e-16 # coeffc9pee
      3051111 4133 0 1 -5.297724e-15 # coeffc9eenp
      3051111 4233 0 1 3.412172e-16 # coeffc9peenp
      3051111 4137 0 0 6.968857e-11 # coeffc10eesm
      3051111 4137 0 2 6.974200e-11 # coeffc10ee
      3051111 4237 0 2 3.441274e-15 # coeffc10pee
      3051111 4137 0 1 5.343309e-14 # coeffc10eenp
      3051111 4237 0 1 -3.441274e-15 # coeffc10peenp
      3051313 4133 0 0 -1.831758e-11 # coeffc9mumusm
      3051313 4133 0 2 -1.832288e-11 # coeffc9mumu
      3051313 4233 0 2 3.412097e-16 # coeffc9pmumu
      3051313 4133 0 1 -5.300101e-15 # coeffc9mumunp
      3051313 4233 0 1 3.412097e-16 # coeffc9pmumunp
      3051313 4137 0 0 6.968858e-11 # coeffc10mumusm
      3051313 4137 0 2 6.974201e-11 # coeffc10mumu
      3051313 4237 0 2 3.441281e-15 # coeffc10pmumu
      3051313 4137 0 1 5.343071e-14 # coeffc10mumunp
      3051313 4237 0 1 3.441281e-15 # coeffc10pmumunp
      3051212 4141 0 0 2.153569e-10 # coeffclnu1nu1sm
      3051212 4141 0 2 2.154637e-10 # coeffclnu1nu1
      3051212 4241 0 2 -6.882547e-15 # coeffclpnu1nu1
      3051212 4141 0 1 1.068540e-13 # coeffclnu1nu1np
      3051212 4241 0 1 -6.882547e-15 # coeffclpnu1nu1np
      3051414 4141 0 0 2.153539e-10 # coeffclnu2nu2sm
      3051414 4141 0 2 2.154608e-10 # coeffclnu2nu2
      3051414 4241 0 2 -6.882532e-15 # coeffclpnu2nu2
      3051414 4141 0 1 1.068632e-13 # coeffclnu2nu2np
      3051414 4241 0 1 -6.882532e-15 # coeffclpnu2nu2np
      3051616 4141 0 0 2.148938e-10 # coeffclnu3nu3sm
      3051616 4141 0 2 2.150033e-10 # coeffclnu3nu3
      3051616 4241 0 2 -6.878310e-15 # coeffclpnu3nu3
      3051616 4141 0 1 1.094495e-13 # coeffclnu3nu3np
      3051616 4241 0 1 -6.878310e-15 # coeffclpnu3nu3np
      3051212 4142 0 0 0.000000e+00 # coeffcrnu1nu1sm
      3051212 4142 0 2 0.000000e+00 # coeffcrnu1nu1
      3051212 4242 0 2 0.000000e+00 # coeffcrpnu1nu1
      3051212 4142 0 1 0.000000e+00 # coeffcrnu1nu1np
      3051212 4242 0 1 0.000000e+00 # coeffcrpnu1nu1np
      3051414 4142 0 0 0.000000e+00 # coeffcrnu2nu2sm
      3051414 4142 0 2 0.000000e+00 # coeffcrnu2nu2
      3051414 4242 0 2 0.000000e+00 # coeffcrpnu2nu2
      3051414 4142 0 1 0.000000e+00 # coeffcrnu2nu2np
      3051414 4242 0 1 0.000000e+00 # coeffcrpnu2nu2np
      3051616 4142 0 0 0.000000e+00 # coeffcrnu3nu3sm
      3051616 4142 0 2 0.000000e+00 # coeffcrnu3nu3
      3051616 4242 0 2 0.000000e+00 # coeffcrpnu3nu3
      3051616 4142 0 1 0.000000e+00 # coeffcrnu3nu3np
      3051616 4242 0 1 0.000000e+00 # coeffcrpnu3nu3np
      1030103 3131 0 2 -1.323141e-24 # coeffkk_sll
      1030103 3232 0 2 -4.776453e-22 # coeffkk_srr
      1030103 3132 0 2 -2.042628e-21 # coeffkk_slr
      1030103 4141 0 2 6.130683e-15 # coeffkk_vll
      1030103 4242 0 2 6.850718e-30 # coeffkk_vrr
      1030103 4142 0 2 -2.513964e-23 # coeffkk_vlr
      1030103 4343 0 2 -5.020553e-32 # coeffkk_tll
      1030103 4444 0 2 1.286936e-30 # coeffkk_trr
      1050105 3131 0 2 -7.208074e-22 # coeffbb_sll
      1050105 3232 0 2 -7.027376e-16 # coeffbb_srr
      1050105 3132 0 2 -5.320426e-17 # coeffbb_slr
      1050105 4141 0 2 3.002940e-12 # coeffbb_vll
      1050105 4242 0 2 8.878950e-24 # coeffbb_vrr
      1050105 4142 0 2 -7.117256e-19 # coeffbb_vlr
      1050105 4343 0 2 -2.888058e-29 # coeffbb_tll
      1050105 4444 0 2 1.929592e-24 # coeffbb_trr
      3050305 3131 0 2 3.002747e-19 # coeffbsbs_sll
      3050305 3232 0 2 8.109488e-16 # coeffbsbs_srr
      3050305 3132 0 2 1.166562e-15 # coeffbsbs_slr
      3050305 4141 0 2 -3.465460e-12 # coeffbsbs_vll
      3050305 4242 0 2 -3.699216e-21 # coeffbsbs_vrr
      3050305 4142 0 2 1.560342e-17 # coeffbsbs_vlr
      3050305 4343 0 2 7.553731e-29 # coeffbsbs_tll
      3050305 4444 0 2 2.092271e-25 # coeffbsbs_trr
      1030103 3131 0 1 2.639213e-25 # coeffkk_sllnp
      1030103 3232 0 1 9.527376e-23 # coeffkk_srrnp
      1030103 3132 0 1 -1.737699e-21 # coeffkk_slrnp
      1030103 4141 0 1 1.052456e-17 # coeffkk_vllnp
      1030103 4242 0 1 6.589359e-30 # coeffkk_vrrnp
      1030103 4142 0 1 5.014272e-24 # coeffkk_vlrnp
      1030103 4343 0 1 -5.020553e-32 # coeffkk_tllnp
      1030103 4444 0 1 1.286936e-30 # coeffkk_trrnp
      1050105 3131 0 1 1.482748e-22 # coeffbb_sllnp
      1050105 3232 0 1 1.445576e-16 # coeffbb_srrnp
      1050105 3132 0 1 -4.634098e-17 # coeffbb_slrnp
      1050105 4141 0 1 6.005492e-15 # coeffbb_vllnp
      1050105 4242 0 1 8.626128e-24 # coeffbb_vrrnp
      1050105 4142 0 1 1.463940e-19 # coeffbb_vlrnp
      1050105 4343 0 1 -2.888058e-29 # coeffbb_tllnp
      1050105 4444 0 1 1.929592e-24 # coeffbb_trrnp
      3050305 3131 0 1 -6.176797e-20 # coeffbsbs_sllnp
      3050305 3232 0 1 -1.668161e-16 # coeffbsbs_srrnp
      3050305 3132 0 1 1.016070e-15 # coeffbsbs_slrnp
      3050305 4141 0 1 -6.930668e-15 # coeffbsbs_vllnp
      3050305 4242 0 1 -3.593880e-21 # coeffbsbs_vrrnp
      3050305 4142 0 1 -3.211270e-18 # coeffbsbs_vlrnp
      3050305 4343 0 1 7.553731e-29 # coeffbsbs_tllnp
      3050305 4444 0 1 2.092271e-25 # coeffbsbs_trrnp
      1030103 3131 0 0 -1.587062e-24 # coeffkk_sllsm
      1030103 3232 0 0 -5.729190e-22 # coeffkk_srrsm
      1030103 3132 0 0 -3.049293e-22 # coeffkk_slrsm
      1030103 4141 0 0 6.120158e-15 # coeffkk_vllsm
      1030103 4242 0 0 2.613596e-31 # coeffkk_vrrsm
      1030103 4142 0 0 -3.015391e-23 # coeffkk_vlrsm
      1030103 4343 0 0 -3.220423e-47 # coeffkk_tllsm
      1030103 4444 0 0 -9.664241e-45 # coeffkk_trrsm
      1050105 3131 0 0 -8.690822e-22 # coeffbb_sllsm
      1050105 3232 0 0 -8.472953e-16 # coeffbb_srrsm
      1050105 3132 0 0 -6.863280e-18 # coeffbb_slrsm
      1050105 4141 0 0 2.996934e-12 # coeffbb_vllsm
      1050105 4242 0 0 2.528214e-25 # coeffbb_vrrsm
      1050105 4142 0 0 -8.581196e-19 # coeffbb_vlrsm
      1050105 4343 0 0 -1.639773e-55 # coeffbb_tllsm
      1050105 4444 0 0 8.597238e-50 # coeffbb_trrsm
      3050305 3131 0 0 3.620427e-19 # coeffbsbs_sllsm
      3050305 3232 0 0 9.777649e-16 # coeffbsbs_srrsm
      3050305 3132 0 0 1.504919e-16 # coeffbsbs_slrsm
      3050305 4141 0 0 -3.458529e-12 # coeffbsbs_vllsm
      3050305 4242 0 0 -1.053361e-22 # coeffbsbs_vrrsm
      3050305 4142 0 0 1.881469e-17 # coeffbsbs_vlrsm
      3050305 4343 0 0 3.778036e-52 # coeffbsbs_tllsm
      3050305 4444 0 0 0.000000e+00 # coeffbsbs_trrsm
###################################
## INFORMATION FOR FINETUNING
###################################
BLOCK FINETUNING # 
      0 0.000000e+00 # overall ft
      1 0.000000e+00 # m0
      2 0.000000e+00 # m12
      3 0.000000e+00 # azero
      4 0.000000e+00 # \[mu]
      5 0.000000e+00 # b[\[mu]]
###################################
## INFORMATION FOR TREELEVELUNITARITY
###################################
BLOCK TREELEVELUNITARITY # 
      0 1.000000e+00 # tree-level unitarity limits fulfilled or not
      1 9.304172e-03 # maximal scattering eigenvalue
###################################
## INFORMATION FOR TREELEVELUNITARITYWTRILINEARS
###################################
BLOCK TREELEVELUNITARITYWTRILINEARS # 
      0 1.000000e+00 # tree-level unitarity limits fulfilled or not
      1 7.668426e-03 # maximal scattering eigenvalue
      2 2.000000e+03 # best scattering energy
      11 1.000000e+03 # min scattering energy
      12 2.000000e+03 # max scattering energy
      13 5.000000e+00 # steps
###################################
## INFORMATION FOR DECAY
###################################
DECAY 1000001 1.148963e+01 # sd_1
      6.319203e-01 2 -1000024 2 # br(sd_1 -> fu_1 cha_1 )
      3.436131e-02 2 -1000024 4 # br(sd_1 -> fu_2 cha_1 )
      3.336942e-01 2 1 1000022 # br(sd_1 -> fd_1 chi_1 )

DECAY 1000003 4.406208e+02 # sd_2
      5.301191e-03 2 1 1000023 # br(sd_2 -> fd_1 chi_2 )
      6.709266e-03 2 1 1000035 # br(sd_2 -> fd_1 chi_4 )
      9.879804e-01 2 1 1000021 # br(sd_2 -> glu fd_1 )

DECAY 1000005 4.406968e+02 # sd_3
      1.084279e-04 2 -1000024 4 # br(sd_3 -> fu_2 cha_1 )
      5.302808e-03 2 3 1000023 # br(sd_3 -> fd_2 chi_2 )
      6.701044e-03 2 3 1000035 # br(sd_3 -> fd_2 chi_4 )
      9.878098e-01 2 3 1000021 # br(sd_3 -> glu fd_2 )

DECAY 2000001 5.604537e+02 # sd_4
      7.445511e-03 2 -1000024 2 # br(sd_4 -> fu_1 cha_1 )
      1.369274e-01 2 -1000024 4 # br(sd_4 -> fu_2 cha_1 )
      3.655090e-04 2 -1000037 4 # br(sd_4 -> fu_2 cha_2 )
      7.217195e-02 2 3 1000022 # br(sd_4 -> fd_2 chi_1 )
      6.778703e-04 2 3 1000023 # br(sd_4 -> fd_2 chi_2 )
      1.738546e-03 2 3 1000035 # br(sd_4 -> fd_2 chi_4 )
      1.225500e-04 2 5 1000022 # br(sd_4 -> fd_3 chi_1 )
      7.754519e-01 2 3 1000021 # br(sd_4 -> glu fd_2 )
      2.204121e-03 2 5 1000021 # br(sd_4 -> glu fd_3 )
      1.478786e-04 3 -37 4 1000023 # br(sd_4 -> hpm_2 chi_2 fu_2 )
      2.458602e-04 3 -37 4 1000025 # br(sd_4 -> hpm_2 chi_3 fu_2 )
      2.522394e-04 3 -1 3 1000001 # br(sd_4 -> sd_1 fd_2 fd_1^* )
      2.398866e-04 3 -2 3 1000002 # br(sd_4 -> su_1 fd_2 fu_1^* )
      9.063878e-04 3 -2 4 1000001 # br(sd_4 -> sd_1 fu_2 fu_1^* )
      1.277767e-04 3 -12 4 2000011 # br(sd_4 -> fu_2 se_4 fv_1^* )
      1.277731e-04 3 -14 4 2000013 # br(sd_4 -> fu_2 se_5 fv_2^* )
      1.267757e-04 3 -16 4 2000015 # br(sd_4 -> fu_2 se_6 fv_3^* )

DECAY 2000003 4.492242e+02 # sd_5
      1.949834e-04 2 -1000024 4 # br(sd_5 -> fu_2 cha_1 )
      2.494741e-04 2 -1000024 6 # br(sd_5 -> fu_3 cha_1 )
      7.248639e-03 2 -1000037 6 # br(sd_5 -> fu_3 cha_2 )
      1.125989e-04 2 3 1000022 # br(sd_5 -> fd_2 chi_1 )
      1.156647e-04 2 5 1000022 # br(sd_5 -> fd_3 chi_1 )
      7.481315e-03 2 5 1000023 # br(sd_5 -> fd_3 chi_2 )
      3.584020e-03 2 5 1000025 # br(sd_5 -> fd_3 chi_3 )
      7.901851e-03 2 5 1000035 # br(sd_5 -> fd_3 chi_4 )
      1.210311e-03 2 3 1000021 # br(sd_5 -> glu fd_2 )
      9.717173e-01 2 5 1000021 # br(sd_5 -> glu fd_3 )

DECAY 2000005 7.046602e+02 # sd_6
      1.168045e-01 2 -1000024 6 # br(sd_6 -> fu_3 cha_1 )
      1.784327e-01 2 -1000037 6 # br(sd_6 -> fu_3 cha_2 )
      5.843151e-02 2 5 1000022 # br(sd_6 -> fd_3 chi_1 )
      1.728510e-03 2 5 1000023 # br(sd_6 -> fd_3 chi_2 )
      2.383302e-03 2 5 1000025 # br(sd_6 -> fd_3 chi_3 )
      2.590038e-03 2 5 1000035 # br(sd_6 -> fd_3 chi_4 )
      1.009135e-03 2 3 1000021 # br(sd_6 -> glu fd_2 )
      6.333994e-01 2 5 1000021 # br(sd_6 -> glu fd_3 )
      8.746048e-04 3 -1000024 6 25 # br(sd_6 -> hh_1 cha_1 fu_3 )
      1.744573e-03 3 -1000037 6 25 # br(sd_6 -> hh_1 cha_2 fu_3 )
      1.321421e-04 3 -37 6 1000023 # br(sd_6 -> hpm_2 chi_2 fu_3 )
      2.184108e-04 3 -37 6 1000025 # br(sd_6 -> hpm_2 chi_3 fu_3 )
      2.074872e-04 3 -1 5 1000001 # br(sd_6 -> sd_1 fd_3 fd_1^* )
      1.973191e-04 3 -2 5 1000002 # br(sd_6 -> su_1 fd_3 fu_1^* )
      7.852125e-04 3 -2 6 1000001 # br(sd_6 -> sd_1 fu_3 fu_1^* )
      1.120780e-04 3 -12 6 2000011 # br(sd_6 -> fu_3 se_4 fv_1^* )
      1.120748e-04 3 -14 6 2000013 # br(sd_6 -> fu_3 se_5 fv_2^* )
      1.112008e-04 3 -16 6 2000015 # br(sd_6 -> fu_3 se_6 fv_3^* )

DECAY 1000002 1.147107e+01 # su_1
      3.158437e-01 2 2 1000022 # br(su_1 -> fu_1 chi_1 )
      1.717432e-02 2 4 1000022 # br(su_1 -> fu_2 chi_1 )
      6.669694e-01 2 1 1000024 # br(su_1 -> cha_1^* fd_1 )

DECAY 1000004 5.614769e+02 # su_2
      3.732050e-03 2 2 1000022 # br(su_2 -> fu_1 chi_1 )
      6.863008e-02 2 4 1000022 # br(su_2 -> fu_2 chi_1 )
      1.406200e-03 2 4 1000023 # br(su_2 -> fu_2 chi_2 )
      9.108659e-04 2 4 1000035 # br(su_2 -> fu_2 chi_4 )
      1.447098e-01 2 3 1000024 # br(su_2 -> cha_1^* fd_2 )
      2.311899e-04 2 5 1000024 # br(su_2 -> cha_1^* fd_3 )
      4.010520e-02 2 2 1000021 # br(su_2 -> glu fu_1 )
      7.375097e-01 2 4 1000021 # br(su_2 -> glu fu_2 )
      1.016996e-03 3 -1 3 1000002 # br(su_2 -> su_1 fd_2 fd_1^* )
      1.359138e-04 3 -15 3 1000012 # br(su_2 -> fd_2 sv_1 fe_3^* )
      1.359092e-04 3 -13 3 1000014 # br(su_2 -> fd_2 sv_2 fe_2^* )
      1.359092e-04 3 -11 3 1000016 # br(su_2 -> fd_2 sv_3 fe_1^* )
      1.237302e-04 3 -37 4 1000037 # br(su_2 -> cha_2^* fu_2 hpm_2 )
      2.401288e-04 3 -1 4 1000001 # br(su_2 -> sd_1 fu_2 fd_1^* )
      2.283686e-04 3 -2 4 1000002 # br(su_2 -> su_1 fu_2 fu_1^* )

DECAY 1000006 1.027065e+04 # su_3
      9.117967e-04 2 2 1000023 # br(su_3 -> fu_1 chi_2 )
      1.154013e-03 2 2 1000035 # br(su_3 -> fu_1 chi_4 )
      4.251079e-02 2 2 1000021 # br(su_3 -> glu fu_1 )
      4.777117e-01 3 -1000024 2 37 # br(su_3 -> hpm_2^* cha_1 fu_1 )
      4.777104e-01 3 -37 2 1000024 # br(su_3 -> cha_1^* fu_1 hpm_2 )

DECAY 2000002 4.582957e+02 # su_4
      2.045076e-02 2 4 1000023 # br(su_4 -> fu_2 chi_2 )
      2.588318e-02 2 4 1000035 # br(su_4 -> fu_2 chi_4 )
      9.536296e-01 2 4 1000021 # br(su_4 -> glu fu_2 )

DECAY 2000004 7.045061e+02 # su_5
      5.857451e-02 2 6 1000022 # br(su_5 -> fu_3 chi_1 )
      5.097457e-02 2 6 1000023 # br(su_5 -> fu_3 chi_2 )
      8.916893e-02 2 6 1000025 # br(su_5 -> fu_3 chi_3 )
      4.014316e-02 2 6 1000035 # br(su_5 -> fu_3 chi_4 )
      1.872058e-04 2 3 1000024 # br(su_5 -> cha_1^* fd_2 )
      1.172073e-01 2 5 1000024 # br(su_5 -> cha_1^* fd_3 )
      4.671166e-03 2 5 1000037 # br(su_5 -> cha_2^* fd_3 )
      6.342165e-01 2 6 1000021 # br(su_5 -> glu fu_3 )
      4.382696e-04 3 6 25 1000022 # br(su_5 -> hh_1 chi_1 fu_3 )
      3.908145e-04 3 6 25 1000023 # br(su_5 -> hh_1 chi_2 fu_3 )
      7.020862e-04 3 6 25 1000025 # br(su_5 -> hh_1 chi_3 fu_3 )
      3.637732e-04 3 6 25 1000035 # br(su_5 -> hh_1 chi_4 fu_3 )
      8.359850e-04 3 -1 5 1000002 # br(su_5 -> su_1 fd_3 fd_1^* )
      1.130682e-04 3 -15 5 1000012 # br(su_5 -> fd_3 sv_1 fe_3^* )
      1.130645e-04 3 -13 5 1000014 # br(su_5 -> fd_3 sv_2 fe_2^* )
      1.130645e-04 3 -11 5 1000016 # br(su_5 -> fd_3 sv_3 fe_1^* )
      1.040865e-04 3 -37 6 1000037 # br(su_5 -> cha_2^* fu_3 hpm_2 )
      2.079118e-04 3 -1 6 1000001 # br(su_5 -> sd_1 fu_3 fd_1^* )
      1.977231e-04 3 -2 6 1000002 # br(su_5 -> su_1 fu_3 fu_1^* )
      5.486657e-04 3 6 25 1000021 # br(su_5 -> hh_1 fu_3 glu )

DECAY 2000006 7.337630e+02 # su_6
      6.083198e-02 2 6 1000023 # br(su_6 -> fu_3 chi_2 )
      8.679244e-02 2 6 1000025 # br(su_6 -> fu_3 chi_3 )
      5.594592e-02 2 6 1000035 # br(su_6 -> fu_3 chi_4 )
      2.914884e-04 2 3 1000037 # br(su_6 -> cha_2^* fd_2 )
      1.733605e-01 2 5 1000037 # br(su_6 -> cha_2^* fd_3 )
      6.201973e-01 2 6 1000021 # br(su_6 -> glu fu_3 )
      4.092532e-04 3 6 25 1000023 # br(su_6 -> hh_1 chi_2 fu_3 )
      6.487853e-04 3 6 25 1000025 # br(su_6 -> hh_1 chi_3 fu_3 )
      4.638483e-04 3 6 25 1000035 # br(su_6 -> hh_1 chi_4 fu_3 )
      1.042314e-04 3 5 37 1000021 # br(su_6 -> hpm_2^* fd_3 glu )
      5.562532e-04 3 6 25 1000021 # br(su_6 -> hh_1 fu_3 glu )

DECAY 1000011 1.697780e-01 # se_1
      6.663784e-01 2 -1000024 16 # br(se_1 -> fv_3 cha_1 )
      3.336216e-01 2 15 1000022 # br(se_1 -> fe_3 chi_1 )

DECAY 1000013 6.116993e-04 # se_2
      6.657357e-01 2 -1000024 14 # br(se_2 -> fv_2 cha_1 )
      3.342643e-01 2 13 1000022 # br(se_2 -> fe_2 chi_1 )

DECAY 1000015 6.178611e-07 # se_3
      1.541731e-02 2 -1000024 12 # br(se_3 -> fv_1 cha_1 )
      9.845827e-01 2 11 1000022 # br(se_3 -> fe_1 chi_1 )

DECAY 2000011 2.442102e+01 # se_4
      6.663777e-01 2 -1000024 12 # br(se_4 -> fv_1 cha_1 )
      3.335726e-01 2 11 1000022 # br(se_4 -> fe_1 chi_1 )

DECAY 2000013 2.442043e+01 # se_5
      6.663772e-01 2 -1000024 14 # br(se_5 -> fv_2 cha_1 )
      3.335724e-01 2 13 1000022 # br(se_5 -> fe_2 chi_1 )

DECAY 2000015 2.425644e+01 # se_6
      6.662038e-01 2 -1000024 16 # br(se_6 -> fv_3 cha_1 )
      3.335087e-01 2 15 1000022 # br(se_6 -> fe_3 chi_1 )
      2.312615e-04 2 23 1000011 # br(se_6 -> se_1 vz )

DECAY 1000012 2.446411e+01 # sv_1
      3.328454e-01 2 16 1000022 # br(sv_1 -> fv_3 chi_1 )
      6.664645e-01 2 15 1000024 # br(sv_1 -> cha_1^* fe_3 )
      6.562945e-04 2 24 1000011 # br(sv_1 -> se_1 vwm^* )

DECAY 1000014 2.444747e+01 # sv_2
      3.330787e-01 2 14 1000022 # br(sv_2 -> fv_2 chi_1 )
      6.668851e-01 2 13 1000024 # br(sv_2 -> cha_1^* fe_2 )

DECAY 1000016 2.444741e+01 # sv_3
      3.330795e-01 2 12 1000022 # br(sv_3 -> fv_1 chi_1 )
      6.668866e-01 2 11 1000024 # br(sv_3 -> cha_1^* fe_1 )

DECAY 25 4.551923e-03 # hh_1
      2.809175e-03 2 22 22 # br(hh_1 -> vp vp )
      7.372729e-02 2 21 21 # br(hh_1 -> vg vg )
      2.512443e-02 2 23 23 # br(hh_1 -> vz vz )
      2.627091e-01 2 -24 24 # br(hh_1 -> vwm^* vwm_virt )
      2.050912e-04 2 -3 3 # br(hh_1 -> fd_2^* fd_2 )
      5.493714e-01 2 -5 5 # br(hh_1 -> fd_3^* fd_3 )
      2.213165e-04 2 -13 13 # br(hh_1 -> fe_2^* fe_2 )
      6.388527e-02 2 -15 15 # br(hh_1 -> fe_3^* fe_3 )
      2.194624e-02 2 -4 4 # br(hh_1 -> fu_2^* fu_2 )

DECAY 35 1.822245e+01 # hh_2
      5.970902e-04 2 -1000024 1000024 # br(hh_2 -> cha_1^* cha_1 )
      2.989432e-04 2 1000022 1000022 # br(hh_2 -> chi_1 chi_1 )
      4.918916e-02 2 -5 5 # br(hh_2 -> fd_3^* fd_3 )
      7.311698e-03 2 -15 15 # br(hh_2 -> fe_3^* fe_3 )
      1.420297e-02 2 -6 6 # br(hh_2 -> fu_3^* fu_3 )
      3.542975e-04 2 25 25 # br(hh_2 -> hh_1 hh_1 )
      4.638236e-01 2 -37 24 # br(hh_2 -> hpm_2 vwm^* )
      4.638236e-01 2 -24 37 # br(hh_2 -> hpm_2^* vwm )
      2.241412e-04 2 -24 24 # br(hh_2 -> vwm vwm^* )
      1.039252e-04 2 23 23 # br(hh_2 -> vz vz )

DECAY 36 1.817182e+01 # ah_2
      8.510126e-04 2 -1000024 1000024 # br(ah_2 -> cha_1^* cha_1 )
      4.257842e-04 2 1000022 1000022 # br(ah_2 -> chi_1 chi_1 )
      4.936767e-02 2 -5 5 # br(ah_2 -> fd_3^* fd_3 )
      7.337637e-03 2 -15 15 # br(ah_2 -> fe_3^* fe_3 )
      1.654438e-02 2 -6 6 # br(ah_2 -> fu_3^* fu_3 )
      1.570922e-04 2 23 25 # br(ah_2 -> hh_1 vz )
      4.626133e-01 2 -37 24 # br(ah_2 -> hpm_2 vwm^* )
      4.626133e-01 2 -24 37 # br(ah_2 -> hpm_2^* vwm )

DECAY 37 7.310668e-01 # hpm_2
      2.993410e-04 2 -3 4 # br(hpm_2^* -> fu_2 fd_2^* )
      1.421139e-03 2 -5 4 # br(hpm_2^* -> fu_2 fd_3^* )
      3.888330e-04 2 -3 6 # br(hpm_2^* -> fu_3 fd_2^* )
      8.631393e-01 2 -5 6 # br(hpm_2^* -> fu_3 fd_3^* )
      4.600914e-04 2 -13 14 # br(hpm_2^* -> fv_2 fe_2^* )
      1.329629e-01 2 -15 16 # br(hpm_2^* -> fv_3 fe_3^* )
      1.291524e-03 2 24 25 # br(hpm_2^* -> hh_1 vwm^* )

DECAY 1000021 1.147248e+02 # glu
      2.498500e-01 2 -1000001 1 # br(glu -> fd_1 sd_1^* )
      2.498500e-01 2 -1 1000001 # br(glu -> fd_1^* sd_1 )
      2.372410e-01 2 -1000002 2 # br(glu -> fu_1 su_1^* )
      2.372410e-01 2 -2 1000002 # br(glu -> fu_1^* su_1 )
      1.290026e-02 2 -1000002 4 # br(glu -> fu_2 su_1^* )
      1.290026e-02 2 -4 1000002 # br(glu -> fu_2^* su_1 )

DECAY 1000022 0.000000e+00 # chi_1
DECAY 1000023 1.324911e+01 # chi_2
      6.997401e-02 2 36 1000022 # br(chi_2 -> chi_1 ah_2 )
      1.569574e-01 2 -1000024 37 # br(chi_2 -> cha_1 hpm_2^* )
      1.569574e-01 2 -37 1000024 # br(chi_2 -> cha_1^* hpm_2 )
      1.666892e-01 2 -1000024 24 # br(chi_2 -> cha_1 vwm^* )
      1.666892e-01 2 -24 1000024 # br(chi_2 -> cha_1^* vwm )
      1.202930e-01 2 25 1000022 # br(chi_2 -> chi_1 hh_1 )
      6.778345e-02 2 35 1000022 # br(chi_2 -> chi_1 hh_2 )
      5.367207e-02 2 23 1000022 # br(chi_2 -> chi_1 vz )
      5.302286e-03 2 -1000001 1 # br(chi_2 -> fd_1 sd_1^* )
      5.302286e-03 2 -1 1000001 # br(chi_2 -> fd_1^* sd_1 )
      1.170929e-03 2 -1000015 11 # br(chi_2 -> fe_1 se_3^* )
      1.170929e-03 2 -11 1000015 # br(chi_2 -> fe_1^* se_3 )
      1.171160e-03 2 -1000013 13 # br(chi_2 -> fe_2 se_2^* )
      1.171160e-03 2 -13 1000013 # br(chi_2 -> fe_2^* se_2 )
      1.236978e-03 2 -1000011 15 # br(chi_2 -> fe_3 se_1^* )
      1.236978e-03 2 -15 1000011 # br(chi_2 -> fe_3^* se_1 )
      1.099663e-02 2 -1000002 2 # br(chi_2 -> fu_1 su_1^* )
      1.099663e-02 2 -2 1000002 # br(chi_2 -> fu_1^* su_1 )
      5.983240e-04 2 -1000002 4 # br(chi_2 -> fu_2 su_1^* )
      5.983240e-04 2 -4 1000002 # br(chi_2 -> fu_2^* su_1 )

DECAY 1000025 2.267052e+01 # chi_3
      6.873240e-02 2 36 1000022 # br(chi_3 -> chi_1 ah_2 )
      1.576775e-01 2 -1000024 37 # br(chi_3 -> cha_1 hpm_2^* )
      1.576775e-01 2 -37 1000024 # br(chi_3 -> cha_1^* hpm_2 )
      1.805434e-01 2 -1000024 24 # br(chi_3 -> cha_1 vwm^* )
      1.805434e-01 2 -24 1000024 # br(chi_3 -> cha_1^* vwm )
      6.051073e-02 2 25 1000022 # br(chi_3 -> chi_1 hh_1 )
      7.231235e-02 2 35 1000022 # br(chi_3 -> chi_1 hh_2 )
      1.211958e-01 2 23 1000022 # br(chi_3 -> chi_1 vz )
      1.748243e-04 2 -1000001 1 # br(chi_3 -> fd_1 sd_1^* )
      1.748243e-04 2 -1 1000001 # br(chi_3 -> fd_1^* sd_1 )
      6.894378e-05 2 -1000011 15 # br(chi_3 -> fe_3 se_1^* )
      6.894378e-05 2 -15 1000011 # br(chi_3 -> fe_3^* se_1 )
      1.321855e-04 2 -1000002 2 # br(chi_3 -> fu_1 su_1^* )
      1.321855e-04 2 -2 1000002 # br(chi_3 -> fu_1^* su_1 )

DECAY 1000035 1.071558e+01 # chi_4
      6.304410e-02 2 36 1000022 # br(chi_4 -> chi_1 ah_2 )
      1.369945e-01 2 -1000024 37 # br(chi_4 -> cha_1 hpm_2^* )
      1.369945e-01 2 -37 1000024 # br(chi_4 -> cha_1^* hpm_2 )
      1.682047e-01 2 -1000024 24 # br(chi_4 -> cha_1 vwm^* )
      1.682047e-01 2 -24 1000024 # br(chi_4 -> cha_1^* vwm )
      1.193139e-01 2 25 1000022 # br(chi_4 -> chi_1 hh_1 )
      5.816313e-02 2 35 1000022 # br(chi_4 -> chi_1 hh_2 )
      5.574538e-02 2 23 1000022 # br(chi_4 -> chi_1 vz )
      1.822183e-02 2 -1000001 1 # br(chi_4 -> fd_1 sd_1^* )
      1.822183e-02 2 -1 1000001 # br(chi_4 -> fd_1^* sd_1 )
      5.870029e-03 2 -1000015 11 # br(chi_4 -> fe_1 se_3^* )
      5.870029e-03 2 -11 1000015 # br(chi_4 -> fe_1^* se_3 )
      9.388901e-05 2 -2000011 11 # br(chi_4 -> fe_1 se_4^* )
      9.388901e-05 2 -11 2000011 # br(chi_4 -> fe_1^* se_4 )
      5.870157e-03 2 -1000013 13 # br(chi_4 -> fe_2 se_2^* )
      5.870157e-03 2 -13 1000013 # br(chi_4 -> fe_2^* se_2 )
      9.393550e-05 2 -2000013 13 # br(chi_4 -> fe_2 se_5^* )
      9.393550e-05 2 -13 2000013 # br(chi_4 -> fe_2^* se_5 )
      5.907622e-03 2 -1000011 15 # br(chi_4 -> fe_3 se_1^* )
      5.907622e-03 2 -15 1000011 # br(chi_4 -> fe_3^* se_1 )
      1.064438e-04 2 -2000015 15 # br(chi_4 -> fe_3 se_6^* )
      1.064438e-04 2 -15 2000015 # br(chi_4 -> fe_3^* se_6 )
      9.586572e-03 2 -1000002 2 # br(chi_4 -> fu_1 su_1^* )
      9.586572e-03 2 -2 1000002 # br(chi_4 -> fu_1^* su_1 )
      5.217863e-04 2 -1000002 4 # br(chi_4 -> fu_2 su_1^* )
      5.217863e-04 2 -4 1000002 # br(chi_4 -> fu_2^* su_1 )
      1.252046e-04 2 -1000016 12 # br(chi_4 -> fv_1 sv_3^* )
      1.252046e-04 2 -12 1000016 # br(chi_4 -> fv_1^* sv_3 )
      1.252054e-04 2 -1000014 14 # br(chi_4 -> fv_2 sv_2^* )
      1.252054e-04 2 -14 1000014 # br(chi_4 -> fv_2^* sv_2 )
      1.254384e-04 2 -1000012 16 # br(chi_4 -> fv_3 sv_1^* )
      1.254384e-04 2 -16 1000012 # br(chi_4 -> fv_3^* sv_1 )

DECAY 1000024 1.000000e-10 # 
      4.000000e-01 2 211 1000022 # 
      3.500000e-02 2 321 1000022 # 
      2.300000e-01 3 111 211 1000022 # 
      1.740000e-01 3 -11 12 1000022 # 
      1.610000e-01 3 -13 14 1000022 # 

DECAY 1000037 2.273305e+01 # cha_2
      1.405444e-01 2 36 1000024 # br(cha_2^* -> cha_1^* ah_2 )
      1.873233e-01 2 25 1000024 # br(cha_2^* -> cha_1^* hh_1 )
      1.402315e-01 2 35 1000024 # br(cha_2^* -> cha_1^* hh_2 )
      1.796231e-01 2 23 1000024 # br(cha_2^* -> cha_1^* vz )
      1.579858e-01 2 37 1000022 # br(cha_2^* -> chi_1 hpm_2^* )
      1.801485e-01 2 24 1000022 # br(cha_2^* -> chi_1 vwm^* )
      1.755740e-03 2 -1000001 2 # br(cha_2^* -> fu_1 sd_1^* )
      1.365443e-04 2 -1000011 16 # br(cha_2^* -> fv_3 se_1^* )
      6.664443e-03 3 -6 6 1000024 # br(cha_2^* -> cha_1^* fu_3 fu_3^* )
      5.313281e-03 3 -5 6 1000022 # br(cha_2^* -> chi_1 fu_3 fd_3^* )

DECAY 2 0.000000e+00 # fu_1
DECAY 4 0.000000e+00 # fu_2
DECAY 6 1.607245e+00 # fu_3
      1.675949e-03 2 3 24 # br(fu_3 -> fd_2 vwm^* )
      9.982886e-01 2 5 24 # br(fu_3 -> fd_3 vwm^* )

DECAY 21 0.000000e+00 # vg
DECAY 22 0.000000e+00 # vp
DECAY 23 2.495200e+00 # vz
DECAY 24 2.141000e+00 # vwm
DECAY 12 0.000000e+00 # fv_1
DECAY 14 0.000000e+00 # fv_2
DECAY 16 0.000000e+00 # fv_3
DECAY 11 0.000000e+00 # fe_1
DECAY 13 0.000000e+00 # fe_2
DECAY 15 0.000000e+00 # fe_3
DECAY 1 0.000000e+00 # fd_1
DECAY 3 0.000000e+00 # fd_2
DECAY 5 0.000000e+00 # fd_3
</slha>
<MGPythiaCard>
<![CDATA[
!
! It is possible to run this card manually with:
!    LD_LIBRARY_PATH=/home/ilara/Programas/MG5_aMC_v3_4_1/HEPTools/lib:$LD_LIBRARY_PATH /home/ilara/Programas/MG5_aMC_v3_4_1/HEPTools/MG5aMC_PY8_interface/MG5aMC_PY8_interface tag_1_pythia8.cmd
!
!
! Pythia8 cmd card automatically generated by MadGraph5_aMC@NLO
! For more information on the use of the MG5aMC / Pythia8 interface, visit
!    https://cp3.irmp.ucl.ac.be/projects/madgraph/wiki/LOPY8Merging
!
! ==================
! General parameters 
! ==================
!
Main:numberOfEvents      = -1
!
! -------------------------------------------------------------------
! Specify the HEPMC output of the Pythia8 shower. You can set it to:
!   hepmc       : MG5aMC will automatically place it the run_<i> directory
!   hepmc.gz    : Same as 'hepmc', but also will compress the output file.
!   hepmcremove : MG5aMC will automatically remove the file at the end of the run.
!                 (usefull when running with Delphes)
!   hepmc@<hepmc_path> :
!                 User defined path where the HEPMC file must written. It will
!                 therefore not be placed in the run_<i> directory. The
!                 specified path, if not absolute, will be relative to
!                 the Event/run_<i> directory of the process output.
!   /dev/null : to turn off the HEPMC output.
!   fifo      : to have MG5aMC setup the piping of the PY8 output to 
!               analysis tools such as MadAnalysis5.  
!   fifo@<fifo_path> :
!               Same as 'fifo', but selecting a custom path to create the
!               fifo pipe. (useful to select a mounted drive that supports 
!               fifo). Note that the fifo file extension *must* be '.hepmc.fifo'.
! -------------------------------------------------------------------
!
HEPMCoutput:file         = tag_1_pythia8_events.hepmc
!
! --------------------------------------------------------------------
! Parameters relevant only when performing MLM merging, which can be
! turned on by setting ickkw to '1' in the run_card and chosing a 
! positive value for the parameter xqcut.
! For details, see section 'Jet Matching' on the left-hand menu of 
!    http://home.thep.lu.se/~torbjorn/pythia81html/Welcome.html
! --------------------------------------------------------------------
! If equal to -1.0, MadGraph5_aMC@NLO will set it automatically based 
! on the parameter 'xqcut' of the run_card.dat 
! The following parameter was forced to be commented out by MG5aMC.
! JetMatching:qCut         = -1.0
! Use default kt-MLM to match parton level jets to those produced by the
! shower. But the other Shower-kt scheme is available too with this option.
! The following parameter was forced to be commented out by MG5aMC.
! JetMatching:doShowerKt   = off
! A value of -1 means that it is automatically guessed by MadGraph.
! It is however always safer to explicitly set it.
! The following parameter was forced to be commented out by MG5aMC.
! JetMatching:nJetMax      = -1
!
! --------------------------------------------------------------------
! Parameters relevant only when performing CKKW-L merging, which can
! be turned on by setting the parameter 'ptlund' *or* 'ktdurham' to
! a positive value. 
! For details, see section 'CKKW-L Merging' on the left-hand menu of 
!    http://home.thep.lu.se/~torbjorn/pythia81html/Welcome.html
! --------------------------------------------------------------------
! Central merging scale values you want to be used.
! If equal to -1.0, then MadGraph5_aMC@NLO will set this automatically
! based on the parameter 'ktdurham' of the run_card.dat
! The following parameter was forced to be commented out by MG5aMC.
! Merging:TMS              = -1.0
! This must be set manually, according to Pythia8 directives.
! An example of possible value is 'pp>LEPTONS,NEUTRINOS'
! Alternatively, from Pythia v8.223 onwards, the value 'guess' can be 
! used to instruct Pythia to guess the hard process. The guess would mean 
! that all particles apart from light partons will be considered as a part 
! of the hard process. This guess is prone to errors if the desired hard 
! process is complicated (i.e. contains light partons). The user should
! then be wary of suspicious error messages in the Pythia log file. 
! The following parameter was forced to be commented out by MG5aMC.
! Merging:Process          = <set_by_user>
! A value of -1 means that it is automatically guessed by MadGraph.
! It is however always safer to explicitly set it.
! The following parameter was forced to be commented out by MG5aMC.
! Merging:nJetMax  		 = -1
!
! For all merging schemes, decide whehter you want the merging scale
! variation computed for only the central weights or all other 
! PDF and scale variation weights as well
SysCalc:fullCutVariation = off
!
! ==========================
! User customized parameters 
! ==========================
!
! By default, Pythia8 generates multi-parton interaction events. This is
! often irrelevant for phenomenology and very slow. You can turn this 
! feature off by uncommenting the line below if so desired.
!partonlevel:mpi = off
!
! Additional technical parameters set by MG5_aMC.
!
! Tell Pythia8 that an LHEF input is used.
Beams:frameType=4
! 1.0 corresponds to HEPMC weight given in [mb]. We choose here the [pb] normalization.
HEPMCoutput:scaling=1.0000000000e+09
! Be more forgiving with momentum mismatches.
Check:epTolErr=1.0000000000e-02
JetMatching:etaJetMax=1.0000000000e+03
! Specify one must read inputs from the MadGraph banner.
JetMatching:setMad=off
! 
!     ====================
!     Subrun definitions
!     ====================
!     
LHEFInputs:nSubruns=1
Main:subrun=0
!
!  Definition of subrun 0
!
Beams:LHEF=unweighted_events.lhe.gz
]]>
</MGPythiaCard>
<MGGenerationInfo>
#  Number of Events        :       10000
#  Integrated weight (pb)  :       0.6649586534040998
</MGGenerationInfo>
</header>
<init>
2212 2212 6.500000e+03 6.500000e+03 0 0 247000 247000 -4 6
1.317508e-01 3.666546e-04 6.649587e-01 1
2.051110e-01 9.881387e-04 6.649587e-01 2
1.860867e-01 7.874026e-04 6.649587e-01 3
1.856658e-02 1.612576e-04 6.649587e-01 4
5.313780e-02 4.207931e-04 6.649587e-01 5
7.030587e-02 5.763166e-04 6.649587e-01 6
<generator name='MadGraph5_aMC@NLO' version='3.4.1'>please cite 1405.0301 </generator>
</init>
</LesHouchesEvents>
