<LesHouchesEvents version="3.0">
<header>
<!--
#*********************************************************************
#                                                                    *
#                        MadGraph5_aMC@NLO                           *
#                                                                    *
#                           Going Beyond                             *
#                                                                    *
#                   http://madgraph.hep.uiuc.edu                     *
#                   http://madgraph.phys.ucl.ac.be                   *
#                   http://amcatnlo.cern.ch                          *
#                                                                    *
#                     The MadGraph5_aMC@NLO team                     *
#                                                                    *
#....................................................................*
#                                                                    *
# This file contains all the information necessary to reproduce      *
# the events generated:                                              *
#                                                                    *
# 1. software version                                                *
# 2. proc_card          : code generation info including model       *
# 3. param_card         : model primary parameters in the LH format  *
# 4. run_card           : running parameters (collider and cuts)     *
# 5. pythia_card        : present only if pythia has been run        *
# 6. pgs_card           : present only if pgs has been run           *
# 7. delphes_cards      : present only if delphes has been run       *
#                                                                    *
#                                                                    *
#*********************************************************************
-->
<MGVersion>
#3.4.1
</MGVersion>
<MG5ProcCard>
<![CDATA[
#************************************************************
#*                     MadGraph5_aMC@NLO                    *
#*                                                          *
#*                *                       *                 *
#*                  *        * *        *                   *
#*                    * * * * 5 * * * *                     *
#*                  *        * *        *                   *
#*                *                       *                 *
#*                                                          *
#*                                                          *
#*         VERSION 3.4.1                 2022-09-01         *
#*                                                          *
#*    The MadGraph5_aMC@NLO Development Team - Find us at   *
#*    https://server06.fynu.ucl.ac.be/projects/madgraph     *
#*                                                          *
#************************************************************
#*                                                          *
#*               Command File for MadGraph5_aMC@NLO         *
#*                                                          *
#*     run as ./bin/mg5_aMC  filename                       *
#*                                                          *
#************************************************************
set group_subprocesses Auto
set ignore_six_quark_processes False
set low_mem_multicore_nlo_generation False
set complex_mass_scheme False
set include_lepton_initiated_processes False
set gauge unitary
set loop_optimized_output True
set loop_color_flows False
set max_npoint_for_channel 0
set default_unset_couplings 99
set max_t_for_channel 99
set zerowidth_tchannel True
set nlo_mixed_expansion True
import model sm
define p = g u c d s u~ c~ d~ s~
define j = g u c d s u~ c~ d~ s~
define l+ = e+ mu+
define l- = e- mu-
define vl = ve vm vt
define vl~ = ve~ vm~ vt~
import model MSSM_SLHA2-full --modelname
define MSSM = go su1 su2 su3 su4 su5 su6 sd1 sd2 sd3 sd4 sd5 sd6 su1~ \
su2~ su3~ su4~ su5~ su6~ sd1~ sd2~ sd3~ sd4~ sd5~ sd6~ h02 sv1 sv2 sv3\
 sl1- sl2- sl3- sl4- sl5- sl6- sv1~ sv2~ sv3~ sl1+ sl2+ sl3+ sl4+ sl5+\
 sl6+ n1 n2 n3 n4 x1+ x2+ x1- x2- h- h+
generate p p > x1+ x1- /mssm
add process p p > x1+ x1- j /mssm
add process p p > x1+ x1- j j /mssm
add process p p > x1+ n1 /mssm
add process p p > x1+ n1 j /mssm
add process p p > x1+ n1 j j /mssm
add process p p > x1- n1 /mssm
add process p p > x1- n1 j /mssm
add process p p > x1- n1 j j /mssm
output ./EW_DM/WINO_full
]]>
</MG5ProcCard>
<MGProcCard>
#*********************************************************************
#                        MadGraph/MadEvent                           *
#                   http://madgraph.hep.uiuc.edu                     *
#                                                                    *
#                          proc_card.dat                             *
#*********************************************************************
#                                                                    *
#            This Files is generated by MADGRAPH 5                   *
#                                                                    *
# WARNING: This Files is generated for MADEVENT (compatibility issue)*
#          This files is NOT a valid MG4 proc_card.dat               *
#          Running this in MG4 will NEVER reproduce the result of MG5*
#                                                                    *
#*********************************************************************
#*********************************************************************
# Process(es) requested : mg2 input                                  *
#*********************************************************************
# Begin PROCESS # This is TAG. Do not modify this line
p p > x1+ x1- /mssm           #Process
# Be carefull the coupling are here in MG5 convention
          
end_coup           # End the couplings input

done               # this tells MG there are no more procs
# End PROCESS  # This is TAG. Do not modify this line
#*********************************************************************
# Model information                                                  *
#*********************************************************************
# Begin MODEL  # This is TAG. Do not modify this line
MSSM_SLHA2-full
# End   MODEL  # This is TAG. Do not modify this line
#*********************************************************************
# Start multiparticle definitions                                    *
#*********************************************************************
# Begin MULTIPARTICLES # This is TAG. Do not modify this line

# End  MULTIPARTICLES # This is TAG. Do not modify this line
</MGProcCard>
<MGRunCard>
<![CDATA[
#*********************************************************************
#                       MadGraph5_aMC@NLO                            *
#                                                                    *
#                     run_card.dat MadEvent                          *
#                                                                    *
#  This file is used to set the parameters of the run.               *
#                                                                    *
#  Some notation/conventions:                                        *
#                                                                    *
#   Lines starting with a '# ' are info or comments                  *
#                                                                    *
#   mind the format:   value    = variable     ! comment             *
#                                                                    *
#   To display more options, you can type the command:               *
#      update full_run_card                                          *
#*********************************************************************
#                                                                    
#*********************************************************************
# Tag name for the run (one word)                                    *
#*********************************************************************
  tag_1	= run_tag ! name of the run 
#*********************************************************************
# Number of events and rnd seed                                      *
# Warning: Do not generate more than 1M events in a single run       *
#*********************************************************************
  10000	= nevents ! Number of unweighted events requested 
 519 = iseed ! rnd seed (0=assigned automatically=default))
#*********************************************************************
# Collider type and energy                                           *
# lpp: 0=No PDF, 1=proton, -1=antiproton, 2=photon from proton,      *
#                3=photon from electron, 4=photon from muon          *
#*********************************************************************
  1	= lpp1 ! beam 1 type 
  1	= lpp2 ! beam 2 type
  6500.0	= ebeam1 ! beam 1 total energy in GeV
  6500.0	= ebeam2 ! beam 2 total energy in GeV
# To see polarised beam options: type "update beam_pol"

#*********************************************************************
# PDF CHOICE: this automatically fixes also alpha_s and its evol.    *
#*********************************************************************
#  nn23lo1	= pdlabel ! PDF set                                     
  lhapdf	= pdlabel 
  246800	= lhaid ! if pdlabel=lhapdf, this is the lhapdf number  
# To see heavy ion options: type "update ion_pdf"
#  246800	NNPDF23_lo_as_0119_qed
#  247000 	NNPDF23_lo_as_0130_qed
#  230000       NNPDF23_nlo_as_0119

#  13200        CT14lo*****************
# Renormalization and factorization scales                           *
#*********************************************************************
  False	= fixed_ren_scale ! if .true. use fixed ren scale
  False	= fixed_fac_scale ! if .true. use fixed fac scale
  91.188	= scale ! fixed ren scale
  91.188	= dsqrt_q2fact1 ! fixed fact scale for pdf1
  91.188	= dsqrt_q2fact2 ! fixed fact scale for pdf2
  -1	= dynamical_scale_choice ! Choose one of the preselected dynamical choices
  1.0	= scalefact ! scale factor for event-by-event scales
#*********************************************************************
# Type and output format
#*********************************************************************
  False	= gridpack !True = setting up the grid pack
  -1.0	= time_of_flight ! threshold (in mm) below which the invariant livetime is not written (-1 means not written)
  average	= event_norm ! average/sum. Normalization of the weight in the LHEF
#*********************************************************************
# Matching parameter (MLM only)
#*********************************************************************
  1	= ickkw ! 0 no matching, 1 MLM
  1.0	= alpsfact ! scale factor for QCD emission vx
  False	= chcluster ! cluster only according to channel diag
  4	= asrwgtflavor ! highest quark flavor for a_s reweight
  True	= auto_ptj_mjj ! Automatic setting of ptj and mjj if xqcut >0
                                   ! (turn off for VBF and single top processes)
  30.0	= xqcut ! minimum kt jet measure between partons

#***********************************************************************
# Turn on either the ktdurham or ptlund cut to activate                *
# CKKW(L) merging with Pythia8 [arXiv:1410.3012, arXiv:1109.4829]      *
#***********************************************************************
  -1.0	= ktdurham 
  0.4	= dparameter 
  -1.0	= ptlund 
  1, 2, 3, 4, 5, 6, 21, 1000001, 1000002, 1000003, 1000004, 1000005, 1000006, 1000021, 2000001, 2000002, 2000003, 2000004, 2000005, 2000006	= pdgs_for_merging_cut ! PDGs for two cuts above

#*********************************************************************
#
#*********************************************************************
# Phase-Space Optimization strategy (basic options)
#*********************************************************************
  0	= nhel ! using helicities importance sampling or not.
                             ! 0: sum over helicity, 1: importance sampling
  1	= sde_strategy ! default integration strategy (hep-ph/2021.xxxxx)
                             ! 1 is old strategy (using amp square)
			     ! 2 is new strategy (using only the denominator)
# To see advanced option for Phase-Space optimization: type "update psoptim"			     
#*********************************************************************
# Generation bias, check the wiki page below for more information:   *
#  'cp3.irmp.ucl.ac.be/projects/madgraph/wiki/LOEventGenerationBias' *
#*********************************************************************
  None	= bias_module ! Bias type of bias, [None, ptj_bias, -custom_folder-]
  {}	= bias_parameters ! Specifies the parameters of the module.
#
#*******************************                                                 
# Parton level cuts definition *
#*******************************                                     
#                                                                    
#
#*********************************************************************
# BW cutoff (M+/-bwcutoff*Gamma) ! Define on/off-shell for "$" and decay  
#*********************************************************************
  15.0	= bwcutoff ! (M+/-bwcutoff*Gamma)
#*********************************************************************
# Standard Cuts                                                      *
#*********************************************************************
# Minimum and maximum pt's (for max, -1 means no cut)                *
#*********************************************************************
  20.0	= ptj ! minimum pt for the jets 
  -1.0	= ptjmax ! maximum pt for the jets
  {}	= pt_min_pdg ! pt cut for other particles (use pdg code). Applied on particle and anti-particle
  {}	= pt_max_pdg ! pt cut for other particles (syntax e.g. {6: 100, 25: 50}) 
#
# For display option for energy cut in the partonic center of mass frame type 'update ecut'
#
#*********************************************************************
# Maximum and minimum absolute rapidity (for max, -1 means no cut)   *
#*********************************************************************
  5.0	= etaj ! max rap for the jets 
  {}	= eta_min_pdg ! rap cut for other particles (use pdg code). Applied on particle and anti-particle
  {}	= eta_max_pdg ! rap cut for other particles (syntax e.g. {6: 2.5, 23: 5})
#*********************************************************************
# Minimum and maximum DeltaR distance                                *
#*********************************************************************
  0.0	= drjj ! min distance between jets 
  -1.0	= drjjmax ! max distance between jets
#*********************************************************************
# Minimum and maximum invariant mass for pairs                       *
#*********************************************************************
  0.0	= mmjj ! min invariant mass of a jet pair 
  -1.0	= mmjjmax ! max invariant mass of a jet pair
  {}	= mxx_min_pdg ! min invariant mass of a pair of particles X/X~ (e.g. {6:250})
  {'default': False}	= mxx_only_part_antipart ! if True the invariant mass is applied only 
                       ! to pairs of particle/antiparticle and not to pairs of the same pdg codes.  
#*********************************************************************
# Inclusive cuts                                                     *
#*********************************************************************
  0.0	= ptheavy ! minimum pt for at least one heavy final state
  0.0	= xptj ! minimum pt for at least one jet  
 #*********************************************************************
 # Control the pt's of the jets sorted by pt                          *
 #*********************************************************************
  200.0	= ptj1min ! minimum pt for the leading jet in pt
  0.0	= ptj2min ! minimum pt for the second jet in pt
  -1.0	= ptj1max ! maximum pt for the leading jet in pt 
  -1.0	= ptj2max ! maximum pt for the second jet in pt
  0	= cutuse ! reject event if fails any (0) / all (1) jet pt cuts
 #*********************************************************************
 # Control the Ht(k)=Sum of k leading jets                            *
 #*********************************************************************
  0.0	= htjmin ! minimum jet HT=Sum(jet pt)
  -1.0	= htjmax ! maximum jet HT=Sum(jet pt)
  0.0	= ihtmin !inclusive Ht for all partons (including b)
  -1.0	= ihtmax !inclusive Ht for all partons (including b)
 #*********************************************************************
 # WBF cuts                                                           *
 #*********************************************************************
  0.0	= xetamin ! minimum rapidity for two jets in the WBF case  
  0.0	= deltaeta ! minimum rapidity for two jets in the WBF case 
#*********************************************************************
# maximal pdg code for quark to be considered as a light jet         *
# (otherwise b cuts are applied)                                     *
#*********************************************************************
  4	= maxjetflavor ! Maximum jet pdg code
#*********************************************************************
#
#*********************************************************************
# Store info for systematics studies                                 *
# WARNING: Do not use for interference type of computation           *
#*********************************************************************
  True	= use_syst ! Enable systematics studies
#
  systematics	= systematics_program ! none, systematics [python], SysCalc [depreceted, C++]
 ['--mur=0.5,1,1.25', '--muf=0.5,1,1.25', '--pdf=errorset', '--alps=0.5,1,1.25'] = systematics_arguments
#  ['--mur=0.5,1,2', '--muf=0.5,1,2', '--pdf=errorset', '--alps=0.5,1,2']	= systematics_arguments ! see: https://cp3.irmp.ucl.ac.be/projects/madgraph/wiki/Systematics#Systematicspythonmodule
# Syscalc is deprecated but to see the associate options type'update syscalc'

#***********************************************************************
# Turn on either the ktdurham or ptlund cut to activate                *
# CKKW(L) merging with Pythia8 [arXiv:1410.3012, arXiv:1109.4829]      *
#***********************************************************************
]]>
</MGRunCard>
<slha>
######################################################################
## PARAM_CARD AUTOMATICALY GENERATED BY MG5                       ####
######################################################################
###################################
## INFORMATION FOR SPINFO
###################################
BLOCK SPINFO #       program information
      1 sphenosarah # spectrum calculator
      2 v4.0.4 # version number of spheno
      9 4.14.3 # version number of sarah
###################################
## INFORMATION FOR MODSEL
###################################
BLOCK MODSEL #       input parameters
      1 0 # susy scale input
      2 1 # boundary conditions
      6 1 # switching on flavour violation
###################################
## INFORMATION FOR MINPAR
###################################
BLOCK MINPAR #       input parameters
      1 0.000000e+00 # m0
      2 0.000000e+00 # m12
      3 1.000000e+01 # tanbeta
      4 0.000000e+00 # signummu
      5 0.000000e+00 # azero
###################################
## INFORMATION FOR FRALPHA
###################################
BLOCK FRALPHA # 
      1 -1.138252e-01 # alp
###################################
## INFORMATION FOR UPMNS
###################################
BLOCK UPMNS # 
      1 1 1.000000e+00 # rmns1x1
      2 2 1.000000e+00 # rmns2x2
      3 3 1.000000e+00 # rmns3x3 i
###################################
## INFORMATION FOR EXTPAR
###################################
BLOCK EXTPAR #       input parameters
      1 1.000000e+04 # m1input
      2 2.000000e+02 # m2input
      3 1.000000e+04 # m3input
      23 1.000000e+04 # muinput
      24 1.665000e+05 # ma2input
      25 1.000000e+01 # tanbeta
###################################
## INFORMATION FOR GAUGEGUT
###################################
BLOCK GAUGEGUT Q= 1.000000e+03 #       (gut scale)
      1 4.639712e-01 # g1(q)
      2 6.324353e-01 # g2(q)
      3 9.976264e-01 # g3(q)
###################################
## INFORMATION FOR SMINPUTS
###################################
BLOCK SMINPUTS #       sm parameters
      1 1.279320e+02 # alpha_em^-1(mz)^msbar
      2 1.166370e-05 # g_mu [gev^-2]
      3 1.190023e-01 # alpha_s(mz)^msbar
      4 9.118870e+01 # m_z(pole)
      5 4.180000e+00 # m_b(m_b), msbar
      6 1.735000e+02 # m_t(pole)
      7 1.776690e+00 # m_tau(pole)
###################################
## INFORMATION FOR VCKMIN
###################################
BLOCK VCKMIN #       ckm matrix, wolfenstein parameterization
      1 2.253500e-01 # lambda
      2 8.110000e-01 # a
      3 1.310000e-01 # rho bar
      4 3.450000e-01 # eta bar
###################################
## INFORMATION FOR VCKM
###################################
BLOCK VCKM Q= 1.000000e+03 #       re(ckm) at the susy scale
      1 1 9.741675e-01 # re(v_11)
      1 2 2.258002e-01 # re(v_12)
      1 3 3.463307e-03 # re(v_13)
      2 1 -2.257487e-01 # re(v_21)
      2 2 9.733132e-01 # re(v_22)
      2 3 4.121870e-02 # re(v_23)
      3 1 5.936310e-03 # re(v_31)
      3 2 -4.093576e-02 # re(v_32)
      3 3 9.991441e-01 # re(v_33)
###################################
## INFORMATION FOR GAUGE
###################################
BLOCK GAUGE Q= 1.000000e+03 #       (susy scale)
      1 3.593905e-01 # g1
      2 6.324353e-01 # g2
      3 9.976264e-01 # g3
###################################
## INFORMATION FOR HMIX
###################################
BLOCK HMIX Q= 1.000000e+03 #       (susy scale)
      1 1.000000e+04 # mu
      2 1.000000e+01 # tb
      4 7.449239e+06 # ma2
      101 1.648515e+04 # bmu
      102 2.454293e+01 # vd
      103 2.454293e+02 # vu
      3 2.466534e+02 # v
      10 1.471128e+00 # betah
      11 -9.998833e-02 # alphah
###################################
## INFORMATION FOR IMHMIX
###################################
BLOCK IMHMIX Q= 1.000000e+03 #       (susy scale)
      1 0.000000e+00 # mu
      101 0.000000e+00 # bmu
###################################
## INFORMATION FOR MSOFT
###################################
BLOCK MSOFT Q= 1.000000e+03 #       (susy scale)
      21 -9.532836e+07 # mhd2
      22 -1.049959e+08 # mhu2
      1 1.000000e+04 # m1
      2 2.000000e+02 # m2
      3 1.000000e+04 # m3
###################################
## INFORMATION FOR IMMSOFT
###################################
BLOCK IMMSOFT Q= 1.000000e+03 #       (susy scale)
      1 0.000000e+00 # m1
      2 0.000000e+00 # m2
      3 0.000000e+00 # m3
###################################
## INFORMATION FOR PHASES
###################################
BLOCK PHASES Q= 1.000000e+03 #       (susy scale)
      1 1.000000e+00 # pg
###################################
## INFORMATION FOR IMPHASES
###################################
BLOCK IMPHASES Q= 1.000000e+03 #       (susy scale)
      1 0.000000e+00 # pg
###################################
## INFORMATION FOR YD
###################################
BLOCK YD Q= 1.000000e+03 #       (susy scale)
      1 1 1.258612e-04 # real(yd(1,1),dp)
      1 2 -1.098308e-21 # real(yd(1,2),dp)
      1 3 -1.230214e-24 # real(yd(1,3),dp)
      2 1 3.919367e-20 # real(yd(2,1),dp)
      2 2 2.391318e-03 # real(yd(2,2),dp)
      2 3 -1.605882e-22 # real(yd(2,3),dp)
      3 1 -1.265144e-21 # real(yd(3,1),dp)
      3 2 4.526848e-21 # real(yd(3,2),dp)
      3 3 1.236446e-01 # real(yd(3,3),dp)
###################################
## INFORMATION FOR IMYD
###################################
BLOCK IMYD Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(yd(1,1))
      1 2 0.000000e+00 # aimag(yd(1,2))
      1 3 0.000000e+00 # aimag(yd(1,3))
      2 1 0.000000e+00 # aimag(yd(2,1))
      2 2 0.000000e+00 # aimag(yd(2,2))
      2 3 0.000000e+00 # aimag(yd(2,3))
      3 1 0.000000e+00 # aimag(yd(3,1))
      3 2 0.000000e+00 # aimag(yd(3,2))
      3 3 0.000000e+00 # aimag(yd(3,3))
###################################
## INFORMATION FOR YE
###################################
BLOCK YE Q= 1.000000e+03 #       (susy scale)
      1 1 2.931516e-05 # real(ye(1,1),dp)
      1 2 0.000000e+00 # real(ye(1,2),dp)
      1 3 0.000000e+00 # real(ye(1,3),dp)
      2 1 0.000000e+00 # real(ye(2,1),dp)
      2 2 6.061444e-03 # real(ye(2,2),dp)
      2 3 0.000000e+00 # real(ye(2,3),dp)
      3 1 0.000000e+00 # real(ye(3,1),dp)
      3 2 0.000000e+00 # real(ye(3,2),dp)
      3 3 1.019138e-01 # real(ye(3,3),dp)
###################################
## INFORMATION FOR IMYE
###################################
BLOCK IMYE Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(ye(1,1))
      1 2 0.000000e+00 # aimag(ye(1,2))
      1 3 0.000000e+00 # aimag(ye(1,3))
      2 1 0.000000e+00 # aimag(ye(2,1))
      2 2 0.000000e+00 # aimag(ye(2,2))
      2 3 0.000000e+00 # aimag(ye(2,3))
      3 1 0.000000e+00 # aimag(ye(3,1))
      3 2 0.000000e+00 # aimag(ye(3,2))
      3 3 0.000000e+00 # aimag(ye(3,3))
###################################
## INFORMATION FOR YU
###################################
BLOCK YU Q= 1.000000e+03 #       (susy scale)
      1 1 6.746788e-06 # real(yu(1,1),dp)
      1 2 -3.580372e-20 # real(yu(1,2),dp)
      1 3 1.476346e-23 # real(yu(1,3),dp)
      2 1 1.739422e-17 # real(yu(2,1),dp)
      2 2 3.375226e-03 # real(yu(2,2),dp)
      2 3 7.899286e-19 # real(yu(2,3),dp)
      3 1 6.034417e-19 # real(yu(3,1),dp)
      3 2 8.203037e-18 # real(yu(3,2),dp)
      3 3 8.088503e-01 # real(yu(3,3),dp)
###################################
## INFORMATION FOR IMYU
###################################
BLOCK IMYU Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(yu(1,1))
      1 2 0.000000e+00 # aimag(yu(1,2))
      1 3 0.000000e+00 # aimag(yu(1,3))
      2 1 0.000000e+00 # aimag(yu(2,1))
      2 2 0.000000e+00 # aimag(yu(2,2))
      2 3 0.000000e+00 # aimag(yu(2,3))
      3 1 0.000000e+00 # aimag(yu(3,1))
      3 2 0.000000e+00 # aimag(yu(3,2))
      3 3 0.000000e+00 # aimag(yu(3,3))
###################################
## INFORMATION FOR TD
###################################
BLOCK TD Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # real(td(1,1),dp)
      1 2 0.000000e+00 # real(td(1,2),dp)
      1 3 0.000000e+00 # real(td(1,3),dp)
      2 1 0.000000e+00 # real(td(2,1),dp)
      2 2 0.000000e+00 # real(td(2,2),dp)
      2 3 0.000000e+00 # real(td(2,3),dp)
      3 1 0.000000e+00 # real(td(3,1),dp)
      3 2 0.000000e+00 # real(td(3,2),dp)
      3 3 0.000000e+00 # real(td(3,3),dp)
###################################
## INFORMATION FOR IMTD
###################################
BLOCK IMTD Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(td(1,1))
      1 2 0.000000e+00 # aimag(td(1,2))
      1 3 0.000000e+00 # aimag(td(1,3))
      2 1 0.000000e+00 # aimag(td(2,1))
      2 2 0.000000e+00 # aimag(td(2,2))
      2 3 0.000000e+00 # aimag(td(2,3))
      3 1 0.000000e+00 # aimag(td(3,1))
      3 2 0.000000e+00 # aimag(td(3,2))
      3 3 0.000000e+00 # aimag(td(3,3))
###################################
## INFORMATION FOR TDIN
###################################
BLOCK TDIN Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # real(td(1,1),dp)
      1 2 0.000000e+00 # real(td(1,2),dp)
      1 3 0.000000e+00 # real(td(1,3),dp)
      2 1 0.000000e+00 # real(td(2,1),dp)
      2 2 0.000000e+00 # real(td(2,2),dp)
      2 3 0.000000e+00 # real(td(2,3),dp)
      3 1 0.000000e+00 # real(td(3,1),dp)
      3 2 0.000000e+00 # real(td(3,2),dp)
      3 3 0.000000e+00 # real(td(3,3),dp)
###################################
## INFORMATION FOR TE
###################################
BLOCK TE Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # real(te(1,1),dp)
      1 2 0.000000e+00 # real(te(1,2),dp)
      1 3 0.000000e+00 # real(te(1,3),dp)
      2 1 0.000000e+00 # real(te(2,1),dp)
      2 2 0.000000e+00 # real(te(2,2),dp)
      2 3 0.000000e+00 # real(te(2,3),dp)
      3 1 0.000000e+00 # real(te(3,1),dp)
      3 2 0.000000e+00 # real(te(3,2),dp)
      3 3 0.000000e+00 # real(te(3,3),dp)
###################################
## INFORMATION FOR IMTE
###################################
BLOCK IMTE Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(te(1,1))
      1 2 0.000000e+00 # aimag(te(1,2))
      1 3 0.000000e+00 # aimag(te(1,3))
      2 1 0.000000e+00 # aimag(te(2,1))
      2 2 0.000000e+00 # aimag(te(2,2))
      2 3 0.000000e+00 # aimag(te(2,3))
      3 1 0.000000e+00 # aimag(te(3,1))
      3 2 0.000000e+00 # aimag(te(3,2))
      3 3 0.000000e+00 # aimag(te(3,3))
###################################
## INFORMATION FOR TU
###################################
BLOCK TU Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # real(tu(1,1),dp)
      1 2 0.000000e+00 # real(tu(1,2),dp)
      1 3 0.000000e+00 # real(tu(1,3),dp)
      2 1 0.000000e+00 # real(tu(2,1),dp)
      2 2 0.000000e+00 # real(tu(2,2),dp)
      2 3 0.000000e+00 # real(tu(2,3),dp)
      3 1 0.000000e+00 # real(tu(3,1),dp)
      3 2 0.000000e+00 # real(tu(3,2),dp)
      3 3 0.000000e+00 # real(tu(3,3),dp)
###################################
## INFORMATION FOR IMTU
###################################
BLOCK IMTU Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(tu(1,1))
      1 2 0.000000e+00 # aimag(tu(1,2))
      1 3 0.000000e+00 # aimag(tu(1,3))
      2 1 0.000000e+00 # aimag(tu(2,1))
      2 2 0.000000e+00 # aimag(tu(2,2))
      2 3 0.000000e+00 # aimag(tu(2,3))
      3 1 0.000000e+00 # aimag(tu(3,1))
      3 2 0.000000e+00 # aimag(tu(3,2))
      3 3 0.000000e+00 # aimag(tu(3,3))
###################################
## INFORMATION FOR TUIN
###################################
BLOCK TUIN Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # real(tu(1,1),dp)
      1 2 0.000000e+00 # real(tu(1,2),dp)
      1 3 0.000000e+00 # real(tu(1,3),dp)
      2 1 0.000000e+00 # real(tu(2,1),dp)
      2 2 0.000000e+00 # real(tu(2,2),dp)
      2 3 0.000000e+00 # real(tu(2,3),dp)
      3 1 0.000000e+00 # real(tu(3,1),dp)
      3 2 0.000000e+00 # real(tu(3,2),dp)
      3 3 0.000000e+00 # real(tu(3,3),dp)
###################################
## INFORMATION FOR MSQ2
###################################
BLOCK MSQ2 Q= 1.000000e+03 #       (susy scale)
      1 1 1.000000e+08 # real(mq2(1,1),dp)
      1 2 1.880692e-09 # real(mq2(1,2),dp)
      1 3 -4.701003e-13 # real(mq2(1,3),dp)
      2 1 1.880692e-09 # real(mq2(2,1),dp)
      2 2 1.000000e+08 # real(mq2(2,2),dp)
      2 3 1.285106e-11 # real(mq2(2,3),dp)
      3 1 -8.072238e-13 # real(mq2(3,1),dp)
      3 2 7.002584e-12 # real(mq2(3,2),dp)
      3 3 1.000000e+08 # real(mq2(3,3),dp)
###################################
## INFORMATION FOR MSQ2IN
###################################
BLOCK MSQ2IN Q= 1.000000e+03 #       (susy scale)
      1 1 1.000000e+08 # real(mq2(1,1),dp)
      1 2 1.880692e-09 # real(mq2(1,2),dp)
      1 3 -4.701003e-13 # real(mq2(1,3),dp)
      2 1 1.880692e-09 # real(mq2(2,1),dp)
      2 2 1.000000e+08 # real(mq2(2,2),dp)
      2 3 1.285106e-11 # real(mq2(2,3),dp)
      3 1 -8.072238e-13 # real(mq2(3,1),dp)
      3 2 7.002584e-12 # real(mq2(3,2),dp)
      3 3 1.000000e+08 # real(mq2(3,3),dp)
###################################
## INFORMATION FOR IMMSQ2
###################################
BLOCK IMMSQ2 Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(mq2(1,1))
      1 2 0.000000e+00 # aimag(mq2(1,2))
      1 3 0.000000e+00 # aimag(mq2(1,3))
      2 1 0.000000e+00 # aimag(mq2(2,1))
      2 2 0.000000e+00 # aimag(mq2(2,2))
      2 3 0.000000e+00 # aimag(mq2(2,3))
      3 1 0.000000e+00 # aimag(mq2(3,1))
      3 2 0.000000e+00 # aimag(mq2(3,2))
      3 3 0.000000e+00 # aimag(mq2(3,3))
###################################
## INFORMATION FOR MSL2
###################################
BLOCK MSL2 Q= 1.000000e+03 #       (susy scale)
      1 1 1.000000e+08 # real(ml2(1,1),dp)
      1 2 0.000000e+00 # real(ml2(1,2),dp)
      1 3 0.000000e+00 # real(ml2(1,3),dp)
      2 1 0.000000e+00 # real(ml2(2,1),dp)
      2 2 1.000000e+08 # real(ml2(2,2),dp)
      2 3 0.000000e+00 # real(ml2(2,3),dp)
      3 1 0.000000e+00 # real(ml2(3,1),dp)
      3 2 0.000000e+00 # real(ml2(3,2),dp)
      3 3 1.000000e+08 # real(ml2(3,3),dp)
###################################
## INFORMATION FOR IMMSL2
###################################
BLOCK IMMSL2 Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(ml2(1,1))
      1 2 0.000000e+00 # aimag(ml2(1,2))
      1 3 0.000000e+00 # aimag(ml2(1,3))
      2 1 0.000000e+00 # aimag(ml2(2,1))
      2 2 0.000000e+00 # aimag(ml2(2,2))
      2 3 0.000000e+00 # aimag(ml2(2,3))
      3 1 0.000000e+00 # aimag(ml2(3,1))
      3 2 0.000000e+00 # aimag(ml2(3,2))
      3 3 0.000000e+00 # aimag(ml2(3,3))
###################################
## INFORMATION FOR MSD2
###################################
BLOCK MSD2 Q= 1.000000e+03 #       (susy scale)
      1 1 1.000000e+08 # real(md2(1,1),dp)
      1 2 -3.344556e-10 # real(md2(1,2),dp)
      1 3 3.552714e-15 # real(md2(1,3),dp)
      2 1 -3.344556e-10 # real(md2(2,1),dp)
      2 2 1.000000e+08 # real(md2(2,2),dp)
      2 3 -6.821210e-13 # real(md2(2,3),dp)
      3 1 1.776357e-15 # real(md2(3,1),dp)
      3 2 -9.094947e-13 # real(md2(3,2),dp)
      3 3 1.000000e+08 # real(md2(3,3),dp)
###################################
## INFORMATION FOR MSD2IN
###################################
BLOCK MSD2IN Q= 1.000000e+03 #       (susy scale)
      1 1 1.000000e+08 # real(md2(1,1),dp)
      1 2 -3.344556e-10 # real(md2(1,2),dp)
      1 3 3.552714e-15 # real(md2(1,3),dp)
      2 1 -3.344556e-10 # real(md2(2,1),dp)
      2 2 1.000000e+08 # real(md2(2,2),dp)
      2 3 -6.821210e-13 # real(md2(2,3),dp)
      3 1 1.776357e-15 # real(md2(3,1),dp)
      3 2 -9.094947e-13 # real(md2(3,2),dp)
      3 3 1.000000e+08 # real(md2(3,3),dp)
###################################
## INFORMATION FOR IMMSD2
###################################
BLOCK IMMSD2 Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(md2(1,1))
      1 2 0.000000e+00 # aimag(md2(1,2))
      1 3 0.000000e+00 # aimag(md2(1,3))
      2 1 0.000000e+00 # aimag(md2(2,1))
      2 2 0.000000e+00 # aimag(md2(2,2))
      2 3 0.000000e+00 # aimag(md2(2,3))
      3 1 0.000000e+00 # aimag(md2(3,1))
      3 2 0.000000e+00 # aimag(md2(3,2))
      3 3 0.000000e+00 # aimag(md2(3,3))
###################################
## INFORMATION FOR MSU2
###################################
BLOCK MSU2 Q= 1.000000e+03 #       (susy scale)
      1 1 1.000000e+08 # real(mu2(1,1),dp)
      1 2 -2.549465e-12 # real(mu2(1,2),dp)
      1 3 -2.710505e-20 # real(mu2(1,3),dp)
      2 1 -2.549465e-12 # real(mu2(2,1),dp)
      2 2 1.000000e+08 # real(mu2(2,2),dp)
      2 3 -1.110223e-16 # real(mu2(2,3),dp)
      3 1 -2.710505e-20 # real(mu2(3,1),dp)
      3 2 -1.665335e-16 # real(mu2(3,2),dp)
      3 3 1.000000e+08 # real(mu2(3,3),dp)
###################################
## INFORMATION FOR MSU2IN
###################################
BLOCK MSU2IN Q= 1.000000e+03 #       (susy scale)
      1 1 1.000000e+08 # real(mu2(1,1),dp)
      1 2 -2.549465e-12 # real(mu2(1,2),dp)
      1 3 -2.710505e-20 # real(mu2(1,3),dp)
      2 1 -2.549465e-12 # real(mu2(2,1),dp)
      2 2 1.000000e+08 # real(mu2(2,2),dp)
      2 3 -1.110223e-16 # real(mu2(2,3),dp)
      3 1 -2.710505e-20 # real(mu2(3,1),dp)
      3 2 -1.665335e-16 # real(mu2(3,2),dp)
      3 3 1.000000e+08 # real(mu2(3,3),dp)
###################################
## INFORMATION FOR IMMSU2
###################################
BLOCK IMMSU2 Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(mu2(1,1))
      1 2 0.000000e+00 # aimag(mu2(1,2))
      1 3 0.000000e+00 # aimag(mu2(1,3))
      2 1 0.000000e+00 # aimag(mu2(2,1))
      2 2 0.000000e+00 # aimag(mu2(2,2))
      2 3 0.000000e+00 # aimag(mu2(2,3))
      3 1 0.000000e+00 # aimag(mu2(3,1))
      3 2 0.000000e+00 # aimag(mu2(3,2))
      3 3 0.000000e+00 # aimag(mu2(3,3))
###################################
## INFORMATION FOR MSE2
###################################
BLOCK MSE2 Q= 1.000000e+03 #       (susy scale)
      1 1 1.000000e+08 # real(me2(1,1),dp)
      1 2 0.000000e+00 # real(me2(1,2),dp)
      1 3 0.000000e+00 # real(me2(1,3),dp)
      2 1 0.000000e+00 # real(me2(2,1),dp)
      2 2 1.000000e+08 # real(me2(2,2),dp)
      2 3 0.000000e+00 # real(me2(2,3),dp)
      3 1 0.000000e+00 # real(me2(3,1),dp)
      3 2 0.000000e+00 # real(me2(3,2),dp)
      3 3 1.000000e+08 # real(me2(3,3),dp)
###################################
## INFORMATION FOR IMMSE2
###################################
BLOCK IMMSE2 Q= 1.000000e+03 #       (susy scale)
      1 1 0.000000e+00 # aimag(me2(1,1))
      1 2 0.000000e+00 # aimag(me2(1,2))
      1 3 0.000000e+00 # aimag(me2(1,3))
      2 1 0.000000e+00 # aimag(me2(2,1))
      2 2 0.000000e+00 # aimag(me2(2,2))
      2 3 0.000000e+00 # aimag(me2(2,3))
      3 1 0.000000e+00 # aimag(me2(3,1))
      3 2 0.000000e+00 # aimag(me2(3,2))
      3 3 0.000000e+00 # aimag(me2(3,3))
###################################
## INFORMATION FOR MASS
###################################
BLOCK MASS #       mass spectrum
      1000001 9.502491e+03 # sd_1
      1000003 9.502493e+03 # sd_2
      1000005 9.503908e+03 # sd_3
      2000001 9.516123e+03 # sd_4
      2000003 9.516143e+03 # sd_5
      2000005 9.581168e+03 # sd_6
      1000002 9.484897e+03 # su_1
      1000004 9.484899e+03 # su_2
      1000006 9.515832e+03 # su_3
      2000002 9.515836e+03 # su_4
      2000004 9.580504e+03 # su_5
      2000006 9.609056e+03 # su_6
      1000011 9.956654e+03 # se_1
      1000013 9.956655e+03 # se_2
      1000015 9.956922e+03 # se_3
      2000011 1.000798e+04 # se_4
      2000013 1.000799e+04 # se_5
      2000015 1.001035e+04 # se_6
      1000012 1.000726e+04 # sv_1
      1000014 1.000726e+04 # sv_2
      1000016 1.000816e+04 # sv_3
      25 1.247308e+02 # hh_1
      35 2.729397e+03 # hh_2
      36 2.729329e+03 # ah_2
      37 2.147997e+03 # hpm_2
      22 0.000000e+00 # vp
      23 9.118870e+01 # vz
      21 0.000000e+00 # vg
      24 7.932874e+01 # vwm
      1 0.000000e+00 # fd_1
      3 0.000000e+00 # fd_2
      5 4.180000e+00 # fd_3
      2 0.000000e+00 # fu_1
      4 0.000000e+00 # fu_2
      6 1.735000e+02 # fu_3
      11 0.000000e+00 # fe_1
      13 0.000000e+00 # fe_2
      15 1.776690e+00 # fe_3
      12 0.000000e+00 # fv_1
      14 0.000000e+00 # fv_2
      16 0.000000e+00 # fv_3
      1000021 9.630749e+03 # glu
      1000022 1.300000e+02 # chi_1
      1000023 1.009536e+04 # chi_2
      1000025 1.010076e+04 # chi_3
      1000035 1.030681e+04 # chi_4
      1000024 1.310000e+02 # cha_1
      1000037 1.010101e+04 # cha_2
###################################
## INFORMATION FOR LSP
###################################
BLOCK LSP #       lsp and nlsp
      1 1.000022e+06 # lsp
      2 1.000024e+06 # nlsp
###################################
## INFORMATION FOR DSQMIX
###################################
BLOCK DSQMIX Q= 1.000000e+03 #       ()
      1 1 -8.655704e-06 # real(zd(1,1),dp)
      1 2 1.460894e-02 # real(zd(1,2),dp)
      1 3 9.328204e-04 # real(zd(1,3),dp)
      1 4 -4.940336e-05 # real(zd(1,4),dp)
      1 5 9.998872e-01 # real(zd(1,5),dp)
      1 6 3.361722e-03 # real(zd(1,6),dp)
      2 1 -7.660354e-04 # real(zd(2,1),dp)
      2 2 -2.687739e-07 # real(zd(2,2),dp)
      2 3 7.079962e-06 # real(zd(2,3),dp)
      2 4 -9.999997e-01 # real(zd(2,4),dp)
      2 5 -4.950407e-05 # real(zd(2,5),dp)
      2 6 2.553140e-05 # real(zd(2,6),dp)
      3 1 -4.042152e-03 # real(zd(3,1),dp)
      3 2 2.781165e-02 # real(zd(3,2),dp)
      3 3 1.357343e-01 # real(zd(3,3),dp)
      3 4 2.952592e-05 # real(zd(3,4),dp)
      3 5 -3.862629e-03 # real(zd(3,5),dp)
      3 6 9.903391e-01 # real(zd(3,6),dp)
      4 1 9.922169e-01 # real(zd(4,1),dp)
      4 2 1.245022e-01 # real(zd(4,2),dp)
      4 3 -6.779043e-04 # real(zd(4,3),dp)
      4 4 -7.600058e-04 # real(zd(4,4),dp)
      4 5 -1.812016e-03 # real(zd(4,5),dp)
      4 6 6.392940e-04 # real(zd(4,6),dp)
      5 1 1.243242e-01 # real(zd(5,1),dp)
      5 2 -9.909517e-01 # real(zd(5,2),dp)
      5 3 -3.530558e-02 # real(zd(5,3),dp)
      5 4 -9.508481e-05 # real(zd(5,4),dp)
      5 5 1.440067e-02 # real(zd(5,5),dp)
      5 6 3.323139e-02 # real(zd(5,6),dp)
      6 1 -5.666650e-03 # real(zd(6,1),dp)
      6 2 3.907660e-02 # real(zd(6,2),dp)
      6 3 -9.901153e-01 # real(zd(6,3),dp)
      6 4 7.613965e-07 # real(zd(6,4),dp)
      6 5 -9.975803e-05 # real(zd(6,5),dp)
      6 6 1.345827e-01 # real(zd(6,6),dp)
###################################
## INFORMATION FOR IMDSQMIX
###################################
BLOCK IMDSQMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(zd(1,1))
      1 2 0.000000e+00 # aimag(zd(1,2))
      1 3 0.000000e+00 # aimag(zd(1,3))
      1 4 0.000000e+00 # aimag(zd(1,4))
      1 5 0.000000e+00 # aimag(zd(1,5))
      1 6 0.000000e+00 # aimag(zd(1,6))
      2 1 0.000000e+00 # aimag(zd(2,1))
      2 2 0.000000e+00 # aimag(zd(2,2))
      2 3 0.000000e+00 # aimag(zd(2,3))
      2 4 0.000000e+00 # aimag(zd(2,4))
      2 5 0.000000e+00 # aimag(zd(2,5))
      2 6 0.000000e+00 # aimag(zd(2,6))
      3 1 0.000000e+00 # aimag(zd(3,1))
      3 2 0.000000e+00 # aimag(zd(3,2))
      3 3 0.000000e+00 # aimag(zd(3,3))
      3 4 0.000000e+00 # aimag(zd(3,4))
      3 5 0.000000e+00 # aimag(zd(3,5))
      3 6 0.000000e+00 # aimag(zd(3,6))
      4 1 0.000000e+00 # aimag(zd(4,1))
      4 2 0.000000e+00 # aimag(zd(4,2))
      4 3 0.000000e+00 # aimag(zd(4,3))
      4 4 0.000000e+00 # aimag(zd(4,4))
      4 5 0.000000e+00 # aimag(zd(4,5))
      4 6 0.000000e+00 # aimag(zd(4,6))
      5 1 0.000000e+00 # aimag(zd(5,1))
      5 2 0.000000e+00 # aimag(zd(5,2))
      5 3 0.000000e+00 # aimag(zd(5,3))
      5 4 0.000000e+00 # aimag(zd(5,4))
      5 5 0.000000e+00 # aimag(zd(5,5))
      5 6 0.000000e+00 # aimag(zd(5,6))
      6 1 0.000000e+00 # aimag(zd(6,1))
      6 2 0.000000e+00 # aimag(zd(6,2))
      6 3 0.000000e+00 # aimag(zd(6,3))
      6 4 0.000000e+00 # aimag(zd(6,4))
      6 5 0.000000e+00 # aimag(zd(6,5))
      6 6 0.000000e+00 # aimag(zd(6,6))
###################################
## INFORMATION FOR SNUMIX
###################################
BLOCK SNUMIX Q= 1.000000e+03 #       ()
      1 1 1.000000e+00 # real(zv(1,1),dp)
      1 2 0.000000e+00 # real(zv(1,2),dp)
      1 3 0.000000e+00 # real(zv(1,3),dp)
      2 1 0.000000e+00 # real(zv(2,1),dp)
      2 2 1.000000e+00 # real(zv(2,2),dp)
      2 3 0.000000e+00 # real(zv(2,3),dp)
      3 1 0.000000e+00 # real(zv(3,1),dp)
      3 2 0.000000e+00 # real(zv(3,2),dp)
      3 3 1.000000e+00 # real(zv(3,3),dp)
###################################
## INFORMATION FOR IMSNUMIX
###################################
BLOCK IMSNUMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(zv(1,1))
      1 2 0.000000e+00 # aimag(zv(1,2))
      1 3 0.000000e+00 # aimag(zv(1,3))
      2 1 0.000000e+00 # aimag(zv(2,1))
      2 2 0.000000e+00 # aimag(zv(2,2))
      2 3 0.000000e+00 # aimag(zv(2,3))
      3 1 0.000000e+00 # aimag(zv(3,1))
      3 2 0.000000e+00 # aimag(zv(3,2))
      3 3 0.000000e+00 # aimag(zv(3,3))
###################################
## INFORMATION FOR USQMIX
###################################
BLOCK USQMIX Q= 1.000000e+03 #       ()
      1 1 -2.151969e-07 # real(zu(1,1),dp)
      1 2 -4.987842e-08 # real(zu(1,2),dp)
      1 3 -7.589083e-10 # real(zu(1,3),dp)
      1 4 1.000000e+00 # real(zu(1,4),dp)
      1 5 2.696544e-11 # real(zu(1,5),dp)
      1 6 -7.554804e-14 # real(zu(1,6),dp)
      2 1 -2.494797e-05 # real(zu(2,1),dp)
      2 2 1.075577e-04 # real(zu(2,2),dp)
      2 3 4.518725e-06 # real(zu(2,3),dp)
      2 4 2.696495e-11 # real(zu(2,4),dp)
      2 5 -1.000000e+00 # real(zu(2,5),dp)
      2 6 2.847429e-09 # real(zu(2,6),dp)
      3 1 -9.890552e-01 # real(zu(3,1),dp)
      3 2 -1.475456e-01 # real(zu(3,2),dp)
      3 3 -1.661371e-04 # real(zu(3,3),dp)
      3 4 -2.202011e-07 # real(zu(3,4),dp)
      3 5 8.804508e-06 # real(zu(3,5),dp)
      3 6 -3.288018e-08 # real(zu(3,6),dp)
      4 1 -1.474298e-01 # real(zu(4,1),dp)
      4 2 9.882333e-01 # real(zu(4,2),dp)
      4 3 4.073457e-02 # real(zu(4,3),dp)
      4 4 1.759598e-08 # real(zu(4,4),dp)
      4 5 1.101542e-04 # real(zu(4,5),dp)
      4 6 8.172805e-06 # real(zu(4,6),dp)
      5 1 5.843555e-03 # real(zu(5,1),dp)
      5 2 -4.029620e-02 # real(zu(5,2),dp)
      5 3 9.987537e-01 # real(zu(5,3),dp)
      5 4 5.564219e-12 # real(zu(5,4),dp)
      5 5 3.306069e-08 # real(zu(5,5),dp)
      5 6 -2.886361e-02 # real(zu(5,6),dp)
      6 1 1.699093e-04 # real(zu(6,1),dp)
      6 2 -1.171664e-03 # real(zu(6,2),dp)
      6 3 2.883932e-02 # real(zu(6,3),dp)
      6 4 8.513808e-14 # real(zu(6,4),dp)
      6 5 2.902910e-09 # real(zu(6,5),dp)
      6 6 9.995834e-01 # real(zu(6,6),dp)
###################################
## INFORMATION FOR IMUSQMIX
###################################
BLOCK IMUSQMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(zu(1,1))
      1 2 0.000000e+00 # aimag(zu(1,2))
      1 3 0.000000e+00 # aimag(zu(1,3))
      1 4 0.000000e+00 # aimag(zu(1,4))
      1 5 0.000000e+00 # aimag(zu(1,5))
      1 6 0.000000e+00 # aimag(zu(1,6))
      2 1 0.000000e+00 # aimag(zu(2,1))
      2 2 0.000000e+00 # aimag(zu(2,2))
      2 3 0.000000e+00 # aimag(zu(2,3))
      2 4 0.000000e+00 # aimag(zu(2,4))
      2 5 0.000000e+00 # aimag(zu(2,5))
      2 6 0.000000e+00 # aimag(zu(2,6))
      3 1 0.000000e+00 # aimag(zu(3,1))
      3 2 0.000000e+00 # aimag(zu(3,2))
      3 3 0.000000e+00 # aimag(zu(3,3))
      3 4 0.000000e+00 # aimag(zu(3,4))
      3 5 0.000000e+00 # aimag(zu(3,5))
      3 6 0.000000e+00 # aimag(zu(3,6))
      4 1 0.000000e+00 # aimag(zu(4,1))
      4 2 0.000000e+00 # aimag(zu(4,2))
      4 3 0.000000e+00 # aimag(zu(4,3))
      4 4 0.000000e+00 # aimag(zu(4,4))
      4 5 0.000000e+00 # aimag(zu(4,5))
      4 6 0.000000e+00 # aimag(zu(4,6))
      5 1 0.000000e+00 # aimag(zu(5,1))
      5 2 0.000000e+00 # aimag(zu(5,2))
      5 3 0.000000e+00 # aimag(zu(5,3))
      5 4 0.000000e+00 # aimag(zu(5,4))
      5 5 0.000000e+00 # aimag(zu(5,5))
      5 6 0.000000e+00 # aimag(zu(5,6))
      6 1 0.000000e+00 # aimag(zu(6,1))
      6 2 0.000000e+00 # aimag(zu(6,2))
      6 3 0.000000e+00 # aimag(zu(6,3))
      6 4 0.000000e+00 # aimag(zu(6,4))
      6 5 0.000000e+00 # aimag(zu(6,5))
      6 6 0.000000e+00 # aimag(zu(6,6))
###################################
## INFORMATION FOR SELMIX
###################################
BLOCK SELMIX Q= 1.000000e+03 #       ()
      1 1 -5.000709e-05 # real(ze(1,1),dp)
      1 2 -0.000000e+00 # real(ze(1,2),dp)
      1 3 -0.000000e+00 # real(ze(1,3),dp)
      1 4 -1.000000e+00 # real(ze(1,4),dp)
      1 5 -0.000000e+00 # real(ze(1,5),dp)
      1 6 -0.000000e+00 # real(ze(1,6),dp)
      2 1 0.000000e+00 # real(ze(2,1),dp)
      2 2 1.033886e-02 # real(ze(2,2),dp)
      2 3 0.000000e+00 # real(ze(2,3),dp)
      2 4 0.000000e+00 # real(ze(2,4),dp)
      2 5 9.999466e-01 # real(ze(2,5),dp)
      2 6 0.000000e+00 # real(ze(2,6),dp)
      3 1 -0.000000e+00 # real(ze(3,1),dp)
      3 2 -0.000000e+00 # real(ze(3,2),dp)
      3 3 -1.692565e-01 # real(ze(3,3),dp)
      3 4 -0.000000e+00 # real(ze(3,4),dp)
      3 5 -0.000000e+00 # real(ze(3,5),dp)
      3 6 -9.855720e-01 # real(ze(3,6),dp)
      4 1 -1.000000e+00 # real(ze(4,1),dp)
      4 2 0.000000e+00 # real(ze(4,2),dp)
      4 3 0.000000e+00 # real(ze(4,3),dp)
      4 4 5.000709e-05 # real(ze(4,4),dp)
      4 5 0.000000e+00 # real(ze(4,5),dp)
      4 6 0.000000e+00 # real(ze(4,6),dp)
      5 1 0.000000e+00 # real(ze(5,1),dp)
      5 2 9.999466e-01 # real(ze(5,2),dp)
      5 3 0.000000e+00 # real(ze(5,3),dp)
      5 4 0.000000e+00 # real(ze(5,4),dp)
      5 5 -1.033886e-02 # real(ze(5,5),dp)
      5 6 0.000000e+00 # real(ze(5,6),dp)
      6 1 0.000000e+00 # real(ze(6,1),dp)
      6 2 0.000000e+00 # real(ze(6,2),dp)
      6 3 -9.855720e-01 # real(ze(6,3),dp)
      6 4 0.000000e+00 # real(ze(6,4),dp)
      6 5 0.000000e+00 # real(ze(6,5),dp)
      6 6 1.692565e-01 # real(ze(6,6),dp)
###################################
## INFORMATION FOR IMSELMIX
###################################
BLOCK IMSELMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(ze(1,1))
      1 2 0.000000e+00 # aimag(ze(1,2))
      1 3 0.000000e+00 # aimag(ze(1,3))
      1 4 0.000000e+00 # aimag(ze(1,4))
      1 5 0.000000e+00 # aimag(ze(1,5))
      1 6 0.000000e+00 # aimag(ze(1,6))
      2 1 0.000000e+00 # aimag(ze(2,1))
      2 2 0.000000e+00 # aimag(ze(2,2))
      2 3 0.000000e+00 # aimag(ze(2,3))
      2 4 0.000000e+00 # aimag(ze(2,4))
      2 5 0.000000e+00 # aimag(ze(2,5))
      2 6 0.000000e+00 # aimag(ze(2,6))
      3 1 0.000000e+00 # aimag(ze(3,1))
      3 2 0.000000e+00 # aimag(ze(3,2))
      3 3 0.000000e+00 # aimag(ze(3,3))
      3 4 0.000000e+00 # aimag(ze(3,4))
      3 5 0.000000e+00 # aimag(ze(3,5))
      3 6 0.000000e+00 # aimag(ze(3,6))
      4 1 0.000000e+00 # aimag(ze(4,1))
      4 2 0.000000e+00 # aimag(ze(4,2))
      4 3 0.000000e+00 # aimag(ze(4,3))
      4 4 0.000000e+00 # aimag(ze(4,4))
      4 5 0.000000e+00 # aimag(ze(4,5))
      4 6 0.000000e+00 # aimag(ze(4,6))
      5 1 0.000000e+00 # aimag(ze(5,1))
      5 2 0.000000e+00 # aimag(ze(5,2))
      5 3 0.000000e+00 # aimag(ze(5,3))
      5 4 0.000000e+00 # aimag(ze(5,4))
      5 5 0.000000e+00 # aimag(ze(5,5))
      5 6 0.000000e+00 # aimag(ze(5,6))
      6 1 0.000000e+00 # aimag(ze(6,1))
      6 2 0.000000e+00 # aimag(ze(6,2))
      6 3 0.000000e+00 # aimag(ze(6,3))
      6 4 0.000000e+00 # aimag(ze(6,4))
      6 5 0.000000e+00 # aimag(ze(6,5))
      6 6 0.000000e+00 # aimag(ze(6,6))
###################################
## INFORMATION FOR SCALARMIX
###################################
BLOCK SCALARMIX Q= 1.000000e+03 #       ()
      1 1 -9.982181e-02 # zh(1,1)
      1 2 -9.950053e-01 # zh(1,2)
      2 1 -9.950053e-01 # zh(2,1)
      2 2 9.982181e-02 # zh(2,2)
###################################
## INFORMATION FOR PSEUDOSCALARMIX
###################################
BLOCK PSEUDOSCALARMIX Q= 1.000000e+03 #       ()
      1 1 9.950321e-02 # za(1,1)
      1 2 -9.950372e-01 # za(1,2)
      2 1 -9.950372e-01 # za(2,1)
      2 2 -9.950321e-02 # za(2,2)
###################################
## INFORMATION FOR CHARGEMIX
###################################
BLOCK CHARGEMIX Q= 1.000000e+03 #       ()
      1 1 9.950317e-02 # zp(1,1)
      1 2 -9.950372e-01 # zp(1,2)
      2 1 -9.950372e-01 # zp(2,1)
      2 2 -9.950317e-02 # zp(2,2)
###################################
## INFORMATION FOR NMIX
###################################
BLOCK NMIX Q= 1.000000e+03 #       ()
      1 1 -7.716463e-06 # real(zn(1,1),dp)
      1 2 9.999706e-01 # real(zn(1,2),dp)
      1 3 -7.610857e-03 # real(zn(1,3),dp)
      1 4 9.413166e-04 # real(zn(1,4),dp)
      2 1 -8.639059e-02 # real(zn(2,1),dp)
      2 2 -6.025928e-03 # real(zn(2,2),dp)
      2 3 -7.045257e-01 # real(zn(2,3),dp)
      2 4 7.043748e-01 # real(zn(2,4),dp)
      3 1 -0.000000e+00 # real(zn(3,1),dp)
      3 2 0.000000e+00 # real(zn(3,2),dp)
      3 3 0.000000e+00 # real(zn(3,3),dp)
      3 4 0.000000e+00 # real(zn(3,4),dp)
      4 1 9.962604e-01 # real(zn(4,1),dp)
      4 2 -5.082856e-04 # real(zn(4,2),dp)
      4 3 -6.011734e-02 # real(zn(4,3),dp)
      4 4 6.205538e-02 # real(zn(4,4),dp)
###################################
## INFORMATION FOR IMNMIX
###################################
BLOCK IMNMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(zn(1,1))
      1 2 0.000000e+00 # aimag(zn(1,2))
      1 3 0.000000e+00 # aimag(zn(1,3))
      1 4 0.000000e+00 # aimag(zn(1,4))
      2 1 0.000000e+00 # aimag(zn(2,1))
      2 2 0.000000e+00 # aimag(zn(2,2))
      2 3 0.000000e+00 # aimag(zn(2,3))
      2 4 0.000000e+00 # aimag(zn(2,4))
      3 1 -1.374547e-03 # aimag(zn(3,1))
      3 2 4.716049e-03 # aimag(zn(3,2))
      3 3 7.070866e-01 # aimag(zn(3,3))
      3 4 7.071099e-01 # aimag(zn(3,4))
      4 1 0.000000e+00 # aimag(zn(4,1))
      4 2 0.000000e+00 # aimag(zn(4,2))
      4 3 0.000000e+00 # aimag(zn(4,3))
      4 4 0.000000e+00 # aimag(zn(4,4))
###################################
## INFORMATION FOR UMIX
###################################
BLOCK UMIX Q= 1.000000e+03 #       ()
      1 1 9.999421e-01 # real(um(1,1),dp)
      1 2 -1.076441e-02 # real(um(1,2),dp)
      2 1 1.076441e-02 # real(um(2,1),dp)
      2 2 9.999421e-01 # real(um(2,2),dp)
###################################
## INFORMATION FOR IMUMIX
###################################
BLOCK IMUMIX Q= 1.000000e+03 #       ()
      1 1 -0.000000e+00 # aimag(um(1,1))
      1 2 -0.000000e+00 # aimag(um(1,2))
      2 1 -0.000000e+00 # aimag(um(2,1))
      2 2 -0.000000e+00 # aimag(um(2,2))
###################################
## INFORMATION FOR VMIX
###################################
BLOCK VMIX Q= 1.000000e+03 #       ()
      1 1 9.999991e-01 # real(up(1,1),dp)
      1 2 -1.331315e-03 # real(up(1,2),dp)
      2 1 1.331315e-03 # real(up(2,1),dp)
      2 2 9.999991e-01 # real(up(2,2),dp)
###################################
## INFORMATION FOR IMVMIX
###################################
BLOCK IMVMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(up(1,1))
      1 2 0.000000e+00 # aimag(up(1,2))
      2 1 0.000000e+00 # aimag(up(2,1))
      2 2 0.000000e+00 # aimag(up(2,2))
###################################
## INFORMATION FOR UELMIX
###################################
BLOCK UELMIX Q= 1.000000e+03 #       ()
      1 1 1.000000e+00 # real(zel(1,1),dp)
      1 2 0.000000e+00 # real(zel(1,2),dp)
      1 3 0.000000e+00 # real(zel(1,3),dp)
      2 1 0.000000e+00 # real(zel(2,1),dp)
      2 2 1.000000e+00 # real(zel(2,2),dp)
      2 3 0.000000e+00 # real(zel(2,3),dp)
      3 1 0.000000e+00 # real(zel(3,1),dp)
      3 2 0.000000e+00 # real(zel(3,2),dp)
      3 3 1.000000e+00 # real(zel(3,3),dp)
###################################
## INFORMATION FOR IMUELMIX
###################################
BLOCK IMUELMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(zel(1,1))
      1 2 0.000000e+00 # aimag(zel(1,2))
      1 3 0.000000e+00 # aimag(zel(1,3))
      2 1 0.000000e+00 # aimag(zel(2,1))
      2 2 0.000000e+00 # aimag(zel(2,2))
      2 3 0.000000e+00 # aimag(zel(2,3))
      3 1 0.000000e+00 # aimag(zel(3,1))
      3 2 0.000000e+00 # aimag(zel(3,2))
      3 3 0.000000e+00 # aimag(zel(3,3))
###################################
## INFORMATION FOR UERMIX
###################################
BLOCK UERMIX Q= 1.000000e+03 #       ()
      1 1 1.000000e+00 # real(zer(1,1),dp)
      1 2 0.000000e+00 # real(zer(1,2),dp)
      1 3 0.000000e+00 # real(zer(1,3),dp)
      2 1 0.000000e+00 # real(zer(2,1),dp)
      2 2 1.000000e+00 # real(zer(2,2),dp)
      2 3 0.000000e+00 # real(zer(2,3),dp)
      3 1 0.000000e+00 # real(zer(3,1),dp)
      3 2 0.000000e+00 # real(zer(3,2),dp)
      3 3 1.000000e+00 # real(zer(3,3),dp)
###################################
## INFORMATION FOR IMUERMIX
###################################
BLOCK IMUERMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(zer(1,1))
      1 2 0.000000e+00 # aimag(zer(1,2))
      1 3 0.000000e+00 # aimag(zer(1,3))
      2 1 0.000000e+00 # aimag(zer(2,1))
      2 2 0.000000e+00 # aimag(zer(2,2))
      2 3 0.000000e+00 # aimag(zer(2,3))
      3 1 0.000000e+00 # aimag(zer(3,1))
      3 2 0.000000e+00 # aimag(zer(3,2))
      3 3 0.000000e+00 # aimag(zer(3,3))
###################################
## INFORMATION FOR UDLMIX
###################################
BLOCK UDLMIX Q= 1.000000e+03 #       ()
      1 1 1.000000e+00 # real(zdl(1,1),dp)
      1 2 1.711636e-06 # real(zdl(1,2),dp)
      1 3 -4.053049e-05 # real(zdl(1,3),dp)
      2 1 -1.700299e-06 # real(zdl(2,1),dp)
      2 2 1.000000e+00 # real(zdl(2,2),dp)
      2 3 2.797051e-04 # real(zdl(2,3),dp)
      3 1 4.053097e-05 # real(zdl(3,1),dp)
      3 2 -2.797050e-04 # real(zdl(3,2),dp)
      3 3 1.000000e+00 # real(zdl(3,3),dp)
###################################
## INFORMATION FOR IMUDLMIX
###################################
BLOCK IMUDLMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(zdl(1,1))
      1 2 0.000000e+00 # aimag(zdl(1,2))
      1 3 -0.000000e+00 # aimag(zdl(1,3))
      2 1 0.000000e+00 # aimag(zdl(2,1))
      2 2 0.000000e+00 # aimag(zdl(2,2))
      2 3 0.000000e+00 # aimag(zdl(2,3))
      3 1 0.000000e+00 # aimag(zdl(3,1))
      3 2 -0.000000e+00 # aimag(zdl(3,2))
      3 3 0.000000e+00 # aimag(zdl(3,3))
###################################
## INFORMATION FOR UDRMIX
###################################
BLOCK UDRMIX Q= 1.000000e+03 #       ()
      1 1 1.000000e+00 # real(zdr(1,1),dp)
      1 2 1.790805e-07 # real(zdr(1,2),dp)
      1 3 -8.277628e-08 # real(zdr(1,3),dp)
      2 1 -1.790796e-07 # real(zdr(2,1),dp)
      2 2 1.000000e+00 # real(zdr(2,2),dp)
      2 3 1.084943e-05 # real(zdr(2,3),dp)
      3 1 8.277822e-08 # real(zdr(3,1),dp)
      3 2 -1.084943e-05 # real(zdr(3,2),dp)
      3 3 1.000000e+00 # real(zdr(3,3),dp)
###################################
## INFORMATION FOR IMUDRMIX
###################################
BLOCK IMUDRMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(zdr(1,1))
      1 2 0.000000e+00 # aimag(zdr(1,2))
      1 3 0.000000e+00 # aimag(zdr(1,3))
      2 1 -0.000000e+00 # aimag(zdr(2,1))
      2 2 0.000000e+00 # aimag(zdr(2,2))
      2 3 0.000000e+00 # aimag(zdr(2,3))
      3 1 0.000000e+00 # aimag(zdr(3,1))
      3 2 0.000000e+00 # aimag(zdr(3,2))
      3 3 0.000000e+00 # aimag(zdr(3,3))
###################################
## INFORMATION FOR UULMIX
###################################
BLOCK UULMIX Q= 1.000000e+03 #       ()
      1 1 9.741672e-01 # real(zul(1,1),dp)
      1 2 2.258009e-01 # real(zul(1,2),dp)
      1 3 3.486980e-03 # real(zul(1,3),dp)
      2 1 -2.257487e-01 # real(zul(2,1),dp)
      2 2 9.733012e-01 # real(zul(2,2),dp)
      2 3 4.150009e-02 # real(zul(2,3),dp)
      3 1 5.976876e-03 # real(zul(3,1),dp)
      3 2 -4.121521e-02 # real(zul(3,2),dp)
      3 3 9.991324e-01 # real(zul(3,3),dp)
###################################
## INFORMATION FOR IMUULMIX
###################################
BLOCK IMUULMIX Q= 1.000000e+03 #       ()
      1 1 -0.000000e+00 # aimag(zul(1,1))
      1 2 -0.000000e+00 # aimag(zul(1,2))
      1 3 -0.000000e+00 # aimag(zul(1,3))
      2 1 0.000000e+00 # aimag(zul(2,1))
      2 2 0.000000e+00 # aimag(zul(2,2))
      2 3 0.000000e+00 # aimag(zul(2,3))
      3 1 0.000000e+00 # aimag(zul(3,1))
      3 2 -0.000000e+00 # aimag(zul(3,2))
      3 3 0.000000e+00 # aimag(zul(3,3))
###################################
## INFORMATION FOR UURMIX
###################################
BLOCK UURMIX Q= 1.000000e+03 #       ()
      1 1 1.000000e+00 # real(zur(1,1),dp)
      1 2 1.891290e-12 # real(zur(1,2),dp)
      1 3 -5.201418e-13 # real(zur(1,3),dp)
      2 1 -1.891290e-12 # real(zur(2,1),dp)
      2 2 1.000000e+00 # real(zur(2,2),dp)
      2 3 -3.096138e-09 # real(zur(2,3),dp)
      3 1 5.201418e-13 # real(zur(3,1),dp)
      3 2 3.096138e-09 # real(zur(3,2),dp)
      3 3 1.000000e+00 # real(zur(3,3),dp)
###################################
## INFORMATION FOR IMUURMIX
###################################
BLOCK IMUURMIX Q= 1.000000e+03 #       ()
      1 1 0.000000e+00 # aimag(zur(1,1))
      1 2 0.000000e+00 # aimag(zur(1,2))
      1 3 0.000000e+00 # aimag(zur(1,3))
      2 1 0.000000e+00 # aimag(zur(2,1))
      2 2 0.000000e+00 # aimag(zur(2,2))
      2 3 0.000000e+00 # aimag(zur(2,3))
      3 1 0.000000e+00 # aimag(zur(3,1))
      3 2 0.000000e+00 # aimag(zur(3,2))
      3 3 0.000000e+00 # aimag(zur(3,3))
###################################
## INFORMATION FOR SPHENO
###################################
BLOCK SPHENO #       spheno internal parameters
      1 -1.000000e+00 # errorlevel
      2 0.000000e+00 # spa_conventions
      11 1.000000e+00 # branching ratios
      13 1.000000e+00 # 3 body decays
      31 1.000000e+03 # gut scale
      33 1.000000e+03 # renormalization scale
      34 1.000000e-04 # precision
      35 4.000000e+01 # iterations
      38 2.000000e+00 # rge level
      40 7.297353e-03 # alpha
      41 2.495200e+00 # gamma_z
      42 2.060000e+00 # gamma_w
      50 1.000000e+00 # rotate negative fermion masses
      51 1.000000e+00 # switch to sckm matrix
      52 0.000000e+00 # ignore negative masses
      53 0.000000e+00 # ignore negative masses at mz
      55 1.000000e+00 # calculate one loop masses
      56 1.000000e+00 # calculate two-loop higgs masses
      57 1.000000e+00 # calculate low energy
      60 1.000000e+00 # include kinetic mixing
      65 1.000000e+00 # solution of tadpole equation
      8 3.000000e+00 # two-loop method: diagrammatic
      9 1.000000e+00 # gauge-less limit
      400 1.000000e-01 # step-size for purely-numerical methode for 2-loop calculation
      401 1.000000e-03 # step-size for semi-analytical methode for 2-loop calculation
      410 0.000000e+00 # indicative error in numerical derivation
###################################
## INFORMATION FOR HIGGSLHC7
###################################
BLOCK HIGGSLHC7 #       higgs production cross section at lhc7 [pb] (rescaled sm values from hxswg)
      1 25 1.542583e+01 # gluon fusion
      2 25 1.212193e+00 # vector boson fusion
      3 25 5.457195e-01 # w-h production
      4 25 3.186175e-01 # z-h production
      5 25 8.666599e-02 # t-t-h production
###################################
## INFORMATION FOR HIGGSLHC8
###################################
BLOCK HIGGSLHC8 #       higgs production cross section at lhc8 [pb] (rescaled sm values from hxswg)
      1 25 1.963133e+01 # gluon fusion
      2 25 1.562795e+00 # vector boson fusion
      3 25 6.989748e-01 # w-h production
      4 25 3.979111e-01 # z-h production
      5 25 1.311624e-01 # t-t-h production
###################################
## INFORMATION FOR HIGGSLHC13
###################################
BLOCK HIGGSLHC13 #       higgs production cross section at lhc13 [pb] (rescaled sm values from sushi 1.5.0)
      1 25 4.584998e+01 # gluon fusion
###################################
## INFORMATION FOR HIGGSLHC14
###################################
BLOCK HIGGSLHC14 #       higgs production cross section at lhc14 [pb] (rescaled sm values from sushi 1.5.0)
      1 25 5.162840e+01 # gluon fusion
###################################
## INFORMATION FOR HIGGSFCC100
###################################
BLOCK HIGGSFCC100 #       higgs production cross section at fcc-pp [pb] (rescaled sm values from sushi 1.5.0)
      1 25 7.594625e+02 # gluon fusion
###################################
## INFORMATION FOR EFFHIGGSCOUPLINGS
###################################
BLOCK EFFHIGGSCOUPLINGS #       values of loop-induced couplings
      25 22 22 3.479661e-05 # h-photon-photon
      25 21 21 4.739799e-05 # h-gluon-gluon
      25 22 23 0.000000e+00 # h-photon-z (not yet calculated by spheno)
      35 22 22 1.558536e-07 # h-photon-photon
      35 21 21 5.595660e-07 # h-gluon-gluon
      35 22 23 0.000000e+00 # h-photon-z (not yet calculated by spheno)
      36 22 22 1.911181e-07 # a-photon-photon
      36 21 21 7.813525e-07 # a-gluon-gluon
      36 22 23 0.000000e+00 # a-photon-z (not yet calculated by spheno)
###################################
## INFORMATION FOR SPHENOLOWENERGY
###################################
BLOCK SPHENOLOWENERGY #       low energy observables
      1 -1.648796e-04 # t-parameter (1-loop bsm)
      2 -4.856069e-05 # s-parameter (1-loop bsm)
      3 -5.290860e-03 # u-parameter (1-loop bsm)
      20 1.495008e-17 # (g-2)_e
      21 6.396180e-13 # (g-2)_mu
      22 2.171825e-10 # (g-2)_tau
      23 0.000000e+00 # edm(e)
      24 0.000000e+00 # edm(mu)
      25 0.000000e+00 # edm(tau)
      39 -2.531758e-04 # delta(rho)
###################################
## INFORMATION FOR FLAVORKITQFV
###################################
BLOCK FLAVORKITQFV #       quark flavor violating observables
      200 3.339513e-04 # br(b->x_s gamma)
      201 1.060163e+00 # br(b->x_s gamma)/br(b->x_s gamma)_sm
      300 6.452186e-04 # br(d->mu nu)
      301 9.989143e-01 # br(d->mu nu)/br(d->mu nu)_sm
      400 6.106042e-03 # br(ds->mu nu)
      401 9.987665e-01 # br(ds->mu nu)/br(ds->mu nu)_sm
      402 5.967481e-02 # br(ds->tau nu)
      403 9.987665e-01 # br(ds->tau nu)/br(ds->tau nu)_sm
      500 5.589971e-07 # br(b->mu nu)
      501 9.881708e-01 # br(b->mu nu)/br(b->mu nu)_sm
      502 1.243841e-04 # br(b->tau nu)
      503 9.881708e-01 # br(b->tau nu)/br(b->tau nu)_sm
      600 6.929009e-01 # br(k->mu nu)
      601 9.998970e-01 # br(k->mu nu)/br(k->mu nu)_sm
      602 2.476477e-05 # r_k = br(k->e nu)/(k->mu nu)
      603 2.475967e-05 # r_k^sm = br(k->e nu)_sm/(k->mu nu)_sm
      1900 1.790760e+01 # delta(m_bs)
      1901 1.000777e+00 # delta(m_bs)/delta(m_bs)_sm
      1902 4.003640e-01 # delta(m_bd)
      1903 1.001037e+00 # delta(m_bd)/delta(m_bd)_sm
      4000 2.430618e-15 # br(b^0_d->e e)
      4001 9.991647e-01 # br(b^0_d->e e)/br(b^0_d->e e)_sm
      4002 7.547006e-14 # br(b^0_s->e e)
      4003 9.991434e-01 # br(b^0_s->e e)/br(b^0_s->e e)_sm
      4004 1.038332e-10 # br(b^0_d->mu mu)
      4005 9.991646e-01 # br(b^0_d->mu mu)/br(b^0_d->mu mu)_sm
      4006 3.224079e-09 # br(b^0_s->mu mu)
      4007 9.991434e-01 # br(b^0_s->mu mu)/br(b^0_s->mu mu)_sm
      4008 2.173337e-08 # br(b^0_d->tau tau)
      4009 9.991566e-01 # br(b^0_d->tau tau)/br(b^0_d->tau tau)_sm
      4010 6.837613e-07 # br(b^0_s->tau tau)
      4011 9.991355e-01 # br(b^0_s->tau tau)/br(b^0_s->tau tau)_sm
      5000 1.639066e-06 # br(b-> s e e)
      5001 9.901988e-01 # br(b-> s e e)/br(b-> s e e)_sm
      5002 1.589653e-06 # br(b-> s mu mu)
      5003 9.905676e-01 # br(b-> s mu mu)/br(b-> s mu mu)_sm
      6000 1.105272e-07 # br(b -> k mu mu)
      6001 9.957406e-01 # br(b -> k mu mu)/br(b -> k mu mu)_sm
      6002 1.105272e-07 # br(b -> k mu mu)
      6003 9.957406e-01 # br(b -> k mu mu)/br(b -> k mu mu)_sm
      7000 3.820650e-05 # br(b->s nu nu)
      7001 1.000339e+00 # br(b->s nu nu)/br(b->s nu nu)_sm
      7002 1.769064e-06 # br(b->d nu nu)
      7003 1.000338e+00 # br(b->d nu nu)/br(b->d nu nu)_sm
      8000 1.238860e-10 # br(k^+ -> pi^+ nu nu)
      8001 1.000192e+00 # br(k^+ -> pi^+ nu nu)/br(k^+ -> pi^+ nu nu)_sm
      8002 2.826038e-11 # br(k_l -> pi^0 nu nu)
      8003 1.000338e+00 # br(k_l -> pi^0 nu nu)/br(k_l -> pi^0 nu nu)_sm
      8004 0.000000e+00 # br(k^0_l -> e mu)
      8005 0.000000e+00 # br(k^0_l -> e mu)/br(k^0_l -> e mu)_sm
      9100 2.048490e-15 # delta(m_k)
      9102 1.000006e+00 # delta(m_k)/delta(m_k)_sm
      9103 1.932190e-03 # epsilon_k
      9104 1.000769e+00 # epsilon_k/epsilon_k^sm
###################################
## INFORMATION FOR FLAVORKITLFV
###################################
BLOCK FLAVORKITLFV #       lepton flavor violating observables
      701 1.865718e-35 # br(mu->e gamma)
      702 0.000000e+00 # br(tau->e gamma)
      703 0.000000e+00 # br(tau->mu gamma)
      800 3.535572e-37 # cr(mu-e, al)
      801 6.921543e-37 # cr(mu-e, ti)
      802 8.813069e-37 # cr(mu-e, sr)
      803 1.218952e-36 # cr(mu-e, sb)
      804 7.169904e-37 # cr(mu-e, au)
      805 6.892705e-37 # cr(mu-e, pb)
      901 1.299614e-37 # br(mu->3e)
      902 0.000000e+00 # br(tau->3e)
      903 0.000000e+00 # br(tau->3mu)
      904 0.000000e+00 # br(tau- -> e- mu+ mu-)
      905 0.000000e+00 # br(tau- -> mu- e+ e-)
      906 0.000000e+00 # br(tau- -> e+ mu- mu-)
      907 0.000000e+00 # br(tau- -> mu+ e- e-)
      1001 1.251735e-47 # br(z->e mu)
      1002 0.000000e+00 # br(z->e tau)
      1003 0.000000e+00 # br(z->mu tau)
      1101 1.394134e-30 # br(h->e mu)
      1102 0.000000e+00 # br(h->e tau)
      1103 0.000000e+00 # br(h->mu tau)
      2001 0.000000e+00 # br(tau->e pi)
      2002 0.000000e+00 # br(tau->e eta)
      2003 0.000000e+00 # br(tau->e eta')
      2004 0.000000e+00 # br(tau->mu pi)
      2005 0.000000e+00 # br(tau->mu eta)
      2006 0.000000e+00 # br(tau->mu eta')
###################################
## INFORMATION FOR FWCOEF
###################################
BLOCK FWCOEF Q= 1.600000e+02 #       wilson coefficients at scale q
      305 4422 0 0 -1.707580e-09 # coeffc7sm
      305 4422 0 2 -1.875176e-09 # coeffc7
      305 4322 0 2 -3.606613e-11 # coeffc7p
      305 4422 0 1 -1.675965e-10 # coeffc7np
      305 4322 0 1 -3.606613e-11 # coeffc7pnp
      305 6421 0 0 -8.553468e-10 # coeffc8sm
      305 6421 0 2 -1.057443e-09 # coeffc8
      305 6321 0 2 -2.033205e-11 # coeffc8p
      305 6421 0 1 -2.020966e-10 # coeffc8np
      305 6321 0 1 -2.033205e-11 # coeffc8pnp
      3051111 4133 0 0 1.025875e-09 # coeffc9eesm
      3051111 4133 0 2 1.025975e-09 # coeffc9ee
      3051111 4233 0 2 -6.491244e-15 # coeffc9pee
      3051111 4133 0 1 9.990969e-14 # coeffc9eenp
      3051111 4233 0 1 -6.491244e-15 # coeffc9peenp
      3051111 4137 0 0 -3.904948e-09 # coeffc10eesm
      3051111 4137 0 2 -3.905960e-09 # coeffc10ee
      3051111 4237 0 2 -6.546607e-14 # coeffc10pee
      3051111 4137 0 1 -1.012173e-12 # coeffc10eenp
      3051111 4237 0 1 6.546607e-14 # coeffc10peenp
      3051313 4133 0 0 1.025874e-09 # coeffc9mumusm
      3051313 4133 0 2 1.025974e-09 # coeffc9mumu
      3051313 4233 0 2 -6.491206e-15 # coeffc9pmumu
      3051313 4133 0 1 9.995062e-14 # coeffc9mumunp
      3051313 4233 0 1 -6.491206e-15 # coeffc9pmumunp
      3051313 4137 0 0 -3.904948e-09 # coeffc10mumusm
      3051313 4137 0 2 -3.905960e-09 # coeffc10mumu
      3051313 4237 0 2 -6.546611e-14 # coeffc10pmumu
      3051313 4137 0 1 -1.012133e-12 # coeffc10mumunp
      3051313 4237 0 1 -6.546611e-14 # coeffc10pmumunp
      3051212 4141 0 0 -1.206378e-08 # coeffclnu1nu1sm
      3051212 4141 0 2 -1.206581e-08 # coeffclnu1nu1
      3051212 4241 0 2 1.309322e-13 # coeffclpnu1nu1
      3051212 4141 0 1 -2.025548e-12 # coeffclnu1nu1np
      3051212 4241 0 1 1.309322e-13 # coeffclpnu1nu1np
      3051414 4141 0 0 -1.206367e-08 # coeffclnu2nu2sm
      3051414 4141 0 2 -1.206569e-08 # coeffclnu2nu2
      3051414 4241 0 2 1.309321e-13 # coeffclpnu2nu2
      3051414 4141 0 1 -2.025676e-12 # coeffclnu2nu2np
      3051414 4241 0 1 1.309321e-13 # coeffclpnu2nu2np
      3051616 4141 0 0 -1.203912e-08 # coeffclnu3nu3sm
      3051616 4141 0 2 -1.204118e-08 # coeffclnu3nu3
      3051616 4241 0 2 1.309109e-13 # coeffclpnu3nu3
      3051616 4141 0 1 -2.061521e-12 # coeffclnu3nu3np
      3051616 4241 0 1 1.309109e-13 # coeffclpnu3nu3np
      3051212 4142 0 0 0.000000e+00 # coeffcrnu1nu1sm
      3051212 4142 0 2 0.000000e+00 # coeffcrnu1nu1
      3051212 4242 0 2 0.000000e+00 # coeffcrpnu1nu1
      3051212 4142 0 1 0.000000e+00 # coeffcrnu1nu1np
      3051212 4242 0 1 0.000000e+00 # coeffcrpnu1nu1np
      3051414 4142 0 0 0.000000e+00 # coeffcrnu2nu2sm
      3051414 4142 0 2 0.000000e+00 # coeffcrnu2nu2
      3051414 4242 0 2 0.000000e+00 # coeffcrpnu2nu2
      3051414 4142 0 1 0.000000e+00 # coeffcrnu2nu2np
      3051414 4242 0 1 0.000000e+00 # coeffcrpnu2nu2np
      3051616 4142 0 0 0.000000e+00 # coeffcrnu3nu3sm
      3051616 4142 0 2 0.000000e+00 # coeffcrnu3nu3
      3051616 4242 0 2 0.000000e+00 # coeffcrpnu3nu3
      3051616 4142 0 1 0.000000e+00 # coeffcrnu3nu3np
      3051616 4242 0 1 0.000000e+00 # coeffcrpnu3nu3np
      1030103 3131 0 2 -3.218326e-24 # coeffkk_sll
      1030103 3232 0 2 -1.161954e-21 # coeffkk_srr
      1030103 3132 0 2 -1.181935e-20 # coeffkk_slr
      1030103 4141 0 2 9.542516e-14 # coeffkk_vll
      1030103 4242 0 2 -1.578695e-27 # coeffkk_vrr
      1030103 4142 0 2 -4.848768e-23 # coeffkk_vlr
      1030103 4343 0 2 1.470407e-25 # coeffkk_tll
      1030103 4444 0 2 5.309691e-23 # coeffkk_trr
      1050105 3131 0 2 -9.265392e-22 # coeffbb_sll
      1050105 3232 0 2 -9.033115e-16 # coeffbb_srr
      1050105 3132 0 2 -1.744977e-17 # coeffbb_slr
      1050105 4141 0 2 3.316573e-12 # coeffbb_vll
      1050105 4242 0 2 9.415720e-25 # coeffbb_vrr
      1050105 4142 0 2 -9.147693e-19 # coeffbb_vlr
      1050105 4343 0 2 -2.153941e-29 # coeffbb_tll
      1050105 4444 0 2 -5.832970e-23 # coeffbb_trr
      3050305 3131 0 2 -9.771088e-18 # coeffbsbs_sll
      3050305 3232 0 2 -2.638867e-14 # coeffbsbs_srr
      3050305 3132 0 2 -9.687059e-15 # coeffbsbs_slr
      3050305 4141 0 2 9.690101e-11 # coeffbsbs_vll
      3050305 4242 0 2 9.929649e-21 # coeffbsbs_vrr
      3050305 4142 0 2 -5.077311e-16 # coeffbsbs_vlr
      3050305 4343 0 2 3.800272e-27 # coeffbsbs_tll
      3050305 4444 0 2 -1.168018e-23 # coeffbsbs_trr
      1030103 3131 0 1 -1.390138e-24 # coeffkk_sllnp
      1030103 3232 0 1 -5.019905e-22 # coeffkk_srrnp
      1030103 3132 0 1 -3.436539e-21 # coeffkk_slrnp
      1030103 4141 0 1 3.011807e-18 # coeffkk_vllnp
      1030103 4242 0 1 -1.590385e-27 # coeffkk_vrrnp
      1030103 4142 0 1 -1.375243e-23 # coeffkk_vlrnp
      1030103 4343 0 1 1.470407e-25 # coeffkk_tllnp
      1030103 4444 0 1 5.309691e-23 # coeffkk_trrnp
      1050105 3131 0 1 3.494619e-23 # coeffbb_sllnp
      1050105 3232 0 1 3.407049e-17 # coeffbb_srrnp
      1050105 3132 0 1 -9.861712e-18 # coeffbb_slrnp
      1050105 4141 0 1 1.961570e-15 # coeffbb_vllnp
      1050105 4242 0 1 6.622341e-25 # coeffbb_vrrnp
      1050105 4142 0 1 3.458793e-20 # coeffbb_vlrnp
      1050105 4343 0 1 -2.153941e-29 # coeffbb_tllnp
      1050105 4444 0 1 -5.832970e-23 # coeffbb_trrnp
      3050305 3131 0 1 3.685204e-19 # coeffbsbs_sllnp
      3050305 3232 0 1 9.952594e-16 # coeffbsbs_srrnp
      3050305 3132 0 1 -5.474047e-15 # coeffbsbs_slrnp
      3050305 4141 0 1 5.730102e-14 # coeffbsbs_vllnp
      3050305 4242 0 1 6.982008e-21 # coeffbsbs_vrrnp
      3050305 4142 0 1 1.920567e-17 # coeffbsbs_vlrnp
      3050305 4343 0 1 3.800272e-27 # coeffbsbs_tllnp
      3050305 4444 0 1 -1.168018e-23 # coeffbsbs_trrnp
      1030103 3131 0 0 -1.828188e-24 # coeffkk_sllsm
      1030103 3232 0 0 -6.599637e-22 # coeffkk_srrsm
      1030103 3132 0 0 -8.382813e-21 # coeffkk_slrsm
      1030103 4141 0 0 9.542215e-14 # coeffkk_vllsm
      1030103 4242 0 0 1.168994e-29 # coeffkk_vrrsm
      1030103 4142 0 0 -3.473525e-23 # coeffkk_vlrsm
      1030103 4343 0 0 1.376789e-48 # coeffkk_tllsm
      1030103 4444 0 0 -2.938937e-45 # coeffkk_trrsm
      1050105 3131 0 0 -9.614854e-22 # coeffbb_sllsm
      1050105 3232 0 0 -9.373820e-16 # coeffbb_srrsm
      1050105 3132 0 0 -7.588062e-18 # coeffbb_slrsm
      1050105 4141 0 0 3.314611e-12 # coeffbb_vllsm
      1050105 4242 0 0 2.793380e-25 # coeffbb_vrrsm
      1050105 4142 0 0 -9.493572e-19 # coeffbb_vlrsm
      1050105 4343 0 0 -2.459659e-55 # coeffbb_tllsm
      1050105 4444 0 0 -6.447928e-50 # coeffbb_trrsm
      3050305 3131 0 0 -1.013961e-17 # coeffbsbs_sllsm
      3050305 3232 0 0 -2.738393e-14 # coeffbsbs_srrsm
      3050305 3132 0 0 -4.213012e-15 # coeffbsbs_slrsm
      3050305 4141 0 0 9.684371e-11 # coeffbsbs_vllsm
      3050305 4242 0 0 2.947641e-21 # coeffbsbs_vrrsm
      3050305 4142 0 0 -5.269368e-16 # coeffbsbs_vlrsm
      3050305 4343 0 0 -1.341990e-51 # coeffbsbs_tllsm
      3050305 4444 0 0 -1.237465e-47 # coeffbsbs_trrsm
###################################
## INFORMATION FOR IMFWCOEF
###################################
BLOCK IMFWCOEF Q= 1.600000e+02 #       im(wilson coefficients) at scale q
      305 4422 0 0 -3.047621e-11 # coeffc7sm
      305 4422 0 2 -3.346756e-11 # coeffc7
      305 4322 0 2 -6.436975e-13 # coeffc7p
      305 4422 0 1 -2.991353e-12 # coeffc7np
      305 4322 0 1 -6.436975e-13 # coeffc7pnp
      305 6421 0 0 -1.526714e-11 # coeffc8sm
      305 6421 0 2 -1.887370e-11 # coeffc8
      305 6321 0 2 -3.628952e-13 # coeffc8p
      305 6421 0 1 -3.606561e-12 # coeffc8np
      305 6321 0 1 -3.628952e-13 # coeffc8pnp
      3051111 4133 0 0 -1.831759e-11 # coeffc9eesm
      3051111 4133 0 2 -1.831938e-11 # coeffc9ee
      3051111 4233 0 2 1.158579e-16 # coeffc9pee
      3051111 4133 0 1 -1.792134e-15 # coeffc9eenp
      3051111 4233 0 1 1.158579e-16 # coeffc9peenp
      3051111 4137 0 0 6.968857e-11 # coeffc10eesm
      3051111 4137 0 2 6.970665e-11 # coeffc10ee
      3051111 4237 0 2 1.168461e-15 # coeffc10pee
      3051111 4137 0 1 1.807404e-14 # coeffc10eenp
      3051111 4237 0 1 -1.168461e-15 # coeffc10peenp
      3051313 4133 0 0 -1.831758e-11 # coeffc9mumusm
      3051313 4133 0 2 -1.831938e-11 # coeffc9mumu
      3051313 4233 0 2 1.158573e-16 # coeffc9pmumu
      3051313 4133 0 1 -1.792864e-15 # coeffc9mumunp
      3051313 4233 0 1 1.158573e-16 # coeffc9pmumunp
      3051313 4137 0 0 6.968858e-11 # coeffc10mumusm
      3051313 4137 0 2 6.970665e-11 # coeffc10mumu
      3051313 4237 0 2 1.168461e-15 # coeffc10pmumu
      3051313 4137 0 1 1.807331e-14 # coeffc10mumunp
      3051313 4237 0 1 1.168461e-15 # coeffc10pmumunp
      3051212 4141 0 0 2.153569e-10 # coeffclnu1nu1sm
      3051212 4141 0 2 2.153930e-10 # coeffclnu1nu1
      3051212 4241 0 2 -2.336922e-15 # coeffclpnu1nu1
      3051212 4141 0 1 3.614789e-14 # coeffclnu1nu1np
      3051212 4241 0 1 -2.336922e-15 # coeffclpnu1nu1np
      3051414 4141 0 0 2.153539e-10 # coeffclnu2nu2sm
      3051414 4141 0 2 2.153901e-10 # coeffclnu2nu2
      3051414 4241 0 2 -2.336920e-15 # coeffclpnu2nu2
      3051414 4141 0 1 3.615016e-14 # coeffclnu2nu2np
      3051414 4241 0 1 -2.336920e-15 # coeffclpnu2nu2np
      3051616 4141 0 0 2.148938e-10 # coeffclnu3nu3sm
      3051616 4141 0 2 2.149306e-10 # coeffclnu3nu3
      3051616 4241 0 2 -2.336543e-15 # coeffclpnu3nu3
      3051616 4141 0 1 3.678992e-14 # coeffclnu3nu3np
      3051616 4241 0 1 -2.336543e-15 # coeffclpnu3nu3np
      3051212 4142 0 0 0.000000e+00 # coeffcrnu1nu1sm
      3051212 4142 0 2 0.000000e+00 # coeffcrnu1nu1
      3051212 4242 0 2 0.000000e+00 # coeffcrpnu1nu1
      3051212 4142 0 1 0.000000e+00 # coeffcrnu1nu1np
      3051212 4242 0 1 0.000000e+00 # coeffcrpnu1nu1np
      3051414 4142 0 0 0.000000e+00 # coeffcrnu2nu2sm
      3051414 4142 0 2 0.000000e+00 # coeffcrnu2nu2
      3051414 4242 0 2 0.000000e+00 # coeffcrpnu2nu2
      3051414 4142 0 1 0.000000e+00 # coeffcrnu2nu2np
      3051414 4242 0 1 0.000000e+00 # coeffcrpnu2nu2np
      3051616 4142 0 0 0.000000e+00 # coeffcrnu3nu3sm
      3051616 4142 0 2 0.000000e+00 # coeffcrnu3nu3
      3051616 4242 0 2 0.000000e+00 # coeffcrpnu3nu3
      3051616 4142 0 1 0.000000e+00 # coeffcrnu3nu3np
      3051616 4242 0 1 0.000000e+00 # coeffcrpnu3nu3np
      1030103 3131 0 2 -1.546756e-24 # coeffkk_sll
      1030103 3232 0 2 -5.583764e-22 # coeffkk_srr
      1030103 3132 0 2 -6.363764e-22 # coeffkk_slr
      1030103 4141 0 2 6.123253e-15 # coeffkk_vll
      1030103 4242 0 2 -3.239198e-29 # coeffkk_vrr
      1030103 4142 0 2 -2.925003e-23 # coeffkk_vlr
      1030103 4343 0 2 1.592315e-27 # coeffkk_tll
      1030103 4444 0 2 5.755975e-25 # coeffkk_trr
      1050105 3131 0 2 -8.374969e-22 # coeffbb_sll
      1050105 3232 0 2 -8.165018e-16 # coeffbb_srr
      1050105 3132 0 2 -1.577841e-17 # coeffbb_slr
      1050105 4141 0 2 2.998707e-12 # coeffbb_vll
      1050105 4242 0 2 8.516367e-25 # coeffbb_vrr
      1050105 4142 0 2 -8.269013e-19 # coeffbb_vlr
      1050105 4343 0 2 -2.704988e-30 # coeffbb_tll
      1050105 4444 0 2 -3.324282e-24 # coeffbb_trr
      3050305 3131 0 2 3.488850e-19 # coeffbsbs_sll
      3050305 3232 0 2 9.422300e-16 # coeffbsbs_srr
      3050305 3132 0 2 3.459637e-16 # coeffbsbs_slr
      3050305 4141 0 2 -3.460575e-12 # coeffbsbs_vll
      3050305 4242 0 2 -3.548026e-22 # coeffbsbs_vrr
      3050305 4142 0 2 1.812995e-17 # coeffbsbs_vlr
      3050305 4343 0 2 1.026262e-27 # coeffbsbs_tll
      3050305 4444 0 2 3.076174e-24 # coeffbsbs_trr
      1030103 3131 0 1 4.030636e-26 # coeffkk_sllnp
      1030103 3232 0 1 1.454261e-23 # coeffkk_srrnp
      1030103 3132 0 1 -3.314471e-22 # coeffkk_slrnp
      1030103 4141 0 1 3.095033e-18 # coeffkk_vllnp
      1030103 4242 0 1 -3.265334e-29 # coeffkk_vrrnp
      1030103 4142 0 1 9.038731e-25 # coeffkk_vlrnp
      1030103 4343 0 1 1.592315e-27 # coeffkk_tllnp
      1030103 4444 0 1 5.755975e-25 # coeffkk_trrnp
      1050105 3131 0 1 3.158529e-23 # coeffbb_sllnp
      1050105 3232 0 1 3.079348e-17 # coeffbb_srrnp
      1050105 3132 0 1 -8.915134e-18 # coeffbb_slrnp
      1050105 4141 0 1 1.772864e-15 # coeffbb_vllnp
      1050105 4242 0 1 5.988153e-25 # coeffbb_vrrnp
      1050105 4142 0 1 3.121825e-20 # coeffbb_vlrnp
      1050105 4343 0 1 -2.704988e-30 # coeffbb_tllnp
      1050105 4444 0 1 -3.324282e-24 # coeffbb_trrnp
      3050305 3131 0 1 -1.315772e-20 # coeffbsbs_sllnp
      3050305 3232 0 1 -3.553492e-17 # coeffbsbs_srrnp
      3050305 3132 0 1 1.954718e-16 # coeffbsbs_slrnp
      3050305 4141 0 1 -2.045834e-15 # coeffbsbs_vllnp
      3050305 4242 0 1 -2.494665e-22 # coeffbsbs_vrrnp
      3050305 4142 0 1 -6.847421e-19 # coeffbsbs_vlrnp
      3050305 4343 0 1 1.026262e-27 # coeffbsbs_tllnp
      3050305 4444 0 1 3.076174e-24 # coeffbsbs_trrnp
      1030103 3131 0 0 -1.587062e-24 # coeffkk_sllsm
      1030103 3232 0 0 -5.729190e-22 # coeffkk_srrsm
      1030103 3132 0 0 -3.049293e-22 # coeffkk_slrsm
      1030103 4141 0 0 6.120158e-15 # coeffkk_vllsm
      1030103 4242 0 0 2.613596e-31 # coeffkk_vrrsm
      1030103 4142 0 0 -3.015391e-23 # coeffkk_vlrsm
      1030103 4343 0 0 -1.647615e-48 # coeffkk_tllsm
      1030103 4444 0 0 -1.840277e-45 # coeffkk_trrsm
      1050105 3131 0 0 -8.690822e-22 # coeffbb_sllsm
      1050105 3232 0 0 -8.472953e-16 # coeffbb_srrsm
      1050105 3132 0 0 -6.863280e-18 # coeffbb_slrsm
      1050105 4141 0 0 2.996934e-12 # coeffbb_vllsm
      1050105 4242 0 0 2.528214e-25 # coeffbb_vrrsm
      1050105 4142 0 0 -8.581196e-19 # coeffbb_vlrsm
      1050105 4343 0 0 -3.279545e-55 # coeffbb_tllsm
      1050105 4444 0 0 -8.597238e-50 # coeffbb_trrsm
      3050305 3131 0 0 3.620427e-19 # coeffbsbs_sllsm
      3050305 3232 0 0 9.777649e-16 # coeffbsbs_srrsm
      3050305 3132 0 0 1.504919e-16 # coeffbsbs_slrsm
      3050305 4141 0 0 -3.458529e-12 # coeffbsbs_vllsm
      3050305 4242 0 0 -1.053361e-22 # coeffbsbs_vrrsm
      3050305 4142 0 0 1.881469e-17 # coeffbsbs_vlrsm
      3050305 4343 0 0 -8.395636e-53 # coeffbsbs_tllsm
      3050305 4444 0 0 5.158343e-49 # coeffbsbs_trrsm
###################################
## INFORMATION FOR FINETUNING
###################################
BLOCK FINETUNING # 
      0 0.000000e+00 # overall ft
      1 0.000000e+00 # m0
      2 0.000000e+00 # m12
      3 0.000000e+00 # azero
      4 0.000000e+00 # \[mu]
      5 0.000000e+00 # b[\[mu]]
###################################
## INFORMATION FOR TREELEVELUNITARITY
###################################
BLOCK TREELEVELUNITARITY # 
      0 1.000000e+00 # tree-level unitarity limits fulfilled or not
      1 0.000000e+00 # maximal scattering eigenvalue
###################################
## INFORMATION FOR DECAY
###################################
DECAY 1000001 2.441127e-02 # sd_1
      3.374526e-02 2 -1000024 2 # br(sd_1 -> fu_1 cha_1 )
      6.325603e-01 2 -1000024 4 # br(sd_1 -> fu_2 cha_1 )
      3.474204e-04 2 -1000024 6 # br(sd_1 -> fu_3 cha_1 )
      3.319923e-01 2 3 1000022 # br(sd_1 -> fd_2 chi_1 )
      1.354606e-03 2 5 1000022 # br(sd_1 -> fd_3 chi_1 )

DECAY 1000003 6.685219e-05 # sd_2
      6.326586e-01 2 -1000024 2 # br(sd_2 -> fu_1 cha_1 )
      3.398393e-02 2 -1000024 4 # br(sd_2 -> fu_2 cha_1 )
      3.333216e-01 2 1 1000022 # br(sd_2 -> fd_1 chi_1 )

DECAY 1000005 2.240495e+00 # sd_3
      2.685883e-04 2 -1000024 2 # br(sd_3 -> fu_1 cha_1 )
      3.828622e-02 2 -1000024 4 # br(sd_3 -> fu_2 cha_1 )
      6.279583e-01 2 -1000024 6 # br(sd_3 -> fu_3 cha_1 )
      2.761637e-04 2 1 1000022 # br(sd_3 -> fd_1 chi_1 )
      1.307386e-02 2 3 1000022 # br(sd_3 -> fd_2 chi_1 )
      3.201368e-01 2 5 1000022 # br(sd_3 -> fd_3 chi_1 )

DECAY 2000001 1.134422e+02 # sd_4
      6.596021e-01 2 -1000024 2 # br(sd_4 -> fu_1 cha_1 )
      7.050827e-03 2 -1000024 4 # br(sd_4 -> fu_2 cha_1 )
      3.281799e-01 2 1 1000022 # br(sd_4 -> fd_1 chi_1 )
      5.167008e-03 2 3 1000022 # br(sd_4 -> fd_2 chi_1 )

DECAY 2000003 1.132934e+02 # sd_5
      7.049988e-03 2 -1000024 2 # br(sd_5 -> fu_1 cha_1 )
      6.595758e-01 2 -1000024 4 # br(sd_5 -> fu_2 cha_1 )
      5.159155e-03 2 1 1000022 # br(sd_5 -> fd_1 chi_1 )
      3.277801e-01 2 3 1000022 # br(sd_5 -> fd_2 chi_1 )
      4.078033e-04 2 5 1000022 # br(sd_5 -> fd_3 chi_1 )

DECAY 2000005 1.120381e+02 # sd_6
      6.665040e-01 2 -1000024 6 # br(sd_6 -> fu_3 cha_1 )
      5.115977e-04 2 3 1000022 # br(sd_6 -> fd_2 chi_1 )
      3.329715e-01 2 5 1000022 # br(sd_6 -> fd_3 chi_1 )

DECAY 1000002 1.293324e-09 # su_1
      9.975096e-01 2 2 1000022 # br(su_1 -> fu_1 chi_1 )
      2.363417e-03 2 1 1000024 # br(su_1 -> cha_1^* fd_1 )
      1.269664e-04 2 3 1000024 # br(su_1 -> cha_1^* fd_2 )

DECAY 1000004 1.210282e-06 # su_2
      3.340312e-01 2 4 1000022 # br(su_2 -> fu_2 chi_1 )
      3.394374e-02 2 1 1000024 # br(su_2 -> cha_1^* fd_1 )
      6.309289e-01 2 3 1000024 # br(su_2 -> cha_1^* fd_2 )
      1.096040e-03 2 5 1000024 # br(su_2 -> cha_1^* fd_3 )

DECAY 1000006 1.134476e+02 # su_3
      3.312050e-01 2 2 1000022 # br(su_3 -> fu_1 chi_1 )
      2.115408e-03 2 4 1000022 # br(su_3 -> fu_2 chi_1 )
      6.521665e-01 2 1 1000024 # br(su_3 -> cha_1^* fd_1 )
      1.451310e-02 2 3 1000024 # br(su_3 -> cha_1^* fd_2 )

DECAY 2000002 1.134477e+02 # su_4
      2.115406e-03 2 2 1000022 # br(su_4 -> fu_1 chi_1 )
      3.312047e-01 2 4 1000022 # br(su_4 -> fu_2 chi_1 )
      1.449065e-02 2 1 1000024 # br(su_4 -> cha_1^* fd_1 )
      6.510980e-01 2 3 1000024 # br(su_4 -> cha_1^* fd_2 )
      1.090945e-03 2 5 1000024 # br(su_4 -> cha_1^* fd_3 )

DECAY 2000004 1.140893e+02 # su_5
      3.331733e-01 2 6 1000022 # br(su_5 -> fu_3 chi_1 )
      1.068705e-03 2 3 1000024 # br(su_5 -> cha_1^* fd_2 )
      6.657352e-01 2 5 1000024 # br(su_5 -> cha_1^* fd_3 )

DECAY 2000006 1.070312e-01 # su_6
      3.330968e-01 2 6 1000022 # br(su_6 -> fu_3 chi_1 )
      1.085329e-03 2 3 1000024 # br(su_6 -> cha_1^* fd_2 )
      6.655647e-01 2 5 1000024 # br(su_6 -> cha_1^* fd_3 )
      2.301695e-04 2 24 1000005 # br(su_6 -> sd_3 vwm^* )

DECAY 1000011 3.058452e-07 # se_1
      6.600218e-01 2 -1000024 12 # br(se_1 -> fv_1 cha_1 )
      3.399782e-01 2 11 1000022 # br(se_1 -> fe_1 chi_1 )

DECAY 1000013 1.294317e-02 # se_2
      6.666559e-01 2 -1000024 14 # br(se_2 -> fv_2 cha_1 )
      3.333441e-01 2 13 1000022 # br(se_2 -> fe_2 chi_1 )

DECAY 1000015 3.469793e+00 # se_3
      6.666554e-01 2 -1000024 16 # br(se_3 -> fv_3 cha_1 )
      3.333446e-01 2 15 1000022 # br(se_3 -> fe_3 chi_1 )

DECAY 2000011 1.193187e+02 # se_4
      6.666556e-01 2 -1000024 12 # br(se_4 -> fv_1 cha_1 )
      3.333444e-01 2 11 1000022 # br(se_4 -> fe_1 chi_1 )

DECAY 2000013 1.193058e+02 # se_5
      6.666556e-01 2 -1000024 14 # br(se_5 -> fv_2 cha_1 )
      3.333444e-01 2 13 1000022 # br(se_5 -> fe_2 chi_1 )

DECAY 2000015 1.158592e+02 # se_6
      6.666549e-01 2 -1000024 16 # br(se_6 -> fv_3 cha_1 )
      3.333451e-01 2 15 1000022 # br(se_6 -> fe_3 chi_1 )

DECAY 1000012 1.193199e+02 # sv_1
      3.333230e-01 2 12 1000022 # br(sv_1 -> fv_1 chi_1 )
      6.666770e-01 2 11 1000024 # br(sv_1 -> cha_1^* fe_1 )

DECAY 1000014 1.193199e+02 # sv_2
      3.333230e-01 2 14 1000022 # br(sv_2 -> fv_2 chi_1 )
      6.666770e-01 2 13 1000024 # br(sv_2 -> cha_1^* fe_2 )

DECAY 1000016 1.193309e+02 # sv_3
      3.333223e-01 2 16 1000022 # br(sv_3 -> fv_3 chi_1 )
      6.666777e-01 2 15 1000024 # br(sv_3 -> cha_1^* fe_3 )

DECAY 25 3.815062e-03 # hh_1
      3.063118e-03 2 22 22 # br(hh_1 -> vp vp )
      4.546734e-02 2 21 21 # br(hh_1 -> vg vg )
      2.290272e-02 2 23 23 # br(hh_1 -> vz vz )
      2.524609e-01 2 -24 24 # br(hh_1 -> vwm^* vwm_virt )
      2.173844e-04 2 -3 3 # br(hh_1 -> fd_2^* fd_2 )
      5.822516e-01 2 -5 5 # br(hh_1 -> fd_3^* fd_3 )
      2.339586e-04 2 -13 13 # br(hh_1 -> fe_2^* fe_2 )
      6.753202e-02 2 -15 15 # br(hh_1 -> fe_3^* fe_3 )
      2.587030e-02 2 -4 4 # br(hh_1 -> fu_2^* fu_2 )

DECAY 35 7.889322e+02 # hh_2
      3.426065e-03 2 -5 5 # br(hh_2 -> fd_3^* fd_3 )
      7.077391e-04 2 -15 15 # br(hh_2 -> fe_3^* fe_3 )
      1.453808e-03 2 -6 6 # br(hh_2 -> fu_3^* fu_3 )
      4.971998e-01 2 -37 24 # br(hh_2 -> hpm_2 vwm^* )
      4.971998e-01 2 -24 37 # br(hh_2 -> hpm_2^* vwm )

DECAY 36 7.886838e+02 # ah_2
      3.427287e-03 2 -5 5 # br(ah_2 -> fd_3^* fd_3 )
      7.079912e-04 2 -15 15 # br(ah_2 -> fe_3^* fe_3 )
      1.461063e-03 2 -6 6 # br(ah_2 -> fu_3^* fu_3 )
      4.971964e-01 2 -37 24 # br(ah_2 -> hpm_2 vwm^* )
      4.971964e-01 2 -24 37 # br(ah_2 -> hpm_2^* vwm )

DECAY 37 3.176172e+00 # hpm_2
      2.208036e-04 2 -3 4 # br(hpm_2^* -> fu_2 fd_2^* )
      1.038002e-03 2 -5 4 # br(hpm_2^* -> fu_2 fd_3^* )
      4.328034e-04 2 -3 6 # br(hpm_2^* -> fu_3 fd_2^* )
      8.593323e-01 2 -5 6 # br(hpm_2^* -> fu_3 fd_3^* )
      4.894300e-04 2 -13 14 # br(hpm_2^* -> fv_2 fe_2^* )
      1.383580e-01 2 -15 16 # br(hpm_2^* -> fv_3 fe_3^* )

DECAY 1000021 1.189507e+00 # glu
      5.610764e-02 2 -1000003 1 # br(glu -> fd_1 sd_2^* )
      5.610764e-02 2 -1 1000003 # br(glu -> fd_1^* sd_2 )
      4.418437e-02 2 -2000001 1 # br(glu -> fd_1 sd_4^* )
      4.418437e-02 2 -1 2000001 # br(glu -> fd_1^* sd_4 )
      6.934453e-04 2 -2000003 1 # br(glu -> fd_1 sd_5^* )
      6.934453e-04 2 -1 2000003 # br(glu -> fd_1^* sd_5 )
      5.610730e-02 2 -1000001 3 # br(glu -> fd_2 sd_1^* )
      5.610730e-02 2 -3 1000001 # br(glu -> fd_2^* sd_1 )
      6.958225e-04 2 -2000001 3 # br(glu -> fd_2 sd_4^* )
      6.958225e-04 2 -3 2000001 # br(glu -> fd_2^* sd_4 )
      4.406751e-02 2 -2000003 3 # br(glu -> fd_2 sd_5^* )
      4.406751e-02 2 -3 2000003 # br(glu -> fd_2^* sd_5 )
      5.432179e-02 2 -1000005 5 # br(glu -> fd_3 sd_3^* )
      5.432179e-02 2 -5 1000005 # br(glu -> fd_3^* sd_3 )
      1.083374e-04 2 -2000003 5 # br(glu -> fd_3 sd_5^* )
      1.083374e-04 2 -5 2000003 # br(glu -> fd_3^* sd_5 )
      8.601029e-03 2 -2000005 5 # br(glu -> fd_3 sd_6^* )
      8.601029e-03 2 -5 2000005 # br(glu -> fd_3^* sd_6 )
      7.242571e-02 2 -1000002 2 # br(glu -> fu_1 su_1^* )
      7.242571e-02 2 -2 1000002 # br(glu -> fu_1^* su_1 )
      4.482071e-02 2 -1000006 2 # br(glu -> fu_1 su_3^* )
      4.482071e-02 2 -2 1000006 # br(glu -> fu_1^* su_3 )
      2.862502e-04 2 -2000002 2 # br(glu -> fu_1 su_4^* )
      2.862502e-04 2 -2 2000002 # br(glu -> fu_1^* su_4 )
      7.242104e-02 2 -1000004 4 # br(glu -> fu_2 su_2^* )
      7.242104e-02 2 -4 1000004 # br(glu -> fu_2^* su_2 )
      2.862522e-04 2 -1000006 4 # br(glu -> fu_2 su_3^* )
      2.862522e-04 2 -4 1000006 # br(glu -> fu_2^* su_3 )
      4.481479e-02 2 -2000002 4 # br(glu -> fu_2 su_4^* )
      4.481479e-02 2 -4 2000002 # br(glu -> fu_2^* su_4 )

DECAY 1000022 0.000000e+00 # chi_1
DECAY 1000023 1.142156e+02 # chi_2
      8.553141e-02 2 36 1000022 # br(chi_2 -> chi_1 ah_2 )
      1.577795e-01 2 -1000024 37 # br(chi_2 -> cha_1 hpm_2^* )
      1.577795e-01 2 -37 1000024 # br(chi_2 -> cha_1^* hpm_2 )
      1.660452e-01 2 -1000024 24 # br(chi_2 -> cha_1 vwm^* )
      1.660452e-01 2 -24 1000024 # br(chi_2 -> cha_1^* vwm )
      1.092572e-01 2 25 1000022 # br(chi_2 -> chi_1 hh_1 )
      6.306194e-02 2 35 1000022 # br(chi_2 -> chi_1 hh_2 )
      6.285672e-02 2 23 1000022 # br(chi_2 -> chi_1 vz )
      2.824260e-04 2 -1000005 5 # br(chi_2 -> fd_3 sd_3^* )
      2.824260e-04 2 -5 1000005 # br(chi_2 -> fd_3^* sd_3 )
      1.857022e-04 2 -2000005 5 # br(chi_2 -> fd_3 sd_6^* )
      1.857022e-04 2 -5 2000005 # br(chi_2 -> fd_3^* sd_6 )
      7.718997e-03 2 -2000004 6 # br(chi_2 -> fu_3 su_5^* )
      7.718997e-03 2 -6 2000004 # br(chi_2 -> fu_3^* su_5 )
      7.539212e-03 2 -2000006 6 # br(chi_2 -> fu_3 su_6^* )
      7.539212e-03 2 -6 2000006 # br(chi_2 -> fu_3^* su_6 )

DECAY 1000025 1.148968e+02 # chi_3
      6.316083e-02 2 36 1000022 # br(chi_3 -> chi_1 ah_2 )
      1.579144e-01 2 -1000024 37 # br(chi_3 -> cha_1 hpm_2^* )
      1.579144e-01 2 -37 1000024 # br(chi_3 -> cha_1^* hpm_2 )
      1.664987e-01 2 -1000024 24 # br(chi_3 -> cha_1 vwm^* )
      1.664987e-01 2 -24 1000024 # br(chi_3 -> cha_1^* vwm )
      6.690081e-02 2 25 1000022 # br(chi_3 -> chi_1 hh_1 )
      8.567217e-02 2 35 1000022 # br(chi_3 -> chi_1 hh_2 )
      1.036448e-01 2 23 1000022 # br(chi_3 -> chi_1 vz )
      2.610497e-04 2 -1000005 5 # br(chi_3 -> fd_3 sd_3^* )
      2.610497e-04 2 -5 1000005 # br(chi_3 -> fd_3^* sd_3 )
      2.033201e-04 2 -2000005 5 # br(chi_3 -> fd_3 sd_6^* )
      2.033201e-04 2 -5 2000005 # br(chi_3 -> fd_3^* sd_6 )
      8.312286e-03 2 -2000004 6 # br(chi_3 -> fu_3 su_5^* )
      8.312286e-03 2 -6 2000004 # br(chi_3 -> fu_3^* su_5 )
      7.114049e-03 2 -2000006 6 # br(chi_3 -> fu_3 su_6^* )
      7.114049e-03 2 -6 2000006 # br(chi_3 -> fu_3^* su_6 )

DECAY 1000035 8.759179e+00 # chi_4
      7.327176e-03 2 36 1000022 # br(chi_4 -> chi_1 ah_2 )
      1.323572e-02 2 -1000024 37 # br(chi_4 -> cha_1 hpm_2^* )
      1.323572e-02 2 -37 1000024 # br(chi_4 -> cha_1^* hpm_2 )
      1.617295e-02 2 -1000024 24 # br(chi_4 -> cha_1 vwm^* )
      1.617295e-02 2 -24 1000024 # br(chi_4 -> cha_1^* vwm )
      1.432319e-02 2 -1000037 24 # br(chi_4 -> cha_2 vwm^* )
      1.432319e-02 2 -24 1000037 # br(chi_4 -> cha_2^* vwm )
      1.089680e-02 2 25 1000022 # br(chi_4 -> chi_1 hh_1 )
      5.169380e-03 2 35 1000022 # br(chi_4 -> chi_1 hh_2 )
      5.666982e-02 2 25 1000023 # br(chi_4 -> chi_2 hh_1 )
      6.293130e-03 2 23 1000022 # br(chi_4 -> chi_1 vz )
      1.320384e-02 2 23 1000025 # br(chi_4 -> chi_3 vz )
      2.250318e-02 2 -1000003 1 # br(chi_4 -> fd_1 sd_2^* )
      2.250318e-02 2 -1 1000003 # br(chi_4 -> fd_1^* sd_2 )
      5.388747e-03 2 -2000001 1 # br(chi_4 -> fd_1 sd_4^* )
      5.388747e-03 2 -1 2000001 # br(chi_4 -> fd_1^* sd_4 )
      8.459842e-05 2 -2000003 1 # br(chi_4 -> fd_1 sd_5^* )
      8.459842e-05 2 -1 2000003 # br(chi_4 -> fd_1^* sd_5 )
      2.249864e-02 2 -1000001 3 # br(chi_4 -> fd_2 sd_1^* )
      2.249864e-02 2 -3 1000001 # br(chi_4 -> fd_2^* sd_1 )
      8.492632e-05 2 -2000001 3 # br(chi_4 -> fd_2 sd_4^* )
      8.492632e-05 2 -3 2000001 # br(chi_4 -> fd_2^* sd_4 )
      5.380126e-03 2 -2000003 3 # br(chi_4 -> fd_2 sd_5^* )
      5.380126e-03 2 -3 2000003 # br(chi_4 -> fd_2^* sd_5 )
      2.175030e-02 2 -1000005 5 # br(chi_4 -> fd_3 sd_3^* )
      2.175030e-02 2 -5 1000005 # br(chi_4 -> fd_3^* sd_3 )
      5.224856e-03 2 -2000005 5 # br(chi_4 -> fd_3 sd_6^* )
      5.224856e-03 2 -5 2000005 # br(chi_4 -> fd_3^* sd_6 )
      1.338821e-02 2 -1000011 11 # br(chi_4 -> fe_1 se_1^* )
      1.338821e-02 2 -11 1000011 # br(chi_4 -> fe_1^* se_1 )
      2.445761e-03 2 -2000011 11 # br(chi_4 -> fe_1 se_4^* )
      2.445761e-03 2 -11 2000011 # br(chi_4 -> fe_1^* se_4 )
      1.338693e-02 2 -1000013 13 # br(chi_4 -> fe_2 se_2^* )
      1.338693e-02 2 -13 1000013 # br(chi_4 -> fe_2^* se_2 )
      2.446528e-03 2 -2000013 13 # br(chi_4 -> fe_2 se_5^* )
      2.446528e-03 2 -13 2000013 # br(chi_4 -> fe_2^* se_5 )
      1.304239e-02 2 -1000015 15 # br(chi_4 -> fe_3 se_3^* )
      1.304239e-02 2 -15 1000015 # br(chi_4 -> fe_3^* se_3 )
      2.646251e-03 2 -2000015 15 # br(chi_4 -> fe_3 se_6^* )
      2.646251e-03 2 -15 2000015 # br(chi_4 -> fe_3^* se_6 )
      9.382739e-02 2 -1000002 2 # br(chi_4 -> fu_1 su_1^* )
      9.382739e-02 2 -2 1000002 # br(chi_4 -> fu_1^* su_1 )
      5.384383e-03 2 -1000006 2 # br(chi_4 -> fu_1 su_3^* )
      5.384383e-03 2 -2 1000006 # br(chi_4 -> fu_1^* su_3 )
      9.382668e-02 2 -1000004 4 # br(chi_4 -> fu_2 su_2^* )
      9.382668e-02 2 -4 1000004 # br(chi_4 -> fu_2^* su_2 )
      5.384383e-03 2 -2000002 4 # br(chi_4 -> fu_2 su_4^* )
      5.384383e-03 2 -4 2000002 # br(chi_4 -> fu_2^* su_4 )
      8.132560e-03 2 -2000004 6 # br(chi_4 -> fu_3 su_5^* )
      8.132560e-03 2 -6 2000004 # br(chi_4 -> fu_3^* su_5 )
      6.215796e-02 2 -2000006 6 # br(chi_4 -> fu_3 su_6^* )
      6.215796e-02 2 -6 2000006 # br(chi_4 -> fu_3^* su_6 )
      2.466218e-03 2 -1000012 12 # br(chi_4 -> fv_1 sv_1^* )
      2.466218e-03 2 -12 1000012 # br(chi_4 -> fv_1^* sv_1 )
      2.466167e-03 2 -1000014 14 # br(chi_4 -> fv_2 sv_2^* )
      2.466167e-03 2 -14 1000014 # br(chi_4 -> fv_2^* sv_2 )
      2.451638e-03 2 -1000016 16 # br(chi_4 -> fv_3 sv_3^* )
      2.451638e-03 2 -16 1000016 # br(chi_4 -> fv_3^* sv_3 )

DECAY 1000024 1.000000e-10 # cha_1
      1.650000e-01 2 211 1000022 # 
      1.200000e-02 2 321 1000022 # 
      2.850000e-01 3 111 211 1000022 # 
      1.730000e-01 3 -11 12 1000022 # br(cha_1^* -> chi_1 fv_1 fe_1^* )
      1.660000e-01 3 -13 14 1000022 # br(cha_1^* -> chi_1 fv_2 fe_2^* )
      1.000000e-02 3 211 311 1000022 # 
      5.000000e-03 3 111 321 1000022 # 
      7.500000e-02 4 111 111 211 1000022 # 
      7.500000e-02 4 -211 211 211 1000022 # 

DECAY 1000037 1.159878e+02 # cha_2
      1.474082e-01 2 36 1000024 # br(cha_2^* -> cha_1^* ah_2 )
      1.747159e-01 2 25 1000024 # br(cha_2^* -> cha_1^* hh_1 )
      1.474038e-01 2 35 1000024 # br(cha_2^* -> cha_1^* hh_2 )
      1.651469e-01 2 23 1000024 # br(cha_2^* -> cha_1^* vz )
      1.564561e-01 2 37 1000022 # br(cha_2^* -> chi_1 hpm_2^* )
      1.650018e-01 2 24 1000022 # br(cha_2^* -> chi_1 vwm^* )
      4.135012e-04 2 -5 2000004 # br(cha_2^* -> fd_3^* su_5 )
      1.531718e-02 2 -5 2000006 # br(cha_2^* -> fd_3^* su_6 )
      1.130740e-03 2 -1000005 6 # br(cha_2^* -> fu_3 sd_3^* )
      1.556898e-02 2 -2000005 6 # br(cha_2^* -> fu_3 sd_6^* )
      1.136867e-02 3 -5 6 1000022 # br(cha_2^* -> chi_1 fu_3 fd_3^* )

DECAY 2 0.000000e+00 # fu_1
DECAY 4 0.000000e+00 # fu_2
DECAY 6 1.607581e+00 # fu_3
      1.675949e-03 2 3 24 # br(fu_3 -> fd_2 vwm^* )
      9.982886e-01 2 5 24 # br(fu_3 -> fd_3 vwm^* )

DECAY 21 0.000000e+00 # vg
DECAY 22 0.000000e+00 # vp
DECAY 23 2.495200e+00 # vz
DECAY 24 2.141000e+00 # vwm
DECAY 12 0.000000e+00 # fv_1
DECAY 14 0.000000e+00 # fv_2
DECAY 16 0.000000e+00 # fv_3
DECAY 11 0.000000e+00 # fe_1
DECAY 13 0.000000e+00 # fe_2
DECAY 15 0.000000e+00 # fe_3
DECAY 1 0.000000e+00 # fd_1
DECAY 3 0.000000e+00 # fd_2
DECAY 5 0.000000e+00 # fd_3
</slha>
<MGPythiaCard>
<![CDATA[
!
! It is possible to run this card manually with:
!    LD_LIBRARY_PATH=/home/ilara/Programas/MG5_aMC_v3_4_1/HEPTools/lib:$LD_LIBRARY_PATH /home/ilara/Programas/MG5_aMC_v3_4_1/HEPTools/MG5aMC_PY8_interface/MG5aMC_PY8_interface tag_1_pythia8.cmd
!
!
! Pythia8 cmd card automatically generated by MadGraph5_aMC@NLO
! For more information on the use of the MG5aMC / Pythia8 interface, visit
!    https://cp3.irmp.ucl.ac.be/projects/madgraph/wiki/LOPY8Merging
!
! ==================
! General parameters 
! ==================
!
Main:numberOfEvents      = -1
!
! -------------------------------------------------------------------
! Specify the HEPMC output of the Pythia8 shower. You can set it to:
!   hepmc       : MG5aMC will automatically place it the run_<i> directory
!   hepmc.gz    : Same as 'hepmc', but also will compress the output file.
!   hepmcremove : MG5aMC will automatically remove the file at the end of the run.
!                 (usefull when running with Delphes)
!   hepmc@<hepmc_path> :
!                 User defined path where the HEPMC file must written. It will
!                 therefore not be placed in the run_<i> directory. The
!                 specified path, if not absolute, will be relative to
!                 the Event/run_<i> directory of the process output.
!   /dev/null : to turn off the HEPMC output.
!   fifo      : to have MG5aMC setup the piping of the PY8 output to 
!               analysis tools such as MadAnalysis5.  
!   fifo@<fifo_path> :
!               Same as 'fifo', but selecting a custom path to create the
!               fifo pipe. (useful to select a mounted drive that supports 
!               fifo). Note that the fifo file extension *must* be '.hepmc.fifo'.
! -------------------------------------------------------------------
!
HEPMCoutput:file         = tag_1_pythia8_events.hepmc
!
! --------------------------------------------------------------------
! Parameters relevant only when performing MLM merging, which can be
! turned on by setting ickkw to '1' in the run_card and chosing a 
! positive value for the parameter xqcut.
! For details, see section 'Jet Matching' on the left-hand menu of 
!    http://home.thep.lu.se/~torbjorn/pythia81html/Welcome.html
! --------------------------------------------------------------------
! If equal to -1.0, MadGraph5_aMC@NLO will set it automatically based 
! on the parameter 'xqcut' of the run_card.dat 
JetMatching:qCut         = 4.5000000000e+01
! Use default kt-MLM to match parton level jets to those produced by the
! shower. But the other Shower-kt scheme is available too with this option.
JetMatching:doShowerKt   = off
! A value of -1 means that it is automatically guessed by MadGraph.
! It is however always safer to explicitly set it.
JetMatching:nJetMax      = 2
!
! --------------------------------------------------------------------
! Parameters relevant only when performing CKKW-L merging, which can
! be turned on by setting the parameter 'ptlund' *or* 'ktdurham' to
! a positive value. 
! For details, see section 'CKKW-L Merging' on the left-hand menu of 
!    http://home.thep.lu.se/~torbjorn/pythia81html/Welcome.html
! --------------------------------------------------------------------
! Central merging scale values you want to be used.
! If equal to -1.0, then MadGraph5_aMC@NLO will set this automatically
! based on the parameter 'ktdurham' of the run_card.dat
! The following parameter was forced to be commented out by MG5aMC.
! Merging:TMS              = -1.0
! This must be set manually, according to Pythia8 directives.
! An example of possible value is 'pp>LEPTONS,NEUTRINOS'
! Alternatively, from Pythia v8.223 onwards, the value 'guess' can be 
! used to instruct Pythia to guess the hard process. The guess would mean 
! that all particles apart from light partons will be considered as a part 
! of the hard process. This guess is prone to errors if the desired hard 
! process is complicated (i.e. contains light partons). The user should
! then be wary of suspicious error messages in the Pythia log file. 
! The following parameter was forced to be commented out by MG5aMC.
! Merging:Process          = <set_by_user>
! A value of -1 means that it is automatically guessed by MadGraph.
! It is however always safer to explicitly set it.
! The following parameter was forced to be commented out by MG5aMC.
! Merging:nJetMax  		 = -1
!
! For all merging schemes, decide whehter you want the merging scale
! variation computed for only the central weights or all other 
! PDF and scale variation weights as well
SysCalc:fullCutVariation = off
!
! ==========================
! User customized parameters 
! ==========================
!
! By default, Pythia8 generates multi-parton interaction events. This is
! often irrelevant for phenomenology and very slow. You can turn this 
! feature off by uncommenting the line below if so desired.
!partonlevel:mpi = off
!
! Additional technical parameters set by MG5_aMC.
!
! Tell Pythia8 that an LHEF input is used.
Beams:frameType=4
! This parameter is automatically set to True by MG5aMC when doing MLM merging with PY8.
Beams:setProductionScalesFromLHEF=on
! 1.0 corresponds to HEPMC weight given in [mb]. We choose here the [pb] normalization.
HEPMCoutput:scaling=1.0000000000e+09
! Be more forgiving with momentum mismatches.
Check:epTolErr=1.0000000000e-02
JetMatching:etaJetMax=1.0000000000e+03
! Specifiy if we are merging sample of different multiplicity.
JetMatching:merge=on
! Do veto externally (e.g. in SysCalc).
JetMatching:doVeto=off
JetMatching:scheme=1
! Specify one must read inputs from the MadGraph banner.
JetMatching:setMad=off
JetMatching:coneRadius=1.0000000000e+00
JetMatching:nQmatch=4
SysCalc:qCutList=67.500,90.000
! Value of the merging scale below which one does not even write the HepMC event.
SysCalc:qWeed=3.0000000000e+01
! 
!     ====================
!     Subrun definitions
!     ====================
!     
LHEFInputs:nSubruns=1
Main:subrun=0
!
!  Definition of subrun 0
!
Beams:LHEF=unweighted_events.lhe.gz
]]>
</MGPythiaCard>
<MGGenerationInfo>
#  Number of Events        :       10000
#  Integrated weight (pb)  :       0.4641342057999999
#  Matched Integrated weight (pb)  :  -1.0
</MGGenerationInfo>
</header>
<init>
2212 2212 6.500000e+03 6.500000e+03 0 0 246800 246800 -4 6
6.977540e-02 5.181223e-04 4.641342e-01 2
8.873287e-02 5.213626e-04 4.641342e-01 3
8.805800e-02 7.052594e-04 4.641342e-01 5
1.116432e-01 7.552621e-04 4.641342e-01 6
4.640770e-02 3.775594e-04 4.641342e-01 8
5.951701e-02 7.544065e-04 4.641342e-01 9
<generator name='MadGraph5_aMC@NLO' version='3.4.1'>please cite 1405.0301 </generator>
</init>
</LesHouchesEvents>
